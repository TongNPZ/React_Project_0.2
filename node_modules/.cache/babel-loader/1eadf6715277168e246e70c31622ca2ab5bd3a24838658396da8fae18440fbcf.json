{"ast":null,"code":"/**\n * Generates a pseudo random number. Although it is not cryptographically secure\n * and uniformly distributed, it is not a concern for the intended use-case,\n * which is to generate distinct numbers.\n *\n * Credit: https://stackoverflow.com/a/19303725/10254049\n */\nvar SimpleRNG = /** @class */function () {\n  function SimpleRNG(seed) {\n    this.seed = seed;\n  }\n  SimpleRNG.prototype.nextInt = function () {\n    var x = Math.sin(this.seed++) * 10000;\n    return x - Math.floor(x);\n  };\n  SimpleRNG.withSeed = function (seed) {\n    return new SimpleRNG(seed);\n  };\n  return SimpleRNG;\n}();\nexport { SimpleRNG };","map":{"version":3,"names":["SimpleRNG","seed","prototype","nextInt","x","Math","sin","floor","withSeed"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\utils\\rng.ts"],"sourcesContent":["/**\n * Generates a pseudo random number. Although it is not cryptographically secure\n * and uniformly distributed, it is not a concern for the intended use-case,\n * which is to generate distinct numbers.\n *\n * Credit: https://stackoverflow.com/a/19303725/10254049\n */\nexport class SimpleRNG {\n  static withSeed = (seed: number) => new SimpleRNG(seed);\n\n  private seed: number;\n\n  private constructor(seed: number) {\n    this.seed = seed;\n  }\n\n  nextInt(): number {\n    const x = Math.sin(this.seed++) * 10000;\n    return x - Math.floor(x);\n  }\n}\n"],"mappings":"AAAA;;;;;;;AAOA,IAAAA,SAAA;EAKE,SAAAA,UAAoBC,IAAY;IAC9B,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEAD,SAAA,CAAAE,SAAA,CAAAC,OAAO,GAAP;IACE,IAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACL,IAAI,EAAE,CAAC,GAAG,KAAK;IACvC,OAAOG,CAAC,GAAGC,IAAI,CAACE,KAAK,CAACH,CAAC,CAAC;EAC1B,CAAC;EAXMJ,SAAA,CAAAQ,QAAQ,GAAG,UAACP,IAAY;IAAK,WAAID,SAAS,CAACC,IAAI,CAAC;EAAnB,CAAmB;EAYzD,OAAAD,SAAC;CAAA,CAbD;SAAaA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}