{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { createCmap } from \"./CMap\";\nimport { deriveFontFlags } from \"./FontFlags\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport PDFString from \"../objects/PDFString\";\nimport { byAscendingId, Cache, sortedUniq, toHexStringOfMinLength } from \"../../utils\";\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\r\n */\nvar CustomFontEmbedder = /** @class */function () {\n  function CustomFontEmbedder(font, fontData, customName, fontFeatures) {\n    var _this = this;\n    this.allGlyphsInFontSortedById = function () {\n      var glyphs = new Array(_this.font.characterSet.length);\n      for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n        var codePoint = _this.font.characterSet[idx];\n        glyphs[idx] = _this.font.glyphForCodePoint(codePoint);\n      }\n      return sortedUniq(glyphs.sort(byAscendingId), function (g) {\n        return g.id;\n      });\n    };\n    this.font = font;\n    this.scale = 1000 / this.font.unitsPerEm;\n    this.fontData = fontData;\n    this.fontName = this.font.postscriptName || 'Font';\n    this.customName = customName;\n    this.fontFeatures = fontFeatures;\n    this.baseFontName = '';\n    this.glyphCache = Cache.populatedBy(this.allGlyphsInFontSortedById);\n  }\n  CustomFontEmbedder.for = function (fontkit, fontData, customName, fontFeatures) {\n    return __awaiter(this, void 0, void 0, function () {\n      var font;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fontkit.create(fontData)];\n          case 1:\n            font = _a.sent();\n            return [2 /*return*/, new CustomFontEmbedder(font, fontData, customName, fontFeatures)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\r\n   * Unicode, but embedded fonts use their own custom encodings)\r\n   */\n  CustomFontEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      hexCodes[idx] = toHexStringOfMinLength(glyphs[idx].id, 4);\n    }\n    return PDFHexString.of(hexCodes.join(''));\n  };\n  // The advanceWidth takes into account kerning automatically, so we don't\n  // have to do that manually like we do for the standard fonts.\n  CustomFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var totalWidth = 0;\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      totalWidth += glyphs[idx].advanceWidth * this.scale;\n    }\n    var scale = size / 1000;\n    return totalWidth * scale;\n  };\n  CustomFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = options.descender,\n      descender = _a === void 0 ? true : _a;\n    var _b = this.font,\n      ascent = _b.ascent,\n      descent = _b.descent,\n      bbox = _b.bbox;\n    var yTop = (ascent || bbox.maxY) * this.scale;\n    var yBottom = (descent || bbox.minY) * this.scale;\n    var height = yTop - yBottom;\n    if (!descender) height -= Math.abs(descent) || 0;\n    return height / 1000 * size;\n  };\n  CustomFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n    var _a = this.font,\n      ascent = _a.ascent,\n      descent = _a.descent,\n      bbox = _a.bbox;\n    var yTop = (ascent || bbox.maxY) * this.scale;\n    var yBottom = (descent || bbox.minY) * this.scale;\n    return 1000 * height / (yTop - yBottom);\n  };\n  CustomFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n    this.baseFontName = this.customName || context.addRandomSuffix(this.fontName);\n    return this.embedFontDict(context, ref);\n  };\n  CustomFontEmbedder.prototype.embedFontDict = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cidFontDictRef, unicodeCMapRef, fontDict;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.embedCIDFontDict(context)];\n          case 1:\n            cidFontDictRef = _a.sent();\n            unicodeCMapRef = this.embedUnicodeCmap(context);\n            fontDict = context.obj({\n              Type: 'Font',\n              Subtype: 'Type0',\n              BaseFont: this.baseFontName,\n              Encoding: 'Identity-H',\n              DescendantFonts: [cidFontDictRef],\n              ToUnicode: unicodeCMapRef\n            });\n            if (ref) {\n              context.assign(ref, fontDict);\n              return [2 /*return*/, ref];\n            } else {\n              return [2 /*return*/, context.register(fontDict)];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  CustomFontEmbedder.prototype.isCFF = function () {\n    return this.font.cff;\n  };\n  CustomFontEmbedder.prototype.embedCIDFontDict = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontDescriptorRef, cidFontDict;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.embedFontDescriptor(context)];\n          case 1:\n            fontDescriptorRef = _a.sent();\n            cidFontDict = context.obj({\n              Type: 'Font',\n              Subtype: this.isCFF() ? 'CIDFontType0' : 'CIDFontType2',\n              CIDToGIDMap: 'Identity',\n              BaseFont: this.baseFontName,\n              CIDSystemInfo: {\n                Registry: PDFString.of('Adobe'),\n                Ordering: PDFString.of('Identity'),\n                Supplement: 0\n              },\n              FontDescriptor: fontDescriptorRef,\n              W: this.computeWidths()\n            });\n            return [2 /*return*/, context.register(cidFontDict)];\n        }\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.embedFontDescriptor = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontStreamRef, scale, _a, italicAngle, ascent, descent, capHeight, xHeight, _b, minX, minY, maxX, maxY, fontDescriptor;\n      var _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4 /*yield*/, this.embedFontStream(context)];\n          case 1:\n            fontStreamRef = _d.sent();\n            scale = this.scale;\n            _a = this.font, italicAngle = _a.italicAngle, ascent = _a.ascent, descent = _a.descent, capHeight = _a.capHeight, xHeight = _a.xHeight;\n            _b = this.font.bbox, minX = _b.minX, minY = _b.minY, maxX = _b.maxX, maxY = _b.maxY;\n            fontDescriptor = context.obj((_c = {\n              Type: 'FontDescriptor',\n              FontName: this.baseFontName,\n              Flags: deriveFontFlags(this.font),\n              FontBBox: [minX * scale, minY * scale, maxX * scale, maxY * scale],\n              ItalicAngle: italicAngle,\n              Ascent: ascent * scale,\n              Descent: descent * scale,\n              CapHeight: (capHeight || ascent) * scale,\n              XHeight: (xHeight || 0) * scale,\n              // Not sure how to compute/find this, nor is anybody else really:\n              // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font\n              StemV: 0\n            }, _c[this.isCFF() ? 'FontFile3' : 'FontFile2'] = fontStreamRef, _c));\n            return [2 /*return*/, context.register(fontDescriptor)];\n        }\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.serializeFont = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.fontData];\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.embedFontStream = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fontStream, _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = context).flateStream;\n            return [4 /*yield*/, this.serializeFont()];\n          case 1:\n            fontStream = _b.apply(_a, [_c.sent(), {\n              Subtype: this.isCFF() ? 'CIDFontType0C' : undefined\n            }]);\n            return [2 /*return*/, context.register(fontStream)];\n        }\n      });\n    });\n  };\n  CustomFontEmbedder.prototype.embedUnicodeCmap = function (context) {\n    var cmap = createCmap(this.glyphCache.access(), this.glyphId.bind(this));\n    var cmapStream = context.flateStream(cmap);\n    return context.register(cmapStream);\n  };\n  CustomFontEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? glyph.id : -1;\n  };\n  CustomFontEmbedder.prototype.computeWidths = function () {\n    var glyphs = this.glyphCache.access();\n    var widths = [];\n    var currSection = [];\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var currGlyph = glyphs[idx];\n      var prevGlyph = glyphs[idx - 1];\n      var currGlyphId = this.glyphId(currGlyph);\n      var prevGlyphId = this.glyphId(prevGlyph);\n      if (idx === 0) {\n        widths.push(currGlyphId);\n      } else if (currGlyphId - prevGlyphId !== 1) {\n        widths.push(currSection);\n        widths.push(currGlyphId);\n        currSection = [];\n      }\n      currSection.push(currGlyph.advanceWidth * this.scale);\n    }\n    widths.push(currSection);\n    return widths;\n  };\n  return CustomFontEmbedder;\n}();\nexport default CustomFontEmbedder;","map":{"version":3,"names":["createCmap","deriveFontFlags","PDFHexString","PDFString","byAscendingId","Cache","sortedUniq","toHexStringOfMinLength","CustomFontEmbedder","font","fontData","customName","fontFeatures","_this","allGlyphsInFontSortedById","glyphs","Array","characterSet","length","idx","len","codePoint","glyphForCodePoint","sort","g","id","scale","unitsPerEm","fontName","postscriptName","baseFontName","glyphCache","populatedBy","for","fontkit","create","_a","sent","prototype","encodeText","text","layout","hexCodes","of","join","widthOfTextAtSize","size","totalWidth","advanceWidth","heightOfFontAtSize","options","descender","_b","ascent","descent","bbox","yTop","maxY","yBottom","minY","height","Math","abs","sizeOfFontAtHeight","embedIntoContext","context","ref","addRandomSuffix","embedFontDict","embedCIDFontDict","cidFontDictRef","unicodeCMapRef","embedUnicodeCmap","fontDict","obj","Type","Subtype","BaseFont","Encoding","DescendantFonts","ToUnicode","assign","register","isCFF","cff","embedFontDescriptor","fontDescriptorRef","cidFontDict","CIDToGIDMap","CIDSystemInfo","Registry","Ordering","Supplement","FontDescriptor","W","computeWidths","embedFontStream","fontStreamRef","_d","italicAngle","capHeight","xHeight","minX","maxX","fontDescriptor","_c","FontName","Flags","FontBBox","ItalicAngle","Ascent","Descent","CapHeight","XHeight","StemV","serializeFont","flateStream","fontStream","apply","undefined","cmap","access","glyphId","bind","cmapStream","glyph","widths","currSection","currGlyph","prevGlyph","currGlyphId","prevGlyphId","push"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0 - Copy (2)\\node_modules\\pdf-lib\\src\\core\\embedders\\CustomFontEmbedder.ts"],"sourcesContent":["import { Font, Fontkit, Glyph, TypeFeatures } from 'src/types/fontkit';\r\n\r\nimport { createCmap } from 'src/core/embedders/CMap';\r\nimport { deriveFontFlags } from 'src/core/embedders/FontFlags';\r\nimport PDFHexString from 'src/core/objects/PDFHexString';\r\nimport PDFRef from 'src/core/objects/PDFRef';\r\nimport PDFString from 'src/core/objects/PDFString';\r\nimport PDFContext from 'src/core/PDFContext';\r\nimport {\r\n  byAscendingId,\r\n  Cache,\r\n  sortedUniq,\r\n  toHexStringOfMinLength,\r\n} from 'src/utils';\r\n\r\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\r\n */\r\nclass CustomFontEmbedder {\r\n  static async for(\r\n    fontkit: Fontkit,\r\n    fontData: Uint8Array,\r\n    customName?: string,\r\n    fontFeatures?: TypeFeatures,\r\n  ) {\r\n    const font = await fontkit.create(fontData);\r\n    return new CustomFontEmbedder(font, fontData, customName, fontFeatures);\r\n  }\r\n\r\n  readonly font: Font;\r\n  readonly scale: number;\r\n  readonly fontData: Uint8Array;\r\n  readonly fontName: string;\r\n  readonly customName: string | undefined;\r\n  readonly fontFeatures: TypeFeatures | undefined;\r\n\r\n  protected baseFontName: string;\r\n  protected glyphCache: Cache<Glyph[]>;\r\n\r\n  protected constructor(\r\n    font: Font,\r\n    fontData: Uint8Array,\r\n    customName?: string,\r\n    fontFeatures?: TypeFeatures,\r\n  ) {\r\n    this.font = font;\r\n    this.scale = 1000 / this.font.unitsPerEm;\r\n    this.fontData = fontData;\r\n    this.fontName = this.font.postscriptName || 'Font';\r\n    this.customName = customName;\r\n    this.fontFeatures = fontFeatures;\r\n\r\n    this.baseFontName = '';\r\n    this.glyphCache = Cache.populatedBy(this.allGlyphsInFontSortedById);\r\n  }\r\n\r\n  /**\r\n   * Encode the JavaScript string into this font. (JavaScript encodes strings in\r\n   * Unicode, but embedded fonts use their own custom encodings)\r\n   */\r\n  encodeText(text: string): PDFHexString {\r\n    const { glyphs } = this.font.layout(text, this.fontFeatures);\r\n    const hexCodes = new Array(glyphs.length);\r\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\r\n      hexCodes[idx] = toHexStringOfMinLength(glyphs[idx].id, 4);\r\n    }\r\n    return PDFHexString.of(hexCodes.join(''));\r\n  }\r\n\r\n  // The advanceWidth takes into account kerning automatically, so we don't\r\n  // have to do that manually like we do for the standard fonts.\r\n  widthOfTextAtSize(text: string, size: number): number {\r\n    const { glyphs } = this.font.layout(text, this.fontFeatures);\r\n    let totalWidth = 0;\r\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\r\n      totalWidth += glyphs[idx].advanceWidth * this.scale;\r\n    }\r\n    const scale = size / 1000;\r\n    return totalWidth * scale;\r\n  }\r\n\r\n  heightOfFontAtSize(\r\n    size: number,\r\n    options: { descender?: boolean } = {},\r\n  ): number {\r\n    const { descender = true } = options;\r\n\r\n    const { ascent, descent, bbox } = this.font;\r\n    const yTop = (ascent || bbox.maxY) * this.scale;\r\n    const yBottom = (descent || bbox.minY) * this.scale;\r\n\r\n    let height = yTop - yBottom;\r\n    if (!descender) height -= Math.abs(descent) || 0;\r\n\r\n    return (height / 1000) * size;\r\n  }\r\n\r\n  sizeOfFontAtHeight(height: number): number {\r\n    const { ascent, descent, bbox } = this.font;\r\n    const yTop = (ascent || bbox.maxY) * this.scale;\r\n    const yBottom = (descent || bbox.minY) * this.scale;\r\n    return (1000 * height) / (yTop - yBottom);\r\n  }\r\n\r\n  embedIntoContext(context: PDFContext, ref?: PDFRef): Promise<PDFRef> {\r\n    this.baseFontName =\r\n      this.customName || context.addRandomSuffix(this.fontName);\r\n    return this.embedFontDict(context, ref);\r\n  }\r\n\r\n  protected async embedFontDict(\r\n    context: PDFContext,\r\n    ref?: PDFRef,\r\n  ): Promise<PDFRef> {\r\n    const cidFontDictRef = await this.embedCIDFontDict(context);\r\n    const unicodeCMapRef = this.embedUnicodeCmap(context);\r\n\r\n    const fontDict = context.obj({\r\n      Type: 'Font',\r\n      Subtype: 'Type0',\r\n      BaseFont: this.baseFontName,\r\n      Encoding: 'Identity-H',\r\n      DescendantFonts: [cidFontDictRef],\r\n      ToUnicode: unicodeCMapRef,\r\n    });\r\n\r\n    if (ref) {\r\n      context.assign(ref, fontDict);\r\n      return ref;\r\n    } else {\r\n      return context.register(fontDict);\r\n    }\r\n  }\r\n\r\n  protected isCFF(): boolean {\r\n    return this.font.cff;\r\n  }\r\n\r\n  protected async embedCIDFontDict(context: PDFContext): Promise<PDFRef> {\r\n    const fontDescriptorRef = await this.embedFontDescriptor(context);\r\n\r\n    const cidFontDict = context.obj({\r\n      Type: 'Font',\r\n      Subtype: this.isCFF() ? 'CIDFontType0' : 'CIDFontType2',\r\n      CIDToGIDMap: 'Identity',\r\n      BaseFont: this.baseFontName,\r\n      CIDSystemInfo: {\r\n        Registry: PDFString.of('Adobe'),\r\n        Ordering: PDFString.of('Identity'),\r\n        Supplement: 0,\r\n      },\r\n      FontDescriptor: fontDescriptorRef,\r\n      W: this.computeWidths(),\r\n    });\r\n\r\n    return context.register(cidFontDict);\r\n  }\r\n\r\n  protected async embedFontDescriptor(context: PDFContext): Promise<PDFRef> {\r\n    const fontStreamRef = await this.embedFontStream(context);\r\n\r\n    const { scale } = this;\r\n    const { italicAngle, ascent, descent, capHeight, xHeight } = this.font;\r\n    const { minX, minY, maxX, maxY } = this.font.bbox;\r\n\r\n    const fontDescriptor = context.obj({\r\n      Type: 'FontDescriptor',\r\n      FontName: this.baseFontName,\r\n      Flags: deriveFontFlags(this.font),\r\n      FontBBox: [minX * scale, minY * scale, maxX * scale, maxY * scale],\r\n      ItalicAngle: italicAngle,\r\n      Ascent: ascent * scale,\r\n      Descent: descent * scale,\r\n      CapHeight: (capHeight || ascent) * scale,\r\n      XHeight: (xHeight || 0) * scale,\r\n\r\n      // Not sure how to compute/find this, nor is anybody else really:\r\n      // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font\r\n      StemV: 0,\r\n\r\n      [this.isCFF() ? 'FontFile3' : 'FontFile2']: fontStreamRef,\r\n    });\r\n\r\n    return context.register(fontDescriptor);\r\n  }\r\n\r\n  protected async serializeFont(): Promise<Uint8Array> {\r\n    return this.fontData;\r\n  }\r\n\r\n  protected async embedFontStream(context: PDFContext): Promise<PDFRef> {\r\n    const fontStream = context.flateStream(await this.serializeFont(), {\r\n      Subtype: this.isCFF() ? 'CIDFontType0C' : undefined,\r\n    });\r\n    return context.register(fontStream);\r\n  }\r\n\r\n  protected embedUnicodeCmap(context: PDFContext): PDFRef {\r\n    const cmap = createCmap(this.glyphCache.access(), this.glyphId.bind(this));\r\n    const cmapStream = context.flateStream(cmap);\r\n    return context.register(cmapStream);\r\n  }\r\n\r\n  protected glyphId(glyph?: Glyph): number {\r\n    return glyph ? glyph.id : -1;\r\n  }\r\n\r\n  protected computeWidths(): (number | number[])[] {\r\n    const glyphs = this.glyphCache.access();\r\n\r\n    const widths: (number | number[])[] = [];\r\n    let currSection: number[] = [];\r\n\r\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\r\n      const currGlyph = glyphs[idx];\r\n      const prevGlyph = glyphs[idx - 1];\r\n\r\n      const currGlyphId = this.glyphId(currGlyph);\r\n      const prevGlyphId = this.glyphId(prevGlyph);\r\n\r\n      if (idx === 0) {\r\n        widths.push(currGlyphId);\r\n      } else if (currGlyphId - prevGlyphId !== 1) {\r\n        widths.push(currSection);\r\n        widths.push(currGlyphId);\r\n        currSection = [];\r\n      }\r\n\r\n      currSection.push(currGlyph.advanceWidth * this.scale);\r\n    }\r\n\r\n    widths.push(currSection);\r\n\r\n    return widths;\r\n  }\r\n\r\n  private allGlyphsInFontSortedById = (): Glyph[] => {\r\n    const glyphs: Glyph[] = new Array(this.font.characterSet.length);\r\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\r\n      const codePoint = this.font.characterSet[idx];\r\n      glyphs[idx] = this.font.glyphForCodePoint(codePoint);\r\n    }\r\n    return sortedUniq(glyphs.sort(byAscendingId), (g) => g.id);\r\n  };\r\n}\r\n\r\nexport default CustomFontEmbedder;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}