{"ast":null,"code":"import { toCharCode } from \"./strings\";\n// Mapping from PDFDocEncoding to Unicode code point\nvar pdfDocEncodingToUnicode = new Uint16Array(256);\n// Initialize the code points which are the same\nfor (var idx = 0; idx < 256; idx++) {\n  pdfDocEncodingToUnicode[idx] = idx;\n}\n// Set differences (see \"Table D.2 – PDFDocEncoding Character Set\" of the PDF spec)\npdfDocEncodingToUnicode[0x16] = toCharCode('\\u0017'); // SYNCRONOUS IDLE\npdfDocEncodingToUnicode[0x18] = toCharCode('\\u02D8'); // BREVE\npdfDocEncodingToUnicode[0x19] = toCharCode('\\u02C7'); // CARON\npdfDocEncodingToUnicode[0x1a] = toCharCode('\\u02C6'); // MODIFIER LETTER CIRCUMFLEX ACCENT\npdfDocEncodingToUnicode[0x1b] = toCharCode('\\u02D9'); // DOT ABOVE\npdfDocEncodingToUnicode[0x1c] = toCharCode('\\u02DD'); // DOUBLE ACUTE ACCENT\npdfDocEncodingToUnicode[0x1d] = toCharCode('\\u02DB'); // OGONEK\npdfDocEncodingToUnicode[0x1e] = toCharCode('\\u02DA'); // RING ABOVE\npdfDocEncodingToUnicode[0x1f] = toCharCode('\\u02DC'); // SMALL TILDE\npdfDocEncodingToUnicode[0x7f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\npdfDocEncodingToUnicode[0x80] = toCharCode('\\u2022'); // BULLET\npdfDocEncodingToUnicode[0x81] = toCharCode('\\u2020'); // DAGGER\npdfDocEncodingToUnicode[0x82] = toCharCode('\\u2021'); // DOUBLE DAGGER\npdfDocEncodingToUnicode[0x83] = toCharCode('\\u2026'); // HORIZONTAL ELLIPSIS\npdfDocEncodingToUnicode[0x84] = toCharCode('\\u2014'); // EM DASH\npdfDocEncodingToUnicode[0x85] = toCharCode('\\u2013'); // EN DASH\npdfDocEncodingToUnicode[0x86] = toCharCode('\\u0192'); // LATIN SMALL LETTER SCRIPT F\npdfDocEncodingToUnicode[0x87] = toCharCode('\\u2044'); // FRACTION SLASH (solidus)\npdfDocEncodingToUnicode[0x88] = toCharCode('\\u2039'); // SINGLE LEFT-POINTING ANGLE QUOTATION MARK\npdfDocEncodingToUnicode[0x89] = toCharCode('\\u203A'); // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\npdfDocEncodingToUnicode[0x8a] = toCharCode('\\u2212'); // MINUS SIGN\npdfDocEncodingToUnicode[0x8b] = toCharCode('\\u2030'); // PER MILLE SIGN\npdfDocEncodingToUnicode[0x8c] = toCharCode('\\u201E'); // DOUBLE LOW-9 QUOTATION MARK (quotedblbase)\npdfDocEncodingToUnicode[0x8d] = toCharCode('\\u201C'); // LEFT DOUBLE QUOTATION MARK (quotedblleft)\npdfDocEncodingToUnicode[0x8e] = toCharCode('\\u201D'); // RIGHT DOUBLE QUOTATION MARK (quotedblright)\npdfDocEncodingToUnicode[0x8f] = toCharCode('\\u2018'); // LEFT SINGLE QUOTATION MARK (quoteleft)\npdfDocEncodingToUnicode[0x90] = toCharCode('\\u2019'); // RIGHT SINGLE QUOTATION MARK (quoteright)\npdfDocEncodingToUnicode[0x91] = toCharCode('\\u201A'); // SINGLE LOW-9 QUOTATION MARK (quotesinglbase)\npdfDocEncodingToUnicode[0x92] = toCharCode('\\u2122'); // TRADE MARK SIGN\npdfDocEncodingToUnicode[0x93] = toCharCode('\\uFB01'); // LATIN SMALL LIGATURE FI\npdfDocEncodingToUnicode[0x94] = toCharCode('\\uFB02'); // LATIN SMALL LIGATURE FL\npdfDocEncodingToUnicode[0x95] = toCharCode('\\u0141'); // LATIN CAPITAL LETTER L WITH STROKE\npdfDocEncodingToUnicode[0x96] = toCharCode('\\u0152'); // LATIN CAPITAL LIGATURE OE\npdfDocEncodingToUnicode[0x97] = toCharCode('\\u0160'); // LATIN CAPITAL LETTER S WITH CARON\npdfDocEncodingToUnicode[0x98] = toCharCode('\\u0178'); // LATIN CAPITAL LETTER Y WITH DIAERESIS\npdfDocEncodingToUnicode[0x99] = toCharCode('\\u017D'); // LATIN CAPITAL LETTER Z WITH CARON\npdfDocEncodingToUnicode[0x9a] = toCharCode('\\u0131'); // LATIN SMALL LETTER DOTLESS I\npdfDocEncodingToUnicode[0x9b] = toCharCode('\\u0142'); // LATIN SMALL LETTER L WITH STROKE\npdfDocEncodingToUnicode[0x9c] = toCharCode('\\u0153'); // LATIN SMALL LIGATURE OE\npdfDocEncodingToUnicode[0x9d] = toCharCode('\\u0161'); // LATIN SMALL LETTER S WITH CARON\npdfDocEncodingToUnicode[0x9e] = toCharCode('\\u017E'); // LATIN SMALL LETTER Z WITH CARON\npdfDocEncodingToUnicode[0x9f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\npdfDocEncodingToUnicode[0xa0] = toCharCode('\\u20AC'); // EURO SIGN\npdfDocEncodingToUnicode[0xad] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n/**\n * Decode a byte array into a string using PDFDocEncoding.\n *\n * @param bytes a byte array (decimal representation) containing a string\n *              encoded with PDFDocEncoding.\n */\nexport var pdfDocEncodingDecode = function (bytes) {\n  var codePoints = new Array(bytes.length);\n  for (var idx = 0, len = bytes.length; idx < len; idx++) {\n    codePoints[idx] = pdfDocEncodingToUnicode[bytes[idx]];\n  }\n  return String.fromCodePoint.apply(String, codePoints);\n};","map":{"version":3,"names":["toCharCode","pdfDocEncodingToUnicode","Uint16Array","idx","pdfDocEncodingDecode","bytes","codePoints","Array","length","len","String","fromCodePoint","apply"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\utils\\pdfDocEncoding.ts"],"sourcesContent":["import { toCharCode } from 'src/utils/strings';\n\n// Mapping from PDFDocEncoding to Unicode code point\nconst pdfDocEncodingToUnicode = new Uint16Array(256);\n\n// Initialize the code points which are the same\nfor (let idx = 0; idx < 256; idx++) {\n  pdfDocEncodingToUnicode[idx] = idx;\n}\n\n// Set differences (see \"Table D.2 – PDFDocEncoding Character Set\" of the PDF spec)\npdfDocEncodingToUnicode[0x16] = toCharCode('\\u0017'); // SYNCRONOUS IDLE\npdfDocEncodingToUnicode[0x18] = toCharCode('\\u02D8'); // BREVE\npdfDocEncodingToUnicode[0x19] = toCharCode('\\u02C7'); // CARON\npdfDocEncodingToUnicode[0x1a] = toCharCode('\\u02C6'); // MODIFIER LETTER CIRCUMFLEX ACCENT\npdfDocEncodingToUnicode[0x1b] = toCharCode('\\u02D9'); // DOT ABOVE\npdfDocEncodingToUnicode[0x1c] = toCharCode('\\u02DD'); // DOUBLE ACUTE ACCENT\npdfDocEncodingToUnicode[0x1d] = toCharCode('\\u02DB'); // OGONEK\npdfDocEncodingToUnicode[0x1e] = toCharCode('\\u02DA'); // RING ABOVE\npdfDocEncodingToUnicode[0x1f] = toCharCode('\\u02DC'); // SMALL TILDE\npdfDocEncodingToUnicode[0x7f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\npdfDocEncodingToUnicode[0x80] = toCharCode('\\u2022'); // BULLET\npdfDocEncodingToUnicode[0x81] = toCharCode('\\u2020'); // DAGGER\npdfDocEncodingToUnicode[0x82] = toCharCode('\\u2021'); // DOUBLE DAGGER\npdfDocEncodingToUnicode[0x83] = toCharCode('\\u2026'); // HORIZONTAL ELLIPSIS\npdfDocEncodingToUnicode[0x84] = toCharCode('\\u2014'); // EM DASH\npdfDocEncodingToUnicode[0x85] = toCharCode('\\u2013'); // EN DASH\npdfDocEncodingToUnicode[0x86] = toCharCode('\\u0192'); // LATIN SMALL LETTER SCRIPT F\npdfDocEncodingToUnicode[0x87] = toCharCode('\\u2044'); // FRACTION SLASH (solidus)\npdfDocEncodingToUnicode[0x88] = toCharCode('\\u2039'); // SINGLE LEFT-POINTING ANGLE QUOTATION MARK\npdfDocEncodingToUnicode[0x89] = toCharCode('\\u203A'); // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\npdfDocEncodingToUnicode[0x8a] = toCharCode('\\u2212'); // MINUS SIGN\npdfDocEncodingToUnicode[0x8b] = toCharCode('\\u2030'); // PER MILLE SIGN\npdfDocEncodingToUnicode[0x8c] = toCharCode('\\u201E'); // DOUBLE LOW-9 QUOTATION MARK (quotedblbase)\npdfDocEncodingToUnicode[0x8d] = toCharCode('\\u201C'); // LEFT DOUBLE QUOTATION MARK (quotedblleft)\npdfDocEncodingToUnicode[0x8e] = toCharCode('\\u201D'); // RIGHT DOUBLE QUOTATION MARK (quotedblright)\npdfDocEncodingToUnicode[0x8f] = toCharCode('\\u2018'); // LEFT SINGLE QUOTATION MARK (quoteleft)\npdfDocEncodingToUnicode[0x90] = toCharCode('\\u2019'); // RIGHT SINGLE QUOTATION MARK (quoteright)\npdfDocEncodingToUnicode[0x91] = toCharCode('\\u201A'); // SINGLE LOW-9 QUOTATION MARK (quotesinglbase)\npdfDocEncodingToUnicode[0x92] = toCharCode('\\u2122'); // TRADE MARK SIGN\npdfDocEncodingToUnicode[0x93] = toCharCode('\\uFB01'); // LATIN SMALL LIGATURE FI\npdfDocEncodingToUnicode[0x94] = toCharCode('\\uFB02'); // LATIN SMALL LIGATURE FL\npdfDocEncodingToUnicode[0x95] = toCharCode('\\u0141'); // LATIN CAPITAL LETTER L WITH STROKE\npdfDocEncodingToUnicode[0x96] = toCharCode('\\u0152'); // LATIN CAPITAL LIGATURE OE\npdfDocEncodingToUnicode[0x97] = toCharCode('\\u0160'); // LATIN CAPITAL LETTER S WITH CARON\npdfDocEncodingToUnicode[0x98] = toCharCode('\\u0178'); // LATIN CAPITAL LETTER Y WITH DIAERESIS\npdfDocEncodingToUnicode[0x99] = toCharCode('\\u017D'); // LATIN CAPITAL LETTER Z WITH CARON\npdfDocEncodingToUnicode[0x9a] = toCharCode('\\u0131'); // LATIN SMALL LETTER DOTLESS I\npdfDocEncodingToUnicode[0x9b] = toCharCode('\\u0142'); // LATIN SMALL LETTER L WITH STROKE\npdfDocEncodingToUnicode[0x9c] = toCharCode('\\u0153'); // LATIN SMALL LIGATURE OE\npdfDocEncodingToUnicode[0x9d] = toCharCode('\\u0161'); // LATIN SMALL LETTER S WITH CARON\npdfDocEncodingToUnicode[0x9e] = toCharCode('\\u017E'); // LATIN SMALL LETTER Z WITH CARON\npdfDocEncodingToUnicode[0x9f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\npdfDocEncodingToUnicode[0xa0] = toCharCode('\\u20AC'); // EURO SIGN\npdfDocEncodingToUnicode[0xad] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n\n/**\n * Decode a byte array into a string using PDFDocEncoding.\n *\n * @param bytes a byte array (decimal representation) containing a string\n *              encoded with PDFDocEncoding.\n */\nexport const pdfDocEncodingDecode = (bytes: Uint8Array): string => {\n  const codePoints = new Array(bytes.length);\n  for (let idx = 0, len = bytes.length; idx < len; idx++) {\n    codePoints[idx] = pdfDocEncodingToUnicode[bytes[idx]];\n  }\n  return String.fromCodePoint(...codePoints);\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAE;AAErB;AACA,IAAMC,uBAAuB,GAAG,IAAIC,WAAW,CAAC,GAAG,CAAC;AAEpD;AACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,GAAG,EAAEA,GAAG,EAAE,EAAE;EAClCF,uBAAuB,CAACE,GAAG,CAAC,GAAGA,GAAG;;AAGpC;AACAF,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtDC,uBAAuB,CAAC,IAAI,CAAC,GAAGD,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;AAEtD;;;;;;AAMA,OAAO,IAAMI,oBAAoB,GAAG,SAAAA,CAACC,KAAiB;EACpD,IAAMC,UAAU,GAAG,IAAIC,KAAK,CAACF,KAAK,CAACG,MAAM,CAAC;EAC1C,KAAK,IAAIL,GAAG,GAAG,CAAC,EAAEM,GAAG,GAAGJ,KAAK,CAACG,MAAM,EAAEL,GAAG,GAAGM,GAAG,EAAEN,GAAG,EAAE,EAAE;IACtDG,UAAU,CAACH,GAAG,CAAC,GAAGF,uBAAuB,CAACI,KAAK,CAACF,GAAG,CAAC,CAAC;;EAEvD,OAAOO,MAAM,CAACC,aAAa,CAAAC,KAAA,CAApBF,MAAM,EAAkBJ,UAAU;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}