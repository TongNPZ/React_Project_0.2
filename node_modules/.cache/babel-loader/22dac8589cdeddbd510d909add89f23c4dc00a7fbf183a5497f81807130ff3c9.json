{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFString from \"../objects/PDFString\";\nimport PDFHexString from \"../objects/PDFHexString\";\n/**\r\n * From the PDF-A3 specification, section **3.1. Requirements - General**.\r\n * See:\r\n * * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\r\n */\nexport var AFRelationship;\n(function (AFRelationship) {\n  AFRelationship[\"Source\"] = \"Source\";\n  AFRelationship[\"Data\"] = \"Data\";\n  AFRelationship[\"Alternative\"] = \"Alternative\";\n  AFRelationship[\"Supplement\"] = \"Supplement\";\n  AFRelationship[\"EncryptedPayload\"] = \"EncryptedPayload\";\n  AFRelationship[\"FormData\"] = \"EncryptedPayload\";\n  AFRelationship[\"Schema\"] = \"Schema\";\n  AFRelationship[\"Unspecified\"] = \"Unspecified\";\n})(AFRelationship || (AFRelationship = {}));\nvar FileEmbedder = /** @class */function () {\n  function FileEmbedder(fileData, fileName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.fileData = fileData;\n    this.fileName = fileName;\n    this.options = options;\n  }\n  FileEmbedder.for = function (bytes, fileName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return new FileEmbedder(bytes, fileName, options);\n  };\n  FileEmbedder.prototype.embedIntoContext = function (context, ref) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, mimeType, description, creationDate, modificationDate, afRelationship, embeddedFileStream, embeddedFileStreamRef, fileSpecDict;\n      return __generator(this, function (_b) {\n        _a = this.options, mimeType = _a.mimeType, description = _a.description, creationDate = _a.creationDate, modificationDate = _a.modificationDate, afRelationship = _a.afRelationship;\n        embeddedFileStream = context.flateStream(this.fileData, {\n          Type: 'EmbeddedFile',\n          Subtype: mimeType !== null && mimeType !== void 0 ? mimeType : undefined,\n          Params: {\n            Size: this.fileData.length,\n            CreationDate: creationDate ? PDFString.fromDate(creationDate) : undefined,\n            ModDate: modificationDate ? PDFString.fromDate(modificationDate) : undefined\n          }\n        });\n        embeddedFileStreamRef = context.register(embeddedFileStream);\n        fileSpecDict = context.obj({\n          Type: 'Filespec',\n          F: PDFString.of(this.fileName),\n          UF: PDFHexString.fromText(this.fileName),\n          EF: {\n            F: embeddedFileStreamRef\n          },\n          Desc: description ? PDFHexString.fromText(description) : undefined,\n          AFRelationship: afRelationship !== null && afRelationship !== void 0 ? afRelationship : undefined\n        });\n        if (ref) {\n          context.assign(ref, fileSpecDict);\n          return [2 /*return*/, ref];\n        } else {\n          return [2 /*return*/, context.register(fileSpecDict)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  return FileEmbedder;\n}();\nexport default FileEmbedder;","map":{"version":3,"names":["PDFString","PDFHexString","AFRelationship","FileEmbedder","fileData","fileName","options","for","bytes","prototype","embedIntoContext","context","ref","_a","mimeType","description","creationDate","modificationDate","afRelationship","embeddedFileStream","flateStream","Type","Subtype","undefined","Params","Size","length","CreationDate","fromDate","ModDate","embeddedFileStreamRef","register","fileSpecDict","obj","F","of","UF","fromText","EF","Desc","assign"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\core\\embedders\\FileEmbedder.ts"],"sourcesContent":["import PDFString from 'src/core/objects/PDFString';\r\nimport PDFHexString from 'src/core/objects/PDFHexString';\r\nimport PDFContext from 'src/core/PDFContext';\r\nimport PDFRef from 'src/core/objects/PDFRef';\r\n\r\n/**\r\n * From the PDF-A3 specification, section **3.1. Requirements - General**.\r\n * See:\r\n * * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\r\n */\r\nexport enum AFRelationship {\r\n  Source = 'Source',\r\n  Data = 'Data',\r\n  Alternative = 'Alternative',\r\n  Supplement = 'Supplement',\r\n  EncryptedPayload = 'EncryptedPayload',\r\n  FormData = 'EncryptedPayload',\r\n  Schema = 'Schema',\r\n  Unspecified = 'Unspecified',\r\n}\r\n\r\nexport interface EmbeddedFileOptions {\r\n  mimeType?: string;\r\n  description?: string;\r\n  creationDate?: Date;\r\n  modificationDate?: Date;\r\n  afRelationship?: AFRelationship;\r\n}\r\n\r\nclass FileEmbedder {\r\n  static for(\r\n    bytes: Uint8Array,\r\n    fileName: string,\r\n    options: EmbeddedFileOptions = {},\r\n  ) {\r\n    return new FileEmbedder(bytes, fileName, options);\r\n  }\r\n\r\n  private readonly fileData: Uint8Array;\r\n  readonly fileName: string;\r\n  readonly options: EmbeddedFileOptions;\r\n\r\n  private constructor(\r\n    fileData: Uint8Array,\r\n    fileName: string,\r\n    options: EmbeddedFileOptions = {},\r\n  ) {\r\n    this.fileData = fileData;\r\n    this.fileName = fileName;\r\n    this.options = options;\r\n  }\r\n\r\n  async embedIntoContext(context: PDFContext, ref?: PDFRef): Promise<PDFRef> {\r\n    const {\r\n      mimeType,\r\n      description,\r\n      creationDate,\r\n      modificationDate,\r\n      afRelationship,\r\n    } = this.options;\r\n\r\n    const embeddedFileStream = context.flateStream(this.fileData, {\r\n      Type: 'EmbeddedFile',\r\n      Subtype: mimeType ?? undefined,\r\n      Params: {\r\n        Size: this.fileData.length,\r\n        CreationDate: creationDate\r\n          ? PDFString.fromDate(creationDate)\r\n          : undefined,\r\n        ModDate: modificationDate\r\n          ? PDFString.fromDate(modificationDate)\r\n          : undefined,\r\n      },\r\n    });\r\n    const embeddedFileStreamRef = context.register(embeddedFileStream);\r\n\r\n    const fileSpecDict = context.obj({\r\n      Type: 'Filespec',\r\n      F: PDFString.of(this.fileName), // TODO: Assert that this is plain ASCII\r\n      UF: PDFHexString.fromText(this.fileName),\r\n      EF: { F: embeddedFileStreamRef },\r\n      Desc: description ? PDFHexString.fromText(description) : undefined,\r\n      AFRelationship: afRelationship ?? undefined,\r\n    });\r\n\r\n    if (ref) {\r\n      context.assign(ref, fileSpecDict);\r\n      return ref;\r\n    } else {\r\n      return context.register(fileSpecDict);\r\n    }\r\n  }\r\n}\r\n\r\nexport default FileEmbedder;\r\n"],"mappings":";AAAA,OAAOA,SAAS;AAChB,OAAOC,YAAY;AAInB;;;;;AAKA,WAAYC,cASX;AATD,WAAYA,cAAc;EACxBA,cAAA,qBAAiB;EACjBA,cAAA,iBAAa;EACbA,cAAA,+BAA2B;EAC3BA,cAAA,6BAAyB;EACzBA,cAAA,yCAAqC;EACrCA,cAAA,iCAA6B;EAC7BA,cAAA,qBAAiB;EACjBA,cAAA,+BAA2B;AAC7B,CAAC,EATWA,cAAc,KAAdA,cAAc;AAmB1B,IAAAC,YAAA;EAaE,SAAAA,aACEC,QAAoB,EACpBC,QAAgB,EAChBC,OAAiC;IAAjC,IAAAA,OAAA;MAAAA,OAAA,KAAiC;IAAA;IAEjC,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;EApBOH,YAAA,CAAAI,GAAG,GAAV,UACEC,KAAiB,EACjBH,QAAgB,EAChBC,OAAiC;IAAjC,IAAAA,OAAA;MAAAA,OAAA,KAAiC;IAAA;IAEjC,OAAO,IAAIH,YAAY,CAACK,KAAK,EAAEH,QAAQ,EAAEC,OAAO,CAAC;EACnD,CAAC;EAgBKH,YAAA,CAAAM,SAAA,CAAAC,gBAAgB,GAAtB,UAAuBC,OAAmB,EAAEC,GAAY;;;;QAChDC,EAAA,GAMF,IAAI,CAACP,OAAO,EALdQ,QAAQ,GAAAD,EAAA,CAAAC,QAAA,EACRC,WAAW,GAAAF,EAAA,CAAAE,WAAA,EACXC,YAAY,GAAAH,EAAA,CAAAG,YAAA,EACZC,gBAAgB,GAAAJ,EAAA,CAAAI,gBAAA,EAChBC,cAAc,GAAAL,EAAA,CAAAK,cAAA;QAGVC,kBAAkB,GAAGR,OAAO,CAACS,WAAW,CAAC,IAAI,CAAChB,QAAQ,EAAE;UAC5DiB,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAER,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAIS,SAAS;UAC9BC,MAAM,EAAE;YACNC,IAAI,EAAE,IAAI,CAACrB,QAAQ,CAACsB,MAAM;YAC1BC,YAAY,EAAEX,YAAY,GACtBhB,SAAS,CAAC4B,QAAQ,CAACZ,YAAY,CAAC,GAChCO,SAAS;YACbM,OAAO,EAAEZ,gBAAgB,GACrBjB,SAAS,CAAC4B,QAAQ,CAACX,gBAAgB,CAAC,GACpCM;;SAEP,CAAC;QACIO,qBAAqB,GAAGnB,OAAO,CAACoB,QAAQ,CAACZ,kBAAkB,CAAC;QAE5Da,YAAY,GAAGrB,OAAO,CAACsB,GAAG,CAAC;UAC/BZ,IAAI,EAAE,UAAU;UAChBa,CAAC,EAAElC,SAAS,CAACmC,EAAE,CAAC,IAAI,CAAC9B,QAAQ,CAAC;UAC9B+B,EAAE,EAAEnC,YAAY,CAACoC,QAAQ,CAAC,IAAI,CAAChC,QAAQ,CAAC;UACxCiC,EAAE,EAAE;YAAEJ,CAAC,EAAEJ;UAAqB,CAAE;UAChCS,IAAI,EAAExB,WAAW,GAAGd,YAAY,CAACoC,QAAQ,CAACtB,WAAW,CAAC,GAAGQ,SAAS;UAClErB,cAAc,EAAEgB,cAAc,aAAdA,cAAc,cAAdA,cAAc,GAAIK;SACnC,CAAC;QAEF,IAAIX,GAAG,EAAE;UACPD,OAAO,CAAC6B,MAAM,CAAC5B,GAAG,EAAEoB,YAAY,CAAC;UACjC,sBAAOpB,GAAG;SACX,MAAM;UACL,sBAAOD,OAAO,CAACoB,QAAQ,CAACC,YAAY,CAAC;;;;;GAExC;;EACH,OAAA7B,YAAC;AAAD,CAAC,CA/DD;AAiEA,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}