{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport CustomFontEmbedder from \"./CustomFontEmbedder\";\nimport PDFHexString from \"../objects/PDFHexString\";\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from \"../../utils\";\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\r\n */\nvar CustomFontSubsetEmbedder = /** @class */function (_super) {\n  __extends(CustomFontSubsetEmbedder, _super);\n  function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n    var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n    _this.subset = _this.font.createSubset();\n    _this.glyphs = [];\n    _this.glyphCache = Cache.populatedBy(function () {\n      return _this.glyphs;\n    });\n    _this.glyphIdMap = new Map();\n    return _this;\n  }\n  CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n    return __awaiter(this, void 0, void 0, function () {\n      var font;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, fontkit.create(fontData)];\n          case 1:\n            font = _a.sent();\n            return [2 /*return*/, new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n        }\n      });\n    });\n  };\n  CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n    var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n    var hexCodes = new Array(glyphs.length);\n    for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n      var glyph = glyphs[idx];\n      var subsetGlyphId = this.subset.includeGlyph(glyph);\n      this.glyphs[subsetGlyphId - 1] = glyph;\n      this.glyphIdMap.set(glyph.id, subsetGlyphId);\n      hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n    }\n    this.glyphCache.invalidate();\n    return PDFHexString.of(hexCodes.join(''));\n  };\n  CustomFontSubsetEmbedder.prototype.isCFF = function () {\n    return this.subset.cff;\n  };\n  CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n    return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n  };\n  CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var parts = [];\n      _this.subset.encodeStream().on('data', function (bytes) {\n        return parts.push(bytes);\n      }).on('end', function () {\n        return resolve(mergeUint8Arrays(parts));\n      }).on('error', function (err) {\n        return reject(err);\n      });\n    });\n  };\n  return CustomFontSubsetEmbedder;\n}(CustomFontEmbedder);\nexport default CustomFontSubsetEmbedder;","map":{"version":3,"names":["CustomFontEmbedder","PDFHexString","Cache","mergeUint8Arrays","toHexStringOfMinLength","CustomFontSubsetEmbedder","_super","__extends","font","fontData","customFontName","fontFeatures","_this","call","subset","createSubset","glyphs","glyphCache","populatedBy","glyphIdMap","Map","for","fontkit","create","_a","sent","prototype","encodeText","text","layout","hexCodes","Array","length","idx","len","glyph","subsetGlyphId","includeGlyph","set","id","invalidate","of","join","isCFF","cff","glyphId","get","serializeFont","Promise","resolve","reject","parts","encodeStream","on","bytes","push","err"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0 - Copy (2)\\node_modules\\pdf-lib\\src\\core\\embedders\\CustomFontSubsetEmbedder.ts"],"sourcesContent":["import { Font, Fontkit, Glyph, Subset, TypeFeatures } from 'src/types/fontkit';\r\n\r\nimport CustomFontEmbedder from 'src/core/embedders/CustomFontEmbedder';\r\nimport PDFHexString from 'src/core/objects/PDFHexString';\r\nimport { Cache, mergeUint8Arrays, toHexStringOfMinLength } from 'src/utils';\r\n\r\n/**\r\n * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\r\n * this class borrows from:\r\n *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\r\n */\r\nclass CustomFontSubsetEmbedder extends CustomFontEmbedder {\r\n  static async for(\r\n    fontkit: Fontkit,\r\n    fontData: Uint8Array,\r\n    customFontName?: string,\r\n    fontFeatures?: TypeFeatures,\r\n  ) {\r\n    const font = await fontkit.create(fontData);\r\n    return new CustomFontSubsetEmbedder(\r\n      font,\r\n      fontData,\r\n      customFontName,\r\n      fontFeatures,\r\n    );\r\n  }\r\n\r\n  private readonly subset: Subset;\r\n  private readonly glyphs: Glyph[];\r\n  private readonly glyphIdMap: Map<number, number>;\r\n\r\n  private constructor(\r\n    font: Font,\r\n    fontData: Uint8Array,\r\n    customFontName?: string,\r\n    fontFeatures?: TypeFeatures,\r\n  ) {\r\n    super(font, fontData, customFontName, fontFeatures);\r\n\r\n    this.subset = this.font.createSubset();\r\n    this.glyphs = [];\r\n    this.glyphCache = Cache.populatedBy(() => this.glyphs);\r\n    this.glyphIdMap = new Map();\r\n  }\r\n\r\n  encodeText(text: string): PDFHexString {\r\n    const { glyphs } = this.font.layout(text, this.fontFeatures);\r\n    const hexCodes = new Array(glyphs.length);\r\n\r\n    for (let idx = 0, len = glyphs.length; idx < len; idx++) {\r\n      const glyph = glyphs[idx];\r\n      const subsetGlyphId = this.subset.includeGlyph(glyph);\r\n\r\n      this.glyphs[subsetGlyphId - 1] = glyph;\r\n      this.glyphIdMap.set(glyph.id, subsetGlyphId);\r\n\r\n      hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\r\n    }\r\n\r\n    this.glyphCache.invalidate();\r\n    return PDFHexString.of(hexCodes.join(''));\r\n  }\r\n\r\n  protected isCFF(): boolean {\r\n    return (this.subset as any).cff;\r\n  }\r\n\r\n  protected glyphId(glyph?: Glyph): number {\r\n    return glyph ? this.glyphIdMap.get(glyph.id)! : -1;\r\n  }\r\n\r\n  protected serializeFont(): Promise<Uint8Array> {\r\n    return new Promise((resolve, reject) => {\r\n      const parts: Uint8Array[] = [];\r\n      this.subset\r\n        .encodeStream()\r\n        .on('data', (bytes) => parts.push(bytes))\r\n        .on('end', () => resolve(mergeUint8Arrays(parts)))\r\n        .on('error' as any, (err) => reject(err));\r\n    });\r\n  }\r\n}\r\n\r\nexport default CustomFontSubsetEmbedder;\r\n"],"mappings":";AAEA,OAAOA,kBAAkB;AACzB,OAAOC,YAAY;AACnB,SAASC,KAAK,EAAEC,gBAAgB,EAAEC,sBAAsB,QAAE;AAE1D;;;;;AAKA,IAAAC,wBAAA,0BAAAC,MAAA;EAAuCC,SAAA,CAAAF,wBAAA,EAAAC,MAAA;EAoBrC,SAAAD,yBACEG,IAAU,EACVC,QAAoB,EACpBC,cAAuB,EACvBC,YAA2B;IAJ7B,IAAAC,KAAA,GAMEN,MAAA,CAAAO,IAAA,OAAML,IAAI,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,YAAY,CAAC;IAEnDC,KAAI,CAACE,MAAM,GAAGF,KAAI,CAACJ,IAAI,CAACO,YAAY,EAAE;IACtCH,KAAI,CAACI,MAAM,GAAG,EAAE;IAChBJ,KAAI,CAACK,UAAU,GAAGf,KAAK,CAACgB,WAAW,CAAC;MAAM,OAAAN,KAAI,CAACI,MAAM;IAAX,CAAW,CAAC;IACtDJ,KAAI,CAACO,UAAU,GAAG,IAAIC,GAAG,EAAE;;EAC7B;EA/Baf,wBAAA,CAAAgB,GAAG,GAAhB,UACEC,OAAgB,EAChBb,QAAoB,EACpBC,cAAuB,EACvBC,YAA2B;;;;;;YAEd,qBAAMW,OAAO,CAACC,MAAM,CAACd,QAAQ,CAAC;;YAArCD,IAAI,GAAGgB,EAAA,CAAAC,IAAA,EAA8B;YAC3C,sBAAO,IAAIpB,wBAAwB,CACjCG,IAAI,EACJC,QAAQ,EACRC,cAAc,EACdC,YAAY,CACb;;;;GACF;EAoBDN,wBAAA,CAAAqB,SAAA,CAAAC,UAAU,GAAV,UAAWC,IAAY;IACb,IAAAZ,MAAM,GAAK,IAAI,CAACR,IAAI,CAACqB,MAAM,CAACD,IAAI,EAAE,IAAI,CAACjB,YAAY,CAAC,CAAAK,MAA9C;IACd,IAAMc,QAAQ,GAAG,IAAIC,KAAK,CAACf,MAAM,CAACgB,MAAM,CAAC;IAEzC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGlB,MAAM,CAACgB,MAAM,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACvD,IAAME,KAAK,GAAGnB,MAAM,CAACiB,GAAG,CAAC;MACzB,IAAMG,aAAa,GAAG,IAAI,CAACtB,MAAM,CAACuB,YAAY,CAACF,KAAK,CAAC;MAErD,IAAI,CAACnB,MAAM,CAACoB,aAAa,GAAG,CAAC,CAAC,GAAGD,KAAK;MACtC,IAAI,CAAChB,UAAU,CAACmB,GAAG,CAACH,KAAK,CAACI,EAAE,EAAEH,aAAa,CAAC;MAE5CN,QAAQ,CAACG,GAAG,CAAC,GAAG7B,sBAAsB,CAACgC,aAAa,EAAE,CAAC,CAAC;;IAG1D,IAAI,CAACnB,UAAU,CAACuB,UAAU,EAAE;IAC5B,OAAOvC,YAAY,CAACwC,EAAE,CAACX,QAAQ,CAACY,IAAI,CAAC,EAAE,CAAC,CAAC;EAC3C,CAAC;EAESrC,wBAAA,CAAAqB,SAAA,CAAAiB,KAAK,GAAf;IACE,OAAQ,IAAI,CAAC7B,MAAc,CAAC8B,GAAG;EACjC,CAAC;EAESvC,wBAAA,CAAAqB,SAAA,CAAAmB,OAAO,GAAjB,UAAkBV,KAAa;IAC7B,OAAOA,KAAK,GAAG,IAAI,CAAChB,UAAU,CAAC2B,GAAG,CAACX,KAAK,CAACI,EAAE,CAAE,GAAG,CAAC,CAAC;EACpD,CAAC;EAESlC,wBAAA,CAAAqB,SAAA,CAAAqB,aAAa,GAAvB;IAAA,IAAAnC,KAAA;IACE,OAAO,IAAIoC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;MACjC,IAAMC,KAAK,GAAiB,EAAE;MAC9BvC,KAAI,CAACE,MAAM,CACRsC,YAAY,EAAE,CACdC,EAAE,CAAC,MAAM,EAAE,UAACC,KAAK;QAAK,OAAAH,KAAK,CAACI,IAAI,CAACD,KAAK,CAAC;MAAjB,CAAiB,CAAC,CACxCD,EAAE,CAAC,KAAK,EAAE;QAAM,OAAAJ,OAAO,CAAC9C,gBAAgB,CAACgD,KAAK,CAAC,CAAC;MAAhC,CAAgC,CAAC,CACjDE,EAAE,CAAC,OAAc,EAAE,UAACG,GAAG;QAAK,OAAAN,MAAM,CAACM,GAAG,CAAC;MAAX,CAAW,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC;EACH,OAAAnD,wBAAC;AAAD,CAAC,CAtEsCL,kBAAkB;AAwEzD,eAAeK,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}