{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultRadioGroupAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { PDFName, PDFHexString, PDFDict, PDFAcroRadioButton, AcroButtonFlags } from \"../../core\";\nimport { assertIs, assertOrUndefined, assertIsOneOf } from \"../../utils\";\n/**\r\n * Represents a radio group field of a [[PDFForm]].\r\n *\r\n * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\r\n * radio group is to enable users to select one option from a set of mutually\r\n * exclusive choices. Each choice in a radio group is represented by a radio\r\n * button. Radio buttons each have two states: `on` and `off`. At most one\r\n * radio button in a group may be in the `on` state at any time. Users can\r\n * click on a radio button to select it (and thereby automatically deselect any\r\n * other radio button that might have already been selected). Some radio\r\n * groups allow users to toggle a selected radio button `off` by clicking on\r\n * it (see [[PDFRadioGroup.isOffToggleable]]).\r\n *\r\n * Note that some radio groups allow multiple radio buttons to be in the `on`\r\n * state at the same type **if** they represent the same underlying value (see\r\n * [[PDFRadioGroup.isMutuallyExclusive]]).\r\n */\nvar PDFRadioGroup = /** @class */function (_super) {\n  __extends(PDFRadioGroup, _super);\n  function PDFRadioGroup(acroRadioButton, ref, doc) {\n    var _this = _super.call(this, acroRadioButton, ref, doc) || this;\n    assertIs(acroRadioButton, 'acroRadioButton', [[PDFAcroRadioButton, 'PDFAcroRadioButton']]);\n    _this.acroField = acroRadioButton;\n    return _this;\n  }\n  /**\r\n   * Get the list of available options for this radio group. Each option is\r\n   * represented by a radio button. These radio buttons are displayed at\r\n   * various locations in the document, potentially on different pages (though\r\n   * typically they are stacked horizontally or vertically on the same page).\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * const options = radioGroup.getOptions()\r\n   * console.log('Radio Group options:', options)\r\n   * ```\r\n   * @returns The options for this radio group.\r\n   */\n  PDFRadioGroup.prototype.getOptions = function () {\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      var exportOptions = new Array(exportValues.length);\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        exportOptions[idx] = exportValues[idx].decodeText();\n      }\n      return exportOptions;\n    }\n    var onValues = this.acroField.getOnValues();\n    var onOptions = new Array(onValues.length);\n    for (var idx = 0, len = onOptions.length; idx < len; idx++) {\n      onOptions[idx] = onValues[idx].decodeText();\n    }\n    return onOptions;\n  };\n  /**\r\n   * Get the selected option for this radio group. The selected option is\r\n   * represented by the radio button in this group that is turned on. At most\r\n   * one radio button in a group can be selected. If no buttons in this group\r\n   * are selected, `undefined` is returned.\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * const selected = radioGroup.getSelected()\r\n   * console.log('Selected radio button:', selected)\r\n   * ```\r\n   * @returns The selected option for this radio group.\r\n   */\n  PDFRadioGroup.prototype.getSelected = function () {\n    var value = this.acroField.getValue();\n    if (value === PDFName.of('Off')) return undefined;\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      var onValues = this.acroField.getOnValues();\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        if (onValues[idx] === value) return exportValues[idx].decodeText();\n      }\n    }\n    return value.decodeText();\n  };\n  // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\n  // //       aren't removing the widget reference from the page's Annots?\n  // removeOption(option: string) {\n  //   assertIs(option, 'option', ['string']);\n  //   // TODO: Assert is valid `option`!\n  //   const onValues = this.acroField.getOnValues();\n  //   const exportValues = this.acroField.getExportValues();\n  //   if (exportValues) {\n  //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\n  //       if (exportValues[idx].decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   } else {\n  //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\n  //       const value = onValues[idx];\n  //       if (value.decodeText() === option) {\n  //         this.acroField.removeWidget(idx);\n  //         this.acroField.removeExportValue(idx);\n  //       }\n  //     }\n  //   }\n  // }\n  /**\r\n   * Select an option for this radio group. This operation is analogous to a\r\n   * human user clicking one of the radio buttons in this group via a PDF\r\n   * reader to toggle it on. This method will update the underlying state of\r\n   * the radio group to indicate which option has been selected. PDF libraries\r\n   * and readers will be able to extract this value from the saved document and\r\n   * determine which option was selected.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\r\n   * radioGroup.select('One Punch Man')\r\n   * ```\r\n   *\r\n   * This method will mark this radio group as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\r\n   * streams will display a dot inside the widget of this check box field\r\n   * that represents the selected option.\r\n   *\r\n   * @param option The option to be selected.\r\n   */\n  PDFRadioGroup.prototype.select = function (option) {\n    assertIs(option, 'option', ['string']);\n    var validOptions = this.getOptions();\n    assertIsOneOf(option, 'option', validOptions);\n    this.markAsDirty();\n    var onValues = this.acroField.getOnValues();\n    var exportValues = this.acroField.getExportValues();\n    if (exportValues) {\n      for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n        if (exportValues[idx].decodeText() === option) {\n          this.acroField.setValue(onValues[idx]);\n        }\n      }\n    } else {\n      for (var idx = 0, len = onValues.length; idx < len; idx++) {\n        var value = onValues[idx];\n        if (value.decodeText() === option) this.acroField.setValue(value);\n      }\n    }\n  };\n  /**\r\n   * Clear any selected option for this dropdown. This will result in all\r\n   * radio buttons in this group being toggled off. This method will update\r\n   * the underlying state of the dropdown to indicate that no radio buttons\r\n   * have been selected.\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.clear()\r\n   * ```\r\n   * This method will mark this radio group as dirty. See\r\n   * [[PDFRadioGroup.select]] for more details about what this means.\r\n   */\n  PDFRadioGroup.prototype.clear = function () {\n    this.markAsDirty();\n    this.acroField.setValue(PDFName.of('Off'));\n  };\n  /**\r\n   * Returns `true` if users can click on radio buttons in this group to toggle\r\n   * them off. The alternative is that once a user clicks on a radio button\r\n   * to select it, the only way to deselect it is by selecting on another radio\r\n   * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\r\n   * [[PDFRadioGroup.disableOffToggling]]. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\r\n   * ```\r\n   */\n  PDFRadioGroup.prototype.isOffToggleable = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.NoToggleToOff);\n  };\n  /**\r\n   * Allow users to click on selected radio buttons in this group to toggle\r\n   * them off. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.enableOffToggling()\r\n   * ```\r\n   * > **NOTE:** This feature is documented in the PDF specification\r\n   * > (Table 226). However, most PDF readers do not respect this option and\r\n   * > prevent users from toggling radio buttons off even when it is enabled.\r\n   * > At the time of this writing (9/6/2020) Mac's Preview software did\r\n   * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\r\n   * > not.\r\n   */\n  PDFRadioGroup.prototype.enableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, false);\n  };\n  /**\r\n   * Prevent users from clicking on selected radio buttons in this group to\r\n   * toggle them off. Clicking on a selected radio button will have no effect.\r\n   * The only way to deselect a selected radio button is to click on a\r\n   * different radio button in the group. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.disableOffToggling()\r\n   * ```\r\n   */\n  PDFRadioGroup.prototype.disableOffToggling = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, true);\n  };\n  /**\r\n   * Returns `true` if the radio buttons in this group are mutually exclusive.\r\n   * This means that when the user selects a radio button, only that specific\r\n   * button will be turned on. Even if other radio buttons in the group\r\n   * represent the same value, they will not be enabled. The alternative to\r\n   * this is that clicking a radio button will select that button along with\r\n   * any other radio buttons in the group that share the same value. See\r\n   * [[PDFRadioGroup.enableMutualExclusion]] and\r\n   * [[PDFRadioGroup.disableMutualExclusion]].\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\r\n   * ```\r\n   */\n  PDFRadioGroup.prototype.isMutuallyExclusive = function () {\n    return !this.acroField.hasFlag(AcroButtonFlags.RadiosInUnison);\n  };\n  /**\r\n   * When the user clicks a radio button in this group it will be selected. In\r\n   * addition, any other radio buttons in this group that share the same\r\n   * underlying value will also be selected. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.enableMutualExclusion()\r\n   * ```\r\n   * Note that this option must be enabled prior to adding options to the\r\n   * radio group. It does not currently apply retroactively to existing\r\n   * radio buttons in the group.\r\n   */\n  PDFRadioGroup.prototype.enableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, false);\n  };\n  /**\r\n   * When the user clicks a radio button in this group only it will be selected.\r\n   * No other radio buttons in the group will be selected, even if they share\r\n   * the same underlying value. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.disableMutualExclusion()\r\n   * ```\r\n   * Note that this option must be disabled prior to adding options to the\r\n   * radio group. It does not currently apply retroactively to existing\r\n   * radio buttons in the group.\r\n   */\n  PDFRadioGroup.prototype.disableMutualExclusion = function () {\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, true);\n  };\n  /**\r\n   * Add a new radio button to this group on the specified page. For example:\r\n   * ```js\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const radioGroup = form.createRadioGroup('best.gundam')\r\n   *\r\n   * const options = {\r\n   *   x: 50,\r\n   *   width: 25,\r\n   *   height: 25,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   * }\r\n   *\r\n   * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\r\n   * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\r\n   * ```\r\n   * This will create a new radio button widget for this radio group field.\r\n   * @param option The option that the radio button widget represents.\r\n   * @param page The page to which the radio button widget should be added.\r\n   * @param options The options to be used when adding the radio button widget.\r\n   */\n  PDFRadioGroup.prototype.addOptionToPage = function (option, page, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    assertIs(option, 'option', ['string']);\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    // Create a widget for this radio button\n    var widget = this.createWidget({\n      x: (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options === null || options === void 0 ? void 0 : options.width) !== null && _c !== void 0 ? _c : 50,\n      height: (_d = options === null || options === void 0 ? void 0 : options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: (_e = options === null || options === void 0 ? void 0 : options.textColor) !== null && _e !== void 0 ? _e : rgb(0, 0, 0),\n      backgroundColor: (_f = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _f !== void 0 ? _f : rgb(1, 1, 1),\n      borderColor: (_g = options === null || options === void 0 ? void 0 : options.borderColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n      borderWidth: (_h = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _h !== void 0 ? _h : 1,\n      rotate: (_j = options === null || options === void 0 ? void 0 : options.rotate) !== null && _j !== void 0 ? _j : degrees(0),\n      hidden: options === null || options === void 0 ? void 0 : options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    var apStateValue = this.acroField.addWidgetWithOpt(widgetRef, PDFHexString.fromText(option), !this.isMutuallyExclusive());\n    // Set appearance streams for widget\n    widget.setAppearanceState(PDFName.of('Off'));\n    this.updateWidgetAppearance(widget, apStateValue);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\r\n   * Returns `true` if any of this group's radio button widgets do not have an\r\n   * appearance stream for their current state. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this radio group needs an appearance update.\r\n   */\n  PDFRadioGroup.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var state = widget.getAppearanceState();\n      var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n      if (!(normal instanceof PDFDict)) return true;\n      if (state && !normal.has(state)) return true;\n    }\n    return false;\n  };\n  /**\r\n   * Update the appearance streams for each of this group's radio button widgets\r\n   * using the default appearance provider for radio groups. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.defaultUpdateAppearances()\r\n   * ```\r\n   */\n  PDFRadioGroup.prototype.defaultUpdateAppearances = function () {\n    this.updateAppearances();\n  };\n  // rg.updateAppearances((field: any, widget: any) => {\n  //   assert(field === rg);\n  //   assert(widget instanceof PDFWidgetAnnotation);\n  //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\n  // });\n  /**\r\n   * Update the appearance streams for each of this group's radio button widgets\r\n   * using the given appearance provider. If no `provider` is passed, the\r\n   * default appearance provider for radio groups will be used. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.updateAppearances((field, widget) => {\r\n   *   ...\r\n   *   return {\r\n   *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n   *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n   *   }\r\n   * })\r\n   * ```\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\n  PDFRadioGroup.prototype.updateAppearances = function (provider) {\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var onValue = widget.getOnValue();\n      if (!onValue) continue;\n      this.updateWidgetAppearance(widget, onValue, provider);\n    }\n  };\n  PDFRadioGroup.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultRadioGroupAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget));\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getOptionList]] method, which will create an\r\n   * > instance of [[PDFOptionList]] for you.\r\n   *\r\n   * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\r\n   * and ref\r\n   *\r\n   * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\r\n   *                        radio group.\r\n   * @param ref The unique reference for this radio group.\r\n   * @param doc The document to which this radio group will belong.\r\n   */\n  PDFRadioGroup.of = function (acroRadioButton, ref, doc) {\n    return new PDFRadioGroup(acroRadioButton, ref, doc);\n  };\n  return PDFRadioGroup;\n}(PDFField);\nexport default PDFRadioGroup;","map":{"version":3,"names":["PDFPage","PDFField","assertFieldAppearanceOptions","normalizeAppearance","defaultRadioGroupAppearanceProvider","rgb","degrees","PDFName","PDFHexString","PDFDict","PDFAcroRadioButton","AcroButtonFlags","assertIs","assertOrUndefined","assertIsOneOf","PDFRadioGroup","_super","__extends","acroRadioButton","ref","doc","_this","call","acroField","prototype","getOptions","exportValues","getExportValues","exportOptions","Array","length","idx","len","decodeText","onValues","getOnValues","onOptions","getSelected","value","getValue","of","undefined","select","option","validOptions","markAsDirty","setValue","clear","isOffToggleable","hasFlag","NoToggleToOff","enableOffToggling","setFlagTo","disableOffToggling","isMutuallyExclusive","RadiosInUnison","enableMutualExclusion","disableMutualExclusion","addOptionToPage","page","options","widget","createWidget","x","_a","y","_b","width","_c","height","_d","textColor","_e","backgroundColor","_f","borderColor","_g","borderWidth","_h","rotate","_j","hidden","widgetRef","context","register","dict","apStateValue","addWidgetWithOpt","fromText","setAppearanceState","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","widgets","getWidgets","state","getAppearanceState","normal","getAppearances","has","defaultUpdateAppearances","updateAppearances","provider","Function","onValue","getOnValue","apProvider","appearances","updateOnOffWidgetAppearance"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\api\\form\\PDFRadioGroup.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\r\nimport PDFPage from 'src/api/PDFPage';\r\nimport PDFField, {\r\n  FieldAppearanceOptions,\r\n  assertFieldAppearanceOptions,\r\n} from 'src/api/form/PDFField';\r\nimport {\r\n  AppearanceProviderFor,\r\n  normalizeAppearance,\r\n  defaultRadioGroupAppearanceProvider,\r\n} from 'src/api/form/appearances';\r\nimport { rgb } from 'src/api/colors';\r\nimport { degrees } from 'src/api/rotations';\r\n\r\nimport {\r\n  PDFName,\r\n  PDFRef,\r\n  PDFHexString,\r\n  PDFDict,\r\n  PDFWidgetAnnotation,\r\n  PDFAcroRadioButton,\r\n  AcroButtonFlags,\r\n} from 'src/core';\r\nimport { assertIs, assertOrUndefined, assertIsOneOf } from 'src/utils';\r\n\r\n/**\r\n * Represents a radio group field of a [[PDFForm]].\r\n *\r\n * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\r\n * radio group is to enable users to select one option from a set of mutually\r\n * exclusive choices. Each choice in a radio group is represented by a radio\r\n * button. Radio buttons each have two states: `on` and `off`. At most one\r\n * radio button in a group may be in the `on` state at any time. Users can\r\n * click on a radio button to select it (and thereby automatically deselect any\r\n * other radio button that might have already been selected). Some radio\r\n * groups allow users to toggle a selected radio button `off` by clicking on\r\n * it (see [[PDFRadioGroup.isOffToggleable]]).\r\n *\r\n * Note that some radio groups allow multiple radio buttons to be in the `on`\r\n * state at the same type **if** they represent the same underlying value (see\r\n * [[PDFRadioGroup.isMutuallyExclusive]]).\r\n */\r\nexport default class PDFRadioGroup extends PDFField {\r\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFForm.getOptionList]] method, which will create an\r\n   * > instance of [[PDFOptionList]] for you.\r\n   *\r\n   * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\r\n   * and ref\r\n   *\r\n   * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\r\n   *                        radio group.\r\n   * @param ref The unique reference for this radio group.\r\n   * @param doc The document to which this radio group will belong.\r\n   */\r\n  static of = (\r\n    acroRadioButton: PDFAcroRadioButton,\r\n    ref: PDFRef,\r\n    doc: PDFDocument,\r\n  ) => new PDFRadioGroup(acroRadioButton, ref, doc);\r\n\r\n  /** The low-level PDFAcroRadioButton wrapped by this radio group. */\r\n  readonly acroField: PDFAcroRadioButton;\r\n\r\n  private constructor(\r\n    acroRadioButton: PDFAcroRadioButton,\r\n    ref: PDFRef,\r\n    doc: PDFDocument,\r\n  ) {\r\n    super(acroRadioButton, ref, doc);\r\n\r\n    assertIs(acroRadioButton, 'acroRadioButton', [\r\n      [PDFAcroRadioButton, 'PDFAcroRadioButton'],\r\n    ]);\r\n\r\n    this.acroField = acroRadioButton;\r\n  }\r\n\r\n  /**\r\n   * Get the list of available options for this radio group. Each option is\r\n   * represented by a radio button. These radio buttons are displayed at\r\n   * various locations in the document, potentially on different pages (though\r\n   * typically they are stacked horizontally or vertically on the same page).\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * const options = radioGroup.getOptions()\r\n   * console.log('Radio Group options:', options)\r\n   * ```\r\n   * @returns The options for this radio group.\r\n   */\r\n  getOptions(): string[] {\r\n    const exportValues = this.acroField.getExportValues();\r\n    if (exportValues) {\r\n      const exportOptions = new Array<string>(exportValues.length);\r\n      for (let idx = 0, len = exportValues.length; idx < len; idx++) {\r\n        exportOptions[idx] = exportValues[idx].decodeText();\r\n      }\r\n      return exportOptions;\r\n    }\r\n\r\n    const onValues = this.acroField.getOnValues();\r\n    const onOptions = new Array<string>(onValues.length);\r\n    for (let idx = 0, len = onOptions.length; idx < len; idx++) {\r\n      onOptions[idx] = onValues[idx].decodeText();\r\n    }\r\n    return onOptions;\r\n  }\r\n\r\n  /**\r\n   * Get the selected option for this radio group. The selected option is\r\n   * represented by the radio button in this group that is turned on. At most\r\n   * one radio button in a group can be selected. If no buttons in this group\r\n   * are selected, `undefined` is returned.\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * const selected = radioGroup.getSelected()\r\n   * console.log('Selected radio button:', selected)\r\n   * ```\r\n   * @returns The selected option for this radio group.\r\n   */\r\n  getSelected(): string | undefined {\r\n    const value = this.acroField.getValue();\r\n    if (value === PDFName.of('Off')) return undefined;\r\n    const exportValues = this.acroField.getExportValues();\r\n    if (exportValues) {\r\n      const onValues = this.acroField.getOnValues();\r\n      for (let idx = 0, len = onValues.length; idx < len; idx++) {\r\n        if (onValues[idx] === value) return exportValues[idx].decodeText();\r\n      }\r\n    }\r\n    return value.decodeText();\r\n  }\r\n\r\n  // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\r\n  // //       aren't removing the widget reference from the page's Annots?\r\n  // removeOption(option: string) {\r\n  //   assertIs(option, 'option', ['string']);\r\n  //   // TODO: Assert is valid `option`!\r\n\r\n  //   const onValues = this.acroField.getOnValues();\r\n  //   const exportValues = this.acroField.getExportValues();\r\n  //   if (exportValues) {\r\n  //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\r\n  //       if (exportValues[idx].decodeText() === option) {\r\n  //         this.acroField.removeWidget(idx);\r\n  //         this.acroField.removeExportValue(idx);\r\n  //       }\r\n  //     }\r\n  //   } else {\r\n  //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\r\n  //       const value = onValues[idx];\r\n  //       if (value.decodeText() === option) {\r\n  //         this.acroField.removeWidget(idx);\r\n  //         this.acroField.removeExportValue(idx);\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Select an option for this radio group. This operation is analogous to a\r\n   * human user clicking one of the radio buttons in this group via a PDF\r\n   * reader to toggle it on. This method will update the underlying state of\r\n   * the radio group to indicate which option has been selected. PDF libraries\r\n   * and readers will be able to extract this value from the saved document and\r\n   * determine which option was selected.\r\n   *\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\r\n   * radioGroup.select('One Punch Man')\r\n   * ```\r\n   *\r\n   * This method will mark this radio group as dirty, causing its appearance\r\n   * streams to be updated when either [[PDFDocument.save]] or\r\n   * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\r\n   * streams will display a dot inside the widget of this check box field\r\n   * that represents the selected option.\r\n   *\r\n   * @param option The option to be selected.\r\n   */\r\n  select(option: string) {\r\n    assertIs(option, 'option', ['string']);\r\n\r\n    const validOptions = this.getOptions();\r\n    assertIsOneOf(option, 'option', validOptions);\r\n\r\n    this.markAsDirty();\r\n\r\n    const onValues = this.acroField.getOnValues();\r\n    const exportValues = this.acroField.getExportValues();\r\n    if (exportValues) {\r\n      for (let idx = 0, len = exportValues.length; idx < len; idx++) {\r\n        if (exportValues[idx].decodeText() === option) {\r\n          this.acroField.setValue(onValues[idx]);\r\n        }\r\n      }\r\n    } else {\r\n      for (let idx = 0, len = onValues.length; idx < len; idx++) {\r\n        const value = onValues[idx];\r\n        if (value.decodeText() === option) this.acroField.setValue(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear any selected option for this dropdown. This will result in all\r\n   * radio buttons in this group being toggled off. This method will update\r\n   * the underlying state of the dropdown to indicate that no radio buttons\r\n   * have been selected.\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.clear()\r\n   * ```\r\n   * This method will mark this radio group as dirty. See\r\n   * [[PDFRadioGroup.select]] for more details about what this means.\r\n   */\r\n  clear() {\r\n    this.markAsDirty();\r\n    this.acroField.setValue(PDFName.of('Off'));\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if users can click on radio buttons in this group to toggle\r\n   * them off. The alternative is that once a user clicks on a radio button\r\n   * to select it, the only way to deselect it is by selecting on another radio\r\n   * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\r\n   * [[PDFRadioGroup.disableOffToggling]]. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\r\n   * ```\r\n   */\r\n  isOffToggleable() {\r\n    return !this.acroField.hasFlag(AcroButtonFlags.NoToggleToOff);\r\n  }\r\n\r\n  /**\r\n   * Allow users to click on selected radio buttons in this group to toggle\r\n   * them off. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.enableOffToggling()\r\n   * ```\r\n   * > **NOTE:** This feature is documented in the PDF specification\r\n   * > (Table 226). However, most PDF readers do not respect this option and\r\n   * > prevent users from toggling radio buttons off even when it is enabled.\r\n   * > At the time of this writing (9/6/2020) Mac's Preview software did\r\n   * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\r\n   * > not.\r\n   */\r\n  enableOffToggling() {\r\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, false);\r\n  }\r\n\r\n  /**\r\n   * Prevent users from clicking on selected radio buttons in this group to\r\n   * toggle them off. Clicking on a selected radio button will have no effect.\r\n   * The only way to deselect a selected radio button is to click on a\r\n   * different radio button in the group. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.disableOffToggling()\r\n   * ```\r\n   */\r\n  disableOffToggling() {\r\n    this.acroField.setFlagTo(AcroButtonFlags.NoToggleToOff, true);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the radio buttons in this group are mutually exclusive.\r\n   * This means that when the user selects a radio button, only that specific\r\n   * button will be turned on. Even if other radio buttons in the group\r\n   * represent the same value, they will not be enabled. The alternative to\r\n   * this is that clicking a radio button will select that button along with\r\n   * any other radio buttons in the group that share the same value. See\r\n   * [[PDFRadioGroup.enableMutualExclusion]] and\r\n   * [[PDFRadioGroup.disableMutualExclusion]].\r\n   * For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\r\n   * ```\r\n   */\r\n  isMutuallyExclusive() {\r\n    return !this.acroField.hasFlag(AcroButtonFlags.RadiosInUnison);\r\n  }\r\n\r\n  /**\r\n   * When the user clicks a radio button in this group it will be selected. In\r\n   * addition, any other radio buttons in this group that share the same\r\n   * underlying value will also be selected. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.enableMutualExclusion()\r\n   * ```\r\n   * Note that this option must be enabled prior to adding options to the\r\n   * radio group. It does not currently apply retroactively to existing\r\n   * radio buttons in the group.\r\n   */\r\n  enableMutualExclusion() {\r\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, false);\r\n  }\r\n\r\n  /**\r\n   * When the user clicks a radio button in this group only it will be selected.\r\n   * No other radio buttons in the group will be selected, even if they share\r\n   * the same underlying value. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.disableMutualExclusion()\r\n   * ```\r\n   * Note that this option must be disabled prior to adding options to the\r\n   * radio group. It does not currently apply retroactively to existing\r\n   * radio buttons in the group.\r\n   */\r\n  disableMutualExclusion() {\r\n    this.acroField.setFlagTo(AcroButtonFlags.RadiosInUnison, true);\r\n  }\r\n\r\n  /**\r\n   * Add a new radio button to this group on the specified page. For example:\r\n   * ```js\r\n   * const page = pdfDoc.addPage()\r\n   *\r\n   * const form = pdfDoc.getForm()\r\n   * const radioGroup = form.createRadioGroup('best.gundam')\r\n   *\r\n   * const options = {\r\n   *   x: 50,\r\n   *   width: 25,\r\n   *   height: 25,\r\n   *   textColor: rgb(1, 0, 0),\r\n   *   backgroundColor: rgb(0, 1, 0),\r\n   *   borderColor: rgb(0, 0, 1),\r\n   *   borderWidth: 2,\r\n   *   rotate: degrees(90),\r\n   * }\r\n   *\r\n   * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\r\n   * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\r\n   * ```\r\n   * This will create a new radio button widget for this radio group field.\r\n   * @param option The option that the radio button widget represents.\r\n   * @param page The page to which the radio button widget should be added.\r\n   * @param options The options to be used when adding the radio button widget.\r\n   */\r\n  addOptionToPage(\r\n    option: string,\r\n    page: PDFPage,\r\n    options?: FieldAppearanceOptions,\r\n  ) {\r\n    assertIs(option, 'option', ['string']);\r\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\r\n    assertFieldAppearanceOptions(options);\r\n\r\n    // Create a widget for this radio button\r\n    const widget = this.createWidget({\r\n      x: options?.x ?? 0,\r\n      y: options?.y ?? 0,\r\n      width: options?.width ?? 50,\r\n      height: options?.height ?? 50,\r\n      textColor: options?.textColor ?? rgb(0, 0, 0),\r\n      backgroundColor: options?.backgroundColor ?? rgb(1, 1, 1),\r\n      borderColor: options?.borderColor ?? rgb(0, 0, 0),\r\n      borderWidth: options?.borderWidth ?? 1,\r\n      rotate: options?.rotate ?? degrees(0),\r\n      hidden: options?.hidden,\r\n      page: page.ref,\r\n    });\r\n    const widgetRef = this.doc.context.register(widget.dict);\r\n\r\n    // Add widget to this field\r\n    const apStateValue = this.acroField.addWidgetWithOpt(\r\n      widgetRef,\r\n      PDFHexString.fromText(option),\r\n      !this.isMutuallyExclusive(),\r\n    );\r\n\r\n    // Set appearance streams for widget\r\n    widget.setAppearanceState(PDFName.of('Off'));\r\n    this.updateWidgetAppearance(widget, apStateValue);\r\n\r\n    // Add widget to the given page\r\n    page.node.addAnnot(widgetRef);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if any of this group's radio button widgets do not have an\r\n   * appearance stream for their current state. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\r\n   * ```\r\n   * @returns Whether or not this radio group needs an appearance update.\r\n   */\r\n  needsAppearancesUpdate(): boolean {\r\n    const widgets = this.acroField.getWidgets();\r\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\r\n      const widget = widgets[idx];\r\n      const state = widget.getAppearanceState();\r\n      const normal = widget.getAppearances()?.normal;\r\n\r\n      if (!(normal instanceof PDFDict)) return true;\r\n      if (state && !normal.has(state)) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Update the appearance streams for each of this group's radio button widgets\r\n   * using the default appearance provider for radio groups. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.defaultUpdateAppearances()\r\n   * ```\r\n   */\r\n  defaultUpdateAppearances() {\r\n    this.updateAppearances();\r\n  }\r\n\r\n  // rg.updateAppearances((field: any, widget: any) => {\r\n  //   assert(field === rg);\r\n  //   assert(widget instanceof PDFWidgetAnnotation);\r\n  //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\r\n  // });\r\n\r\n  /**\r\n   * Update the appearance streams for each of this group's radio button widgets\r\n   * using the given appearance provider. If no `provider` is passed, the\r\n   * default appearance provider for radio groups will be used. For example:\r\n   * ```js\r\n   * const radioGroup = form.getRadioGroup('some.radioGroup.field')\r\n   * radioGroup.updateAppearances((field, widget) => {\r\n   *   ...\r\n   *   return {\r\n   *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n   *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\r\n   *   }\r\n   * })\r\n   * ```\r\n   * @param provider Optionally, the appearance provider to be used for\r\n   *                 generating the contents of the appearance streams.\r\n   */\r\n  updateAppearances(provider?: AppearanceProviderFor<PDFRadioGroup>) {\r\n    assertOrUndefined(provider, 'provider', [Function]);\r\n\r\n    const widgets = this.acroField.getWidgets();\r\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\r\n      const widget = widgets[idx];\r\n      const onValue = widget.getOnValue();\r\n      if (!onValue) continue;\r\n      this.updateWidgetAppearance(widget, onValue, provider);\r\n    }\r\n  }\r\n\r\n  private updateWidgetAppearance(\r\n    widget: PDFWidgetAnnotation,\r\n    onValue: PDFName,\r\n    provider?: AppearanceProviderFor<PDFRadioGroup>,\r\n  ) {\r\n    const apProvider = provider ?? defaultRadioGroupAppearanceProvider;\r\n    const appearances = normalizeAppearance(apProvider(this, widget));\r\n    this.updateOnOffWidgetAppearance(widget, onValue, appearances);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}