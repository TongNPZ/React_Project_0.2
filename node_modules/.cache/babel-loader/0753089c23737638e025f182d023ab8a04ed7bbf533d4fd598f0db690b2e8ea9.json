{"ast":null,"code":"import PDFDict from \"../objects/PDFDict\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFAcroNonTerminal from \"./PDFAcroNonTerminal\";\nimport { createPDFAcroField, createPDFAcroFields } from \"./utils\";\nvar PDFAcroForm = /** @class */function () {\n  function PDFAcroForm(dict) {\n    this.dict = dict;\n  }\n  PDFAcroForm.prototype.Fields = function () {\n    var fields = this.dict.lookup(PDFName.of('Fields'));\n    if (fields instanceof PDFArray) return fields;\n    return undefined;\n  };\n  PDFAcroForm.prototype.getFields = function () {\n    var Fields = this.normalizedEntries().Fields;\n    var fields = new Array(Fields.size());\n    for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n      var ref = Fields.get(idx);\n      var dict = Fields.lookup(idx, PDFDict);\n      fields[idx] = [createPDFAcroField(dict, ref), ref];\n    }\n    return fields;\n  };\n  PDFAcroForm.prototype.getAllFields = function () {\n    var allFields = [];\n    var pushFields = function (fields) {\n      if (!fields) return;\n      for (var idx = 0, len = fields.length; idx < len; idx++) {\n        var field = fields[idx];\n        allFields.push(field);\n        var fieldModel = field[0];\n        if (fieldModel instanceof PDFAcroNonTerminal) {\n          pushFields(createPDFAcroFields(fieldModel.Kids()));\n        }\n      }\n    };\n    pushFields(this.getFields());\n    return allFields;\n  };\n  PDFAcroForm.prototype.addField = function (field) {\n    var Fields = this.normalizedEntries().Fields;\n    Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n  };\n  PDFAcroForm.prototype.removeField = function (field) {\n    var parent = field.getParent();\n    var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n    var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n    if (fields === undefined || index === undefined) {\n      throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n    }\n    fields.remove(index);\n    if (parent !== undefined && fields.size() === 0) {\n      this.removeField(parent);\n    }\n  };\n  PDFAcroForm.prototype.normalizedEntries = function () {\n    var Fields = this.Fields();\n    if (!Fields) {\n      Fields = this.dict.context.obj([]);\n      this.dict.set(PDFName.of('Fields'), Fields);\n    }\n    return {\n      Fields: Fields\n    };\n  };\n  PDFAcroForm.fromDict = function (dict) {\n    return new PDFAcroForm(dict);\n  };\n  PDFAcroForm.create = function (context) {\n    var dict = context.obj({\n      Fields: []\n    });\n    return new PDFAcroForm(dict);\n  };\n  return PDFAcroForm;\n}();\nexport default PDFAcroForm;","map":{"version":3,"names":["PDFDict","PDFArray","PDFName","PDFAcroNonTerminal","createPDFAcroField","createPDFAcroFields","PDFAcroForm","dict","prototype","Fields","fields","lookup","of","undefined","getFields","normalizedEntries","Array","size","idx","len","ref","get","getAllFields","allFields","pushFields","length","field","push","fieldModel","Kids","addField","removeField","parent","getParent","index","indexOf","Error","getFullyQualifiedName","remove","context","obj","set","fromDict","create"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0 - Copy (2)\\node_modules\\pdf-lib\\src\\core\\acroform\\PDFAcroForm.ts"],"sourcesContent":["import PDFContext from 'src/core/PDFContext';\r\nimport PDFDict from 'src/core/objects/PDFDict';\r\nimport PDFArray from 'src/core/objects/PDFArray';\r\nimport PDFName from 'src/core/objects/PDFName';\r\nimport PDFRef from 'src/core/objects/PDFRef';\r\nimport PDFAcroField from 'src/core/acroform/PDFAcroField';\r\nimport PDFAcroNonTerminal from 'src/core/acroform/PDFAcroNonTerminal';\r\nimport {\r\n  createPDFAcroField,\r\n  createPDFAcroFields,\r\n} from 'src/core/acroform/utils';\r\n\r\nclass PDFAcroForm {\r\n  readonly dict: PDFDict;\r\n\r\n  static fromDict = (dict: PDFDict) => new PDFAcroForm(dict);\r\n\r\n  static create = (context: PDFContext) => {\r\n    const dict = context.obj({ Fields: [] });\r\n    return new PDFAcroForm(dict);\r\n  };\r\n\r\n  private constructor(dict: PDFDict) {\r\n    this.dict = dict;\r\n  }\r\n\r\n  Fields(): PDFArray | undefined {\r\n    const fields = this.dict.lookup(PDFName.of('Fields'));\r\n    if (fields instanceof PDFArray) return fields;\r\n    return undefined;\r\n  }\r\n\r\n  getFields(): [PDFAcroField, PDFRef][] {\r\n    const { Fields } = this.normalizedEntries();\r\n\r\n    const fields = new Array(Fields.size());\r\n    for (let idx = 0, len = Fields.size(); idx < len; idx++) {\r\n      const ref = Fields.get(idx) as PDFRef;\r\n      const dict = Fields.lookup(idx, PDFDict);\r\n      fields[idx] = [createPDFAcroField(dict, ref), ref];\r\n    }\r\n\r\n    return fields;\r\n  }\r\n\r\n  getAllFields(): [PDFAcroField, PDFRef][] {\r\n    const allFields: [PDFAcroField, PDFRef][] = [];\r\n\r\n    const pushFields = (fields?: [PDFAcroField, PDFRef][]) => {\r\n      if (!fields) return;\r\n      for (let idx = 0, len = fields.length; idx < len; idx++) {\r\n        const field = fields[idx];\r\n        allFields.push(field);\r\n        const [fieldModel] = field;\r\n        if (fieldModel instanceof PDFAcroNonTerminal) {\r\n          pushFields(createPDFAcroFields(fieldModel.Kids()));\r\n        }\r\n      }\r\n    };\r\n\r\n    pushFields(this.getFields());\r\n\r\n    return allFields;\r\n  }\r\n\r\n  addField(field: PDFRef) {\r\n    const { Fields } = this.normalizedEntries();\r\n    Fields?.push(field);\r\n  }\r\n\r\n  removeField(field: PDFAcroField): void {\r\n    const parent = field.getParent();\r\n    const fields =\r\n      parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\r\n\r\n    const index = fields?.indexOf(field.ref);\r\n    if (fields === undefined || index === undefined) {\r\n      throw new Error(\r\n        `Tried to remove inexistent field ${field.getFullyQualifiedName()}`,\r\n      );\r\n    }\r\n\r\n    fields.remove(index);\r\n\r\n    if (parent !== undefined && fields.size() === 0) {\r\n      this.removeField(parent);\r\n    }\r\n  }\r\n\r\n  normalizedEntries() {\r\n    let Fields = this.Fields();\r\n\r\n    if (!Fields) {\r\n      Fields = this.dict.context.obj([]);\r\n      this.dict.set(PDFName.of('Fields'), Fields);\r\n    }\r\n\r\n    return { Fields };\r\n  }\r\n}\r\n\r\nexport default PDFAcroForm;\r\n"],"mappings":"AACA,OAAOA,OAAO;AACd,OAAOC,QAAQ;AACf,OAAOC,OAAO;AAGd,OAAOC,kBAAkB;AACzB,SACEC,kBAAkB,EAClBC,mBAAmB,QACpB;AAED,IAAAC,WAAA;EAUE,SAAAA,YAAoBC,IAAa;IAC/B,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEAD,WAAA,CAAAE,SAAA,CAAAC,MAAM,GAAN;IACE,IAAMC,MAAM,GAAG,IAAI,CAACH,IAAI,CAACI,MAAM,CAACT,OAAO,CAACU,EAAE,CAAC,QAAQ,CAAC,CAAC;IACrD,IAAIF,MAAM,YAAYT,QAAQ,EAAE,OAAOS,MAAM;IAC7C,OAAOG,SAAS;EAClB,CAAC;EAEDP,WAAA,CAAAE,SAAA,CAAAM,SAAS,GAAT;IACU,IAAAL,MAAM,GAAK,IAAI,CAACM,iBAAiB,EAAE,CAAAN,MAA7B;IAEd,IAAMC,MAAM,GAAG,IAAIM,KAAK,CAACP,MAAM,CAACQ,IAAI,EAAE,CAAC;IACvC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGV,MAAM,CAACQ,IAAI,EAAE,EAAEC,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MACvD,IAAME,GAAG,GAAGX,MAAM,CAACY,GAAG,CAACH,GAAG,CAAW;MACrC,IAAMX,IAAI,GAAGE,MAAM,CAACE,MAAM,CAACO,GAAG,EAAElB,OAAO,CAAC;MACxCU,MAAM,CAACQ,GAAG,CAAC,GAAG,CAACd,kBAAkB,CAACG,IAAI,EAAEa,GAAG,CAAC,EAAEA,GAAG,CAAC;;IAGpD,OAAOV,MAAM;EACf,CAAC;EAEDJ,WAAA,CAAAE,SAAA,CAAAc,YAAY,GAAZ;IACE,IAAMC,SAAS,GAA6B,EAAE;IAE9C,IAAMC,UAAU,GAAG,SAAAA,CAACd,MAAiC;MACnD,IAAI,CAACA,MAAM,EAAE;MACb,KAAK,IAAIQ,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAGT,MAAM,CAACe,MAAM,EAAEP,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;QACvD,IAAMQ,KAAK,GAAGhB,MAAM,CAACQ,GAAG,CAAC;QACzBK,SAAS,CAACI,IAAI,CAACD,KAAK,CAAC;QACd,IAAAE,UAAU,GAAIF,KAAK,GAAT;QACjB,IAAIE,UAAU,YAAYzB,kBAAkB,EAAE;UAC5CqB,UAAU,CAACnB,mBAAmB,CAACuB,UAAU,CAACC,IAAI,EAAE,CAAC,CAAC;;;IAGxD,CAAC;IAEDL,UAAU,CAAC,IAAI,CAACV,SAAS,EAAE,CAAC;IAE5B,OAAOS,SAAS;EAClB,CAAC;EAEDjB,WAAA,CAAAE,SAAA,CAAAsB,QAAQ,GAAR,UAASJ,KAAa;IACZ,IAAAjB,MAAM,GAAK,IAAI,CAACM,iBAAiB,EAAE,CAAAN,MAA7B;IACdA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEkB,IAAI,CAACD,KAAK;EACpB,CAAC;EAEDpB,WAAA,CAAAE,SAAA,CAAAuB,WAAW,GAAX,UAAYL,KAAmB;IAC7B,IAAMM,MAAM,GAAGN,KAAK,CAACO,SAAS,EAAE;IAChC,IAAMvB,MAAM,GACVsB,MAAM,KAAKnB,SAAS,GAAG,IAAI,CAACE,iBAAiB,EAAE,CAACN,MAAM,GAAGuB,MAAM,CAACH,IAAI,EAAE;IAExE,IAAMK,KAAK,GAAGxB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEyB,OAAO,CAACT,KAAK,CAACN,GAAG,CAAC;IACxC,IAAIV,MAAM,KAAKG,SAAS,IAAIqB,KAAK,KAAKrB,SAAS,EAAE;MAC/C,MAAM,IAAIuB,KAAK,CACb,sCAAoCV,KAAK,CAACW,qBAAqB,EAAI,CACpE;;IAGH3B,MAAM,CAAC4B,MAAM,CAACJ,KAAK,CAAC;IAEpB,IAAIF,MAAM,KAAKnB,SAAS,IAAIH,MAAM,CAACO,IAAI,EAAE,KAAK,CAAC,EAAE;MAC/C,IAAI,CAACc,WAAW,CAACC,MAAM,CAAC;;EAE5B,CAAC;EAED1B,WAAA,CAAAE,SAAA,CAAAO,iBAAiB,GAAjB;IACE,IAAIN,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE;IAE1B,IAAI,CAACA,MAAM,EAAE;MACXA,MAAM,GAAG,IAAI,CAACF,IAAI,CAACgC,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;MAClC,IAAI,CAACjC,IAAI,CAACkC,GAAG,CAACvC,OAAO,CAACU,EAAE,CAAC,QAAQ,CAAC,EAAEH,MAAM,CAAC;;IAG7C,OAAO;MAAEA,MAAM,EAAAA;IAAA,CAAE;EACnB,CAAC;EAnFMH,WAAA,CAAAoC,QAAQ,GAAG,UAACnC,IAAa;IAAK,WAAID,WAAW,CAACC,IAAI,CAAC;EAArB,CAAqB;EAEnDD,WAAA,CAAAqC,MAAM,GAAG,UAACJ,OAAmB;IAClC,IAAMhC,IAAI,GAAGgC,OAAO,CAACC,GAAG,CAAC;MAAE/B,MAAM,EAAE;IAAE,CAAE,CAAC;IACxC,OAAO,IAAIH,WAAW,CAACC,IAAI,CAAC;EAC9B,CAAC;EA+EH,OAAAD,WAAC;CAAA,CAvFD;AAyFA,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}