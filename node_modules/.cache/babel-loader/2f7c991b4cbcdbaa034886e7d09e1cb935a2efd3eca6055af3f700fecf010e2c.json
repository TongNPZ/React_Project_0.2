{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFFlateStream from \"./PDFFlateStream\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFContentStream = /** @class */function (_super) {\n  __extends(PDFContentStream, _super);\n  function PDFContentStream(dict, operators, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    var _this = _super.call(this, dict, encode) || this;\n    _this.operators = operators;\n    return _this;\n  }\n  PDFContentStream.prototype.push = function () {\n    var _a;\n    var operators = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operators[_i] = arguments[_i];\n    }\n    (_a = this.operators).push.apply(_a, operators);\n  };\n  PDFContentStream.prototype.clone = function (context) {\n    var operators = new Array(this.operators.length);\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      operators[idx] = this.operators[idx].clone(context);\n    }\n    var _a = this,\n      dict = _a.dict,\n      encode = _a.encode;\n    return PDFContentStream.of(dict.clone(context), operators, encode);\n  };\n  PDFContentStream.prototype.getContentsString = function () {\n    var value = '';\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      value += this.operators[idx] + \"\\n\";\n    }\n    return value;\n  };\n  PDFContentStream.prototype.getUnencodedContents = function () {\n    var buffer = new Uint8Array(this.getUnencodedContentsSize());\n    var offset = 0;\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      offset += this.operators[idx].copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n    }\n    return buffer;\n  };\n  PDFContentStream.prototype.getUnencodedContentsSize = function () {\n    var size = 0;\n    for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n      size += this.operators[idx].sizeInBytes() + 1;\n    }\n    return size;\n  };\n  PDFContentStream.of = function (dict, operators, encode) {\n    if (encode === void 0) {\n      encode = true;\n    }\n    return new PDFContentStream(dict, operators, encode);\n  };\n  return PDFContentStream;\n}(PDFFlateStream);\nexport default PDFContentStream;","map":{"version":3,"names":["PDFFlateStream","CharCodes","PDFContentStream","_super","__extends","dict","operators","encode","_this","call","prototype","push","_i","arguments","length","_a","apply","clone","context","Array","idx","len","of","getContentsString","value","getUnencodedContents","buffer","Uint8Array","getUnencodedContentsSize","offset","copyBytesInto","Newline","size","sizeInBytes"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\core\\structures\\PDFContentStream.ts"],"sourcesContent":["import PDFDict from 'src/core/objects/PDFDict';\nimport PDFOperator from 'src/core/operators/PDFOperator';\nimport PDFContext from 'src/core/PDFContext';\nimport PDFFlateStream from 'src/core/structures/PDFFlateStream';\nimport CharCodes from 'src/core/syntax/CharCodes';\n\nclass PDFContentStream extends PDFFlateStream {\n  static of = (dict: PDFDict, operators: PDFOperator[], encode = true) =>\n    new PDFContentStream(dict, operators, encode);\n\n  private readonly operators: PDFOperator[];\n\n  private constructor(dict: PDFDict, operators: PDFOperator[], encode = true) {\n    super(dict, encode);\n    this.operators = operators;\n  }\n\n  push(...operators: PDFOperator[]): void {\n    this.operators.push(...operators);\n  }\n\n  clone(context?: PDFContext): PDFContentStream {\n    const operators = new Array(this.operators.length);\n    for (let idx = 0, len = this.operators.length; idx < len; idx++) {\n      operators[idx] = this.operators[idx].clone(context);\n    }\n    const { dict, encode } = this;\n    return PDFContentStream.of(dict.clone(context), operators, encode);\n  }\n\n  getContentsString(): string {\n    let value = '';\n    for (let idx = 0, len = this.operators.length; idx < len; idx++) {\n      value += `${this.operators[idx]}\\n`;\n    }\n    return value;\n  }\n\n  getUnencodedContents(): Uint8Array {\n    const buffer = new Uint8Array(this.getUnencodedContentsSize());\n    let offset = 0;\n    for (let idx = 0, len = this.operators.length; idx < len; idx++) {\n      offset += this.operators[idx].copyBytesInto(buffer, offset);\n      buffer[offset++] = CharCodes.Newline;\n    }\n    return buffer;\n  }\n\n  getUnencodedContentsSize(): number {\n    let size = 0;\n    for (let idx = 0, len = this.operators.length; idx < len; idx++) {\n      size += this.operators[idx].sizeInBytes() + 1;\n    }\n    return size;\n  }\n}\n\nexport default PDFContentStream;\n"],"mappings":";AAGA,OAAOA,cAAc;AACrB,OAAOC,SAAS;AAEhB,IAAAC,gBAAA,0BAAAC,MAAA;EAA+BC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAM7B,SAAAD,iBAAoBG,IAAa,EAAEC,SAAwB,EAAEC,MAAa;IAAb,IAAAA,MAAA;MAAAA,MAAA,OAAa;IAAA;IAA1E,IAAAC,KAAA,GACEL,MAAA,CAAAM,IAAA,OAAMJ,IAAI,EAAEE,MAAM,CAAC;IACnBC,KAAI,CAACF,SAAS,GAAGA,SAAS;;EAC5B;EAEAJ,gBAAA,CAAAQ,SAAA,CAAAC,IAAI,GAAJ;;IAAK,IAAAL,SAAA;SAAA,IAAAM,EAAA,IAA2B,EAA3BA,EAAA,GAAAC,SAAA,CAAAC,MAA2B,EAA3BF,EAAA,EAA2B;MAA3BN,SAAA,CAAAM,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACH,CAAAG,EAAA,OAAI,CAACT,SAAS,EAACK,IAAI,CAAAK,KAAA,CAAAD,EAAA,EAAIT,SAAS;EAClC,CAAC;EAEDJ,gBAAA,CAAAQ,SAAA,CAAAO,KAAK,GAAL,UAAMC,OAAoB;IACxB,IAAMZ,SAAS,GAAG,IAAIa,KAAK,CAAC,IAAI,CAACb,SAAS,CAACQ,MAAM,CAAC;IAClD,KAAK,IAAIM,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACf,SAAS,CAACQ,MAAM,EAAEM,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MAC/Dd,SAAS,CAACc,GAAG,CAAC,GAAG,IAAI,CAACd,SAAS,CAACc,GAAG,CAAC,CAACH,KAAK,CAACC,OAAO,CAAC;;IAE/C,IAAAH,EAAA,GAAmB,IAAI;MAArBV,IAAI,GAAAU,EAAA,CAAAV,IAAA;MAAEE,MAAM,GAAAQ,EAAA,CAAAR,MAAS;IAC7B,OAAOL,gBAAgB,CAACoB,EAAE,CAACjB,IAAI,CAACY,KAAK,CAACC,OAAO,CAAC,EAAEZ,SAAS,EAAEC,MAAM,CAAC;EACpE,CAAC;EAEDL,gBAAA,CAAAQ,SAAA,CAAAa,iBAAiB,GAAjB;IACE,IAAIC,KAAK,GAAG,EAAE;IACd,KAAK,IAAIJ,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACf,SAAS,CAACQ,MAAM,EAAEM,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MAC/DI,KAAK,IAAO,IAAI,CAAClB,SAAS,CAACc,GAAG,CAAC,OAAI;;IAErC,OAAOI,KAAK;EACd,CAAC;EAEDtB,gBAAA,CAAAQ,SAAA,CAAAe,oBAAoB,GAApB;IACE,IAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACC,wBAAwB,EAAE,CAAC;IAC9D,IAAIC,MAAM,GAAG,CAAC;IACd,KAAK,IAAIT,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACf,SAAS,CAACQ,MAAM,EAAEM,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MAC/DS,MAAM,IAAI,IAAI,CAACvB,SAAS,CAACc,GAAG,CAAC,CAACU,aAAa,CAACJ,MAAM,EAAEG,MAAM,CAAC;MAC3DH,MAAM,CAACG,MAAM,EAAE,CAAC,GAAG5B,SAAS,CAAC8B,OAAO;;IAEtC,OAAOL,MAAM;EACf,CAAC;EAEDxB,gBAAA,CAAAQ,SAAA,CAAAkB,wBAAwB,GAAxB;IACE,IAAII,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIZ,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACf,SAAS,CAACQ,MAAM,EAAEM,GAAG,GAAGC,GAAG,EAAED,GAAG,EAAE,EAAE;MAC/DY,IAAI,IAAI,IAAI,CAAC1B,SAAS,CAACc,GAAG,CAAC,CAACa,WAAW,EAAE,GAAG,CAAC;;IAE/C,OAAOD,IAAI;EACb,CAAC;EA/CM9B,gBAAA,CAAAoB,EAAE,GAAG,UAACjB,IAAa,EAAEC,SAAwB,EAAEC,MAAa;IAAb,IAAAA,MAAA;MAAAA,MAAA,OAAa;IAAA;IACjE,WAAIL,gBAAgB,CAACG,IAAI,EAAEC,SAAS,EAAEC,MAAM,CAAC;EAA7C,CAA6C;EA+CjD,OAAAL,gBAAC;CAAA,CAjD8BF,cAAc;AAmD7C,eAAeE,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}