{"ast":null,"code":"/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Ascii85Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\nimport { __extends } from \"tslib\";\nimport DecodeStream from \"./DecodeStream\";\nvar isSpace = function (ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n};\nvar Ascii85Stream = /** @class */function (_super) {\n  __extends(Ascii85Stream, _super);\n  function Ascii85Stream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    _this.input = new Uint8Array(5);\n    // Most streams increase in size when decoded, but Ascii85 streams\n    // typically shrink by ~20%.\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n    return _this;\n  }\n  Ascii85Stream.prototype.readBlock = function () {\n    var TILDA_CHAR = 0x7e; // '~'\n    var Z_LOWER_CHAR = 0x7a; // 'z'\n    var EOF = -1;\n    var stream = this.stream;\n    var c = stream.getByte();\n    while (isSpace(c)) {\n      c = stream.getByte();\n    }\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n    var bufferLength = this.bufferLength;\n    var buffer;\n    var i;\n    // special code for z\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n      for (i = 1; i < 5; ++i) {\n        c = stream.getByte();\n        while (isSpace(c)) {\n          c = stream.getByte();\n        }\n        input[i] = c;\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n      // partial ending;\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n        this.eof = true;\n      }\n      var t = 0;\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n  return Ascii85Stream;\n}(DecodeStream);\nexport default Ascii85Stream;","map":{"version":3,"names":["DecodeStream","isSpace","ch","Ascii85Stream","_super","__extends","stream","maybeLength","_this","call","input","Uint8Array","prototype","readBlock","TILDA_CHAR","Z_LOWER_CHAR","EOF","c","getByte","eof","bufferLength","buffer","i","ensureBuffer","t"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0 - Copy (2)\\node_modules\\pdf-lib\\src\\core\\streams\\Ascii85Stream.ts"],"sourcesContent":["/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The Ascii85Stream class contained in this file is a TypeScript port of the\r\n * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\r\n\r\nimport DecodeStream from 'src/core/streams/DecodeStream';\r\nimport { StreamType } from 'src/core/streams/Stream';\r\n\r\nconst isSpace = (ch: number) =>\r\n  ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\r\n\r\nclass Ascii85Stream extends DecodeStream {\r\n  private stream: StreamType;\r\n  private input: Uint8Array;\r\n\r\n  constructor(stream: StreamType, maybeLength?: number) {\r\n    super(maybeLength);\r\n\r\n    this.stream = stream;\r\n    this.input = new Uint8Array(5);\r\n\r\n    // Most streams increase in size when decoded, but Ascii85 streams\r\n    // typically shrink by ~20%.\r\n    if (maybeLength) {\r\n      maybeLength = 0.8 * maybeLength;\r\n    }\r\n  }\r\n\r\n  protected readBlock() {\r\n    const TILDA_CHAR = 0x7e; // '~'\r\n    const Z_LOWER_CHAR = 0x7a; // 'z'\r\n    const EOF = -1;\r\n\r\n    const stream = this.stream;\r\n\r\n    let c = stream.getByte();\r\n    while (isSpace(c)) {\r\n      c = stream.getByte();\r\n    }\r\n\r\n    if (c === EOF || c === TILDA_CHAR) {\r\n      this.eof = true;\r\n      return;\r\n    }\r\n\r\n    const bufferLength = this.bufferLength;\r\n    let buffer;\r\n    let i;\r\n\r\n    // special code for z\r\n    if (c === Z_LOWER_CHAR) {\r\n      buffer = this.ensureBuffer(bufferLength + 4);\r\n      for (i = 0; i < 4; ++i) {\r\n        buffer[bufferLength + i] = 0;\r\n      }\r\n      this.bufferLength += 4;\r\n    } else {\r\n      const input = this.input;\r\n      input[0] = c;\r\n      for (i = 1; i < 5; ++i) {\r\n        c = stream.getByte();\r\n        while (isSpace(c)) {\r\n          c = stream.getByte();\r\n        }\r\n\r\n        input[i] = c;\r\n\r\n        if (c === EOF || c === TILDA_CHAR) {\r\n          break;\r\n        }\r\n      }\r\n      buffer = this.ensureBuffer(bufferLength + i - 1);\r\n      this.bufferLength += i - 1;\r\n\r\n      // partial ending;\r\n      if (i < 5) {\r\n        for (; i < 5; ++i) {\r\n          input[i] = 0x21 + 84;\r\n        }\r\n        this.eof = true;\r\n      }\r\n      let t = 0;\r\n      for (i = 0; i < 5; ++i) {\r\n        t = t * 85 + (input[i] - 0x21);\r\n      }\r\n\r\n      for (i = 3; i >= 0; --i) {\r\n        buffer[bufferLength + i] = t & 0xff;\r\n        t >>= 8;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Ascii85Stream;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}