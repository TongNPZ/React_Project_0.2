{"ast":null,"code":"'use strict';\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar c = require('./zlib/constants');\nvar msg = require('./zlib/messages');\nvar ZStream = require('./zlib/zstream');\nvar GZheader = require('./zlib/gzheader');\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) {\n      opt.windowBits = -15;\n    }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if (opt.windowBits > 15 && opt.windowBits < 48) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n  this.err = 0; // error code, if happens (0 = Z_OK)\n  this.msg = ''; // error message\n  this.ended = false; // used to avoid multiple onEnd() calls\n  this.chunks = []; // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n  var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n  this.header = new GZheader();\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) {\n      //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n  if (this.ended) {\n    return false;\n  }\n  _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH); /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {\n        if (this.options.to === 'string') {\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) {\n            utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);\n          }\n          this.onData(utf8str);\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n  return true;\n};\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) {\n    throw inflator.msg || msg[inflator.err];\n  }\n  return inflator.result;\n}\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip = inflate;","map":{"version":3,"names":["zlib_inflate","require","utils","strings","c","msg","ZStream","GZheader","toString","Object","prototype","Inflate","options","assign","chunkSize","windowBits","to","opt","raw","err","ended","chunks","strm","avail_out","status","inflateInit2","Z_OK","Error","header","inflateGetHeader","dictionary","string2buf","call","Uint8Array","inflateSetDictionary","push","data","mode","_mode","next_out_utf8","tail","utf8str","allowBufError","Z_FINISH","Z_NO_FLUSH","input","binstring2buf","next_in","avail_in","length","output","Buf8","next_out","inflate","Z_NEED_DICT","Z_BUF_ERROR","Z_STREAM_END","onEnd","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","onData","shrinkBuf","inflateEnd","chunk","result","join","flattenChunks","inflator","inflateRaw","exports","ungzip"],"sources":["C:/Users/TongNPZ/Desktop/my-app-2.0/node_modules/pako/lib/inflate.js"],"sourcesContent":["'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}