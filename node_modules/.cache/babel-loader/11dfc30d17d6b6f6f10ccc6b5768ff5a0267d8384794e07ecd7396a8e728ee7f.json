{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { MethodNotImplementedError } from \"../errors\";\nimport PDFName from \"./PDFName\";\nimport PDFNumber from \"./PDFNumber\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nvar PDFStream = /** @class */function (_super) {\n  __extends(PDFStream, _super);\n  function PDFStream(dict) {\n    var _this = _super.call(this) || this;\n    _this.dict = dict;\n    return _this;\n  }\n  PDFStream.prototype.clone = function (_context) {\n    throw new MethodNotImplementedError(this.constructor.name, 'clone');\n  };\n  PDFStream.prototype.getContentsString = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContentsString');\n  };\n  PDFStream.prototype.getContents = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContents');\n  };\n  PDFStream.prototype.getContentsSize = function () {\n    throw new MethodNotImplementedError(this.constructor.name, 'getContentsSize');\n  };\n  PDFStream.prototype.updateDict = function () {\n    var contentsSize = this.getContentsSize();\n    this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\n  };\n  PDFStream.prototype.sizeInBytes = function () {\n    this.updateDict();\n    return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n  };\n  PDFStream.prototype.toString = function () {\n    this.updateDict();\n    var streamString = this.dict.toString();\n    streamString += '\\nstream\\n';\n    streamString += this.getContentsString();\n    streamString += '\\nendstream';\n    return streamString;\n  };\n  PDFStream.prototype.copyBytesInto = function (buffer, offset) {\n    this.updateDict();\n    var initialOffset = offset;\n    offset += this.dict.copyBytesInto(buffer, offset);\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n    buffer[offset++] = CharCodes.Newline;\n    var contents = this.getContents();\n    for (var idx = 0, len = contents.length; idx < len; idx++) {\n      buffer[offset++] = contents[idx];\n    }\n    buffer[offset++] = CharCodes.Newline;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.n;\n    buffer[offset++] = CharCodes.d;\n    buffer[offset++] = CharCodes.s;\n    buffer[offset++] = CharCodes.t;\n    buffer[offset++] = CharCodes.r;\n    buffer[offset++] = CharCodes.e;\n    buffer[offset++] = CharCodes.a;\n    buffer[offset++] = CharCodes.m;\n    return offset - initialOffset;\n  };\n  return PDFStream;\n}(PDFObject);\nexport default PDFStream;","map":{"version":3,"names":["MethodNotImplementedError","PDFName","PDFNumber","PDFObject","CharCodes","PDFStream","_super","__extends","dict","_this","call","prototype","clone","_context","constructor","name","getContentsString","getContents","getContentsSize","updateDict","contentsSize","set","Length","of","sizeInBytes","toString","streamString","copyBytesInto","buffer","offset","initialOffset","Newline","s","t","r","e","a","m","contents","idx","len","length","n","d"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\core\\objects\\PDFStream.ts"],"sourcesContent":["import { MethodNotImplementedError } from 'src/core/errors';\r\nimport PDFDict from 'src/core/objects/PDFDict';\r\nimport PDFName from 'src/core/objects/PDFName';\r\nimport PDFNumber from 'src/core/objects/PDFNumber';\r\nimport PDFObject from 'src/core/objects/PDFObject';\r\nimport PDFContext from 'src/core/PDFContext';\r\nimport CharCodes from 'src/core/syntax/CharCodes';\r\n\r\nclass PDFStream extends PDFObject {\r\n  readonly dict: PDFDict;\r\n\r\n  constructor(dict: PDFDict) {\r\n    super();\r\n    this.dict = dict;\r\n  }\r\n\r\n  clone(_context?: PDFContext): PDFStream {\r\n    throw new MethodNotImplementedError(this.constructor.name, 'clone');\r\n  }\r\n\r\n  getContentsString(): string {\r\n    throw new MethodNotImplementedError(\r\n      this.constructor.name,\r\n      'getContentsString',\r\n    );\r\n  }\r\n\r\n  getContents(): Uint8Array {\r\n    throw new MethodNotImplementedError(this.constructor.name, 'getContents');\r\n  }\r\n\r\n  getContentsSize(): number {\r\n    throw new MethodNotImplementedError(\r\n      this.constructor.name,\r\n      'getContentsSize',\r\n    );\r\n  }\r\n\r\n  updateDict(): void {\r\n    const contentsSize = this.getContentsSize();\r\n    this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\r\n  }\r\n\r\n  sizeInBytes(): number {\r\n    this.updateDict();\r\n    return this.dict.sizeInBytes() + this.getContentsSize() + 18;\r\n  }\r\n\r\n  toString(): string {\r\n    this.updateDict();\r\n    let streamString = this.dict.toString();\r\n    streamString += '\\nstream\\n';\r\n    streamString += this.getContentsString();\r\n    streamString += '\\nendstream';\r\n    return streamString;\r\n  }\r\n\r\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\r\n    this.updateDict();\r\n    const initialOffset = offset;\r\n\r\n    offset += this.dict.copyBytesInto(buffer, offset);\r\n    buffer[offset++] = CharCodes.Newline;\r\n\r\n    buffer[offset++] = CharCodes.s;\r\n    buffer[offset++] = CharCodes.t;\r\n    buffer[offset++] = CharCodes.r;\r\n    buffer[offset++] = CharCodes.e;\r\n    buffer[offset++] = CharCodes.a;\r\n    buffer[offset++] = CharCodes.m;\r\n    buffer[offset++] = CharCodes.Newline;\r\n\r\n    const contents = this.getContents();\r\n    for (let idx = 0, len = contents.length; idx < len; idx++) {\r\n      buffer[offset++] = contents[idx];\r\n    }\r\n\r\n    buffer[offset++] = CharCodes.Newline;\r\n    buffer[offset++] = CharCodes.e;\r\n    buffer[offset++] = CharCodes.n;\r\n    buffer[offset++] = CharCodes.d;\r\n    buffer[offset++] = CharCodes.s;\r\n    buffer[offset++] = CharCodes.t;\r\n    buffer[offset++] = CharCodes.r;\r\n    buffer[offset++] = CharCodes.e;\r\n    buffer[offset++] = CharCodes.a;\r\n    buffer[offset++] = CharCodes.m;\r\n\r\n    return offset - initialOffset;\r\n  }\r\n}\r\n\r\nexport default PDFStream;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}