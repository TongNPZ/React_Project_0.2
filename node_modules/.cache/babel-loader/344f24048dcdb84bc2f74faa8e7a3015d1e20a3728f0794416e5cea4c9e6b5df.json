{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFPage from \"../PDFPage\";\nimport PDFFont from \"../PDFFont\";\nimport PDFField, { assertFieldAppearanceOptions } from \"./PDFField\";\nimport { normalizeAppearance, defaultTextFieldAppearanceProvider } from \"./appearances\";\nimport { rgb } from \"../colors\";\nimport { degrees } from \"../rotations\";\nimport { RichTextFieldReadError, ExceededMaxLengthError, InvalidMaxLengthError } from \"../errors\";\nimport { ImageAlignment } from \"../image/alignment\";\nimport { TextAlignment } from \"../text/alignment\";\nimport { PDFHexString, PDFStream, PDFAcroText, AcroTextFlags } from \"../../core\";\nimport { assertIs, assertIsOneOf, assertOrUndefined, assertPositive, assertRangeOrUndefined } from \"../../utils\";\n/**\n * Represents a text field of a [[PDFForm]].\n *\n * [[PDFTextField]] fields are boxes that display text entered by the user. The\n * purpose of a text field is to enable users to enter text or view text values\n * in the document prefilled by software. Users can click on a text field and\n * input text via their keyboard. Some text fields allow multiple lines of text\n * to be entered (see [[PDFTextField.isMultiline]]).\n */\nvar PDFTextField = /** @class */function (_super) {\n  __extends(PDFTextField, _super);\n  function PDFTextField(acroText, ref, doc) {\n    var _this = _super.call(this, acroText, ref, doc) || this;\n    assertIs(acroText, 'acroText', [[PDFAcroText, 'PDFAcroText']]);\n    _this.acroField = acroText;\n    return _this;\n  }\n  /**\n   * Get the text that this field contains. This text is visible to users who\n   * view this field in a PDF reader.\n   *\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * const text = textField.getText()\n   * console.log('Text field contents:', text)\n   * ```\n   *\n   * Note that if this text field contains no underlying value, `undefined`\n   * will be returned. Text fields may also contain an underlying value that\n   * is simply an empty string (`''`). This detail is largely irrelevant for\n   * most applications. In general, you'll want to treat both cases the same\n   * way and simply consider the text field to be empty. In either case, the\n   * text field will appear empty to users when viewed in a PDF reader.\n   *\n   * An error will be thrown if this is a rich text field. `pdf-lib` does not\n   * support reading rich text fields. Nor do most PDF readers and writers.\n   * Rich text fields are based on XFA (XML Forms Architecture). Relatively few\n   * PDFs use rich text fields or XFA. Unlike PDF itself, XFA is not an ISO\n   * standard. XFA has been deprecated in PDF 2.0:\n   * * https://en.wikipedia.org/wiki/XFA\n   * * http://blog.pdfshareforms.com/pdf-2-0-release-bid-farewell-xfa-forms/\n   *\n   * @returns The text contained in this text field.\n   */\n  PDFTextField.prototype.getText = function () {\n    var value = this.acroField.getValue();\n    if (!value && this.isRichFormatted()) {\n      throw new RichTextFieldReadError(this.getName());\n    }\n    return value === null || value === void 0 ? void 0 : value.decodeText();\n  };\n  /**\n   * Set the text for this field. This operation is analogous to a human user\n   * clicking on the text field in a PDF reader and typing in text via their\n   * keyboard. This method will update the underlying state of the text field\n   * to indicate what text has been set. PDF libraries and readers will be able\n   * to extract these values from the saved document and determine what text\n   * was set.\n   *\n   * For example:\n   * ```js\n   * const textField = form.getTextField('best.superhero.text.field')\n   * textField.setText('One Punch Man')\n   * ```\n   *\n   * This method will mark this text field as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the text this field contains inside the widgets of this text\n   * field.\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if this field contains text outside\n   * the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFTextField.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * If this is a rich text field, it will be converted to a standard text\n   * field in order to set the text. `pdf-lib` does not support writing rich\n   * text strings. Nor do most PDF readers and writers. See\n   * [[PDFTextField.getText]] for more information about rich text fields and\n   * their deprecation in PDF 2.0.\n   *\n   * @param text The text this field should contain.\n   */\n  PDFTextField.prototype.setText = function (text) {\n    assertOrUndefined(text, 'text', ['string']);\n    var maxLength = this.getMaxLength();\n    if (maxLength !== undefined && text && text.length > maxLength) {\n      throw new ExceededMaxLengthError(text.length, maxLength, this.getName());\n    }\n    this.markAsDirty();\n    this.disableRichFormatting();\n    if (text) {\n      this.acroField.setValue(PDFHexString.fromText(text));\n    } else {\n      this.acroField.removeValue();\n    }\n  };\n  /**\n   * Get the alignment for this text field. This value represents the\n   * justification of the text when it is displayed to the user in PDF readers.\n   * There are three possible alignments: left, center, and right. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * const alignment = textField.getAlignment()\n   * if (alignment === TextAlignment.Left) console.log('Text is left justified')\n   * if (alignment === TextAlignment.Center) console.log('Text is centered')\n   * if (alignment === TextAlignment.Right) console.log('Text is right justified')\n   * ```\n   * @returns The alignment of this text field.\n   */\n  PDFTextField.prototype.getAlignment = function () {\n    var quadding = this.acroField.getQuadding();\n    // prettier-ignore\n    return quadding === 0 ? TextAlignment.Left : quadding === 1 ? TextAlignment.Center : quadding === 2 ? TextAlignment.Right : TextAlignment.Left;\n  };\n  /**\n   * Set the alignment for this text field. This will determine the\n   * justification of the text when it is displayed to the user in PDF readers.\n   * There are three possible alignments: left, center, and right. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   *\n   * // Text will be left justified when displayed\n   * textField.setAlignment(TextAlignment.Left)\n   *\n   * // Text will be centered when displayed\n   * textField.setAlignment(TextAlignment.Center)\n   *\n   * // Text will be right justified when displayed\n   * textField.setAlignment(TextAlignment.Right)\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   * @param alignment The alignment for this text field.\n   */\n  PDFTextField.prototype.setAlignment = function (alignment) {\n    assertIsOneOf(alignment, 'alignment', TextAlignment);\n    this.markAsDirty();\n    this.acroField.setQuadding(alignment);\n  };\n  /**\n   * Get the maximum length of this field. This value represents the maximum\n   * number of characters that can be typed into this field by the user. If\n   * this field does not have a maximum length, `undefined` is returned.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * const maxLength = textField.getMaxLength()\n   * if (maxLength === undefined) console.log('No max length')\n   * else console.log(`Max length is ${maxLength}`)\n   * ```\n   * @returns The maximum number of characters allowed in this field, or\n   *          `undefined` if no limit exists.\n   */\n  PDFTextField.prototype.getMaxLength = function () {\n    return this.acroField.getMaxLength();\n  };\n  /**\n   * Set the maximum length of this field. This limits the number of characters\n   * that can be typed into this field by the user. This also limits the length\n   * of the string that can be passed to [[PDFTextField.setText]]. This limit\n   * can be removed by passing `undefined` as `maxLength`. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   *\n   * // Allow between 0 and 5 characters to be entered\n   * textField.setMaxLength(5)\n   *\n   * // Allow any number of characters to be entered\n   * textField.setMaxLength(undefined)\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   * @param maxLength The maximum number of characters allowed in this field, or\n   *                  `undefined` to remove the limit.\n   */\n  PDFTextField.prototype.setMaxLength = function (maxLength) {\n    assertRangeOrUndefined(maxLength, 'maxLength', 0, Number.MAX_SAFE_INTEGER);\n    this.markAsDirty();\n    if (maxLength === undefined) {\n      this.acroField.removeMaxLength();\n    } else {\n      var text = this.getText();\n      if (text && text.length > maxLength) {\n        throw new InvalidMaxLengthError(text.length, maxLength, this.getName());\n      }\n      this.acroField.setMaxLength(maxLength);\n    }\n  };\n  /**\n   * Remove the maximum length for this text field. This allows any number of\n   * characters to be typed into this field by the user. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.removeMaxLength()\n   * ```\n   * Calling this method is equivalent to passing `undefined` to\n   * [[PDFTextField.setMaxLength]].\n   */\n  PDFTextField.prototype.removeMaxLength = function () {\n    this.markAsDirty();\n    this.acroField.removeMaxLength();\n  };\n  /**\n   * Display an image inside the bounds of this text field's widgets. For example:\n   * ```js\n   * const pngImage = await pdfDoc.embedPng(...)\n   * const textField = form.getTextField('some.text.field')\n   * textField.setImage(pngImage)\n   * ```\n   * This will update the appearances streams for each of this text field's widgets.\n   * @param image The image that should be displayed.\n   */\n  PDFTextField.prototype.setImage = function (image) {\n    var fieldAlignment = this.getAlignment();\n    // prettier-ignore\n    var alignment = fieldAlignment === TextAlignment.Center ? ImageAlignment.Center : fieldAlignment === TextAlignment.Right ? ImageAlignment.Right : ImageAlignment.Left;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n      this.updateWidgetAppearances(widget, {\n        normal: streamRef\n      });\n    }\n    this.markAsClean();\n  };\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this text field. Font sizes\n   * may be integer or floating point numbers. Supplying a negative font size\n   * will cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.setFontSize(4)\n   * textField.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  PDFTextField.prototype.setFontSize = function (fontSize) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  };\n  /**\n   * Returns `true` if each line of text is shown on a new line when this\n   * field is displayed in a PDF reader. The alternative is that all lines of\n   * text are merged onto a single line when displayed. See\n   * [[PDFTextField.enableMultiline]] and [[PDFTextField.disableMultiline]].\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isMultiline()) console.log('Multiline is enabled')\n   * ```\n   * @returns Whether or not this is a multiline text field.\n   */\n  PDFTextField.prototype.isMultiline = function () {\n    return this.acroField.hasFlag(AcroTextFlags.Multiline);\n  };\n  /**\n   * Display each line of text on a new line when this field is displayed in a\n   * PDF reader. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableMultiline()\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  PDFTextField.prototype.enableMultiline = function () {\n    this.markAsDirty();\n    this.acroField.setFlagTo(AcroTextFlags.Multiline, true);\n  };\n  /**\n   * Display each line of text on the same line when this field is displayed\n   * in a PDF reader. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableMultiline()\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  PDFTextField.prototype.disableMultiline = function () {\n    this.markAsDirty();\n    this.acroField.setFlagTo(AcroTextFlags.Multiline, false);\n  };\n  /**\n   * Returns `true` if this is a password text field. This means that the field\n   * is intended for storing a secure password. See\n   * [[PDFTextField.enablePassword]] and [[PDFTextField.disablePassword]].\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isPassword()) console.log('Password is enabled')\n   * ```\n   * @returns Whether or not this is a password text field.\n   */\n  PDFTextField.prototype.isPassword = function () {\n    return this.acroField.hasFlag(AcroTextFlags.Password);\n  };\n  /**\n   * Indicate that this text field is intended for storing a secure password.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enablePassword()\n   * ```\n   * Values entered into password text fields should not be displayed on the\n   * screen by PDF readers. Most PDF readers will display the value as\n   * asterisks or bullets. PDF readers should never store values entered by the\n   * user into password text fields. Similarly, applications should not\n   * write data to a password text field.\n   *\n   * **Please note that this method does not cause entered values to be\n   * encrypted or secured in any way! It simply sets a flag that PDF software\n   * and readers can access to determine the _purpose_ of this field.**\n   */\n  PDFTextField.prototype.enablePassword = function () {\n    this.acroField.setFlagTo(AcroTextFlags.Password, true);\n  };\n  /**\n   * Indicate that this text field is **not** intended for storing a secure\n   * password. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disablePassword()\n   * ```\n   */\n  PDFTextField.prototype.disablePassword = function () {\n    this.acroField.setFlagTo(AcroTextFlags.Password, false);\n  };\n  /**\n   * Returns `true` if the contents of this text field represent a file path.\n   * See [[PDFTextField.enableFileSelection]] and\n   * [[PDFTextField.disableFileSelection]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isFileSelector()) console.log('Is a file selector')\n   * ```\n   * @returns Whether or not this field should contain file paths.\n   */\n  PDFTextField.prototype.isFileSelector = function () {\n    return this.acroField.hasFlag(AcroTextFlags.FileSelect);\n  };\n  /**\n   * Indicate that this text field is intended to store a file path. The\n   * contents of the file stored at that path should be submitted as the value\n   * of the field. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableFileSelection()\n   * ```\n   */\n  PDFTextField.prototype.enableFileSelection = function () {\n    this.acroField.setFlagTo(AcroTextFlags.FileSelect, true);\n  };\n  /**\n   * Indicate that this text field is **not** intended to store a file path.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableFileSelection()\n   * ```\n   */\n  PDFTextField.prototype.disableFileSelection = function () {\n    this.acroField.setFlagTo(AcroTextFlags.FileSelect, false);\n  };\n  /**\n   * Returns `true` if the text entered in this field should be spell checked\n   * by PDF readers. See [[PDFTextField.enableSpellChecking]] and\n   * [[PDFTextField.disableSpellChecking]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isSpellChecked()) console.log('Spell checking is enabled')\n   * ```\n   * @returns Whether or not this field should be spell checked.\n   */\n  PDFTextField.prototype.isSpellChecked = function () {\n    return !this.acroField.hasFlag(AcroTextFlags.DoNotSpellCheck);\n  };\n  /**\n   * Allow PDF readers to spell check the text entered in this field.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableSpellChecking()\n   * ```\n   */\n  PDFTextField.prototype.enableSpellChecking = function () {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotSpellCheck, false);\n  };\n  /**\n   * Do not allow PDF readers to spell check the text entered in this field.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableSpellChecking()\n   * ```\n   */\n  PDFTextField.prototype.disableSpellChecking = function () {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotSpellCheck, true);\n  };\n  /**\n   * Returns `true` if PDF readers should allow the user to scroll the text\n   * field when its contents do not fit within the field's view bounds. See\n   * [[PDFTextField.enableScrolling]] and [[PDFTextField.disableScrolling]].\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isScrollable()) console.log('Scrolling is enabled')\n   * ```\n   * @returns Whether or not the field is scrollable in PDF readers.\n   */\n  PDFTextField.prototype.isScrollable = function () {\n    return !this.acroField.hasFlag(AcroTextFlags.DoNotScroll);\n  };\n  /**\n   * Allow PDF readers to present a scroll bar to the user when the contents\n   * of this text field do not fit within its view bounds. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableScrolling()\n   * ```\n   * A horizontal scroll bar should be shown for singleline fields. A vertical\n   * scroll bar should be shown for multiline fields.\n   */\n  PDFTextField.prototype.enableScrolling = function () {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotScroll, false);\n  };\n  /**\n   * Do not allow PDF readers to present a scroll bar to the user when the\n   * contents of this text field do not fit within its view bounds. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableScrolling()\n   * ```\n   */\n  PDFTextField.prototype.disableScrolling = function () {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotScroll, true);\n  };\n  /**\n   * Returns `true` if this is a combed text field. This means that the field\n   * is split into `n` equal size cells with one character in each (where `n`\n   * is equal to the max length of the text field). The result is that all\n   * characters in this field are displayed an equal distance apart from one\n   * another. See [[PDFTextField.enableCombing]] and\n   * [[PDFTextField.disableCombing]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isCombed()) console.log('Combing is enabled')\n   * ```\n   * Note that in order for a text field to be combed, the following must be\n   * true (in addition to enabling combing):\n   * * It must not be a multiline field (see [[PDFTextField.isMultiline]])\n   * * It must not be a password field (see [[PDFTextField.isPassword]])\n   * * It must not be a file selector field (see [[PDFTextField.isFileSelector]])\n   * * It must have a max length defined (see [[PDFTextField.setMaxLength]])\n   * @returns Whether or not this field is combed.\n   */\n  PDFTextField.prototype.isCombed = function () {\n    return this.acroField.hasFlag(AcroTextFlags.Comb) && !this.isMultiline() && !this.isPassword() && !this.isFileSelector() && this.getMaxLength() !== undefined;\n  };\n  /**\n   * Split this field into `n` equal size cells with one character in each\n   * (where `n` is equal to the max length of the text field). This will cause\n   * all characters in the field to be displayed an equal distance apart from\n   * one another. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableCombing()\n   * ```\n   *\n   * In addition to calling this method, text fields must have a max length\n   * defined in order to be combed (see [[PDFTextField.setMaxLength]]).\n   *\n   * This method will also call the following three methods internally:\n   * * [[PDFTextField.disableMultiline]]\n   * * [[PDFTextField.disablePassword]]\n   * * [[PDFTextField.disableFileSelection]]\n   *\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  PDFTextField.prototype.enableCombing = function () {\n    if (this.getMaxLength() === undefined) {\n      var msg = \"PDFTextFields must have a max length in order to be combed\";\n      console.warn(msg);\n    }\n    this.markAsDirty();\n    this.disableMultiline();\n    this.disablePassword();\n    this.disableFileSelection();\n    this.acroField.setFlagTo(AcroTextFlags.Comb, true);\n  };\n  /**\n   * Turn off combing for this text field. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableCombing()\n   * ```\n   * See [[PDFTextField.isCombed]] and [[PDFTextField.enableCombing]] for more\n   * information about what combing is.\n   *\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  PDFTextField.prototype.disableCombing = function () {\n    this.markAsDirty();\n    this.acroField.setFlagTo(AcroTextFlags.Comb, false);\n  };\n  /**\n   * Returns `true` if this text field contains rich text. See\n   * [[PDFTextField.enableRichFormatting]] and\n   * [[PDFTextField.disableRichFormatting]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isRichFormatted()) console.log('Rich formatting enabled')\n   * ```\n   * @returns Whether or not this field contains rich text.\n   */\n  PDFTextField.prototype.isRichFormatted = function () {\n    return this.acroField.hasFlag(AcroTextFlags.RichText);\n  };\n  /**\n   * Indicate that this field contains XFA data - or rich text. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableRichFormatting()\n   * ```\n   * Note that `pdf-lib` does not support reading or writing rich text fields.\n   * Nor do most PDF readers and writers. Rich text fields are based on XFA\n   * (XML Forms Architecture). Relatively few PDFs use rich text fields or XFA.\n   * Unlike PDF itself, XFA is not an ISO standard. XFA has been deprecated in\n   * PDF 2.0:\n   * * https://en.wikipedia.org/wiki/XFA\n   * * http://blog.pdfshareforms.com/pdf-2-0-release-bid-farewell-xfa-forms/\n   */\n  PDFTextField.prototype.enableRichFormatting = function () {\n    this.acroField.setFlagTo(AcroTextFlags.RichText, true);\n  };\n  /**\n   * Indicate that this is a standard text field that does not XFA data (rich\n   * text). For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableRichFormatting()\n   * ```\n   */\n  PDFTextField.prototype.disableRichFormatting = function () {\n    this.acroField.setFlagTo(AcroTextFlags.RichText, false);\n  };\n  /**\n   * Show this text field on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const textField = form.createTextField('best.gundam')\n   * textField.setText('Exia')\n   *\n   * textField.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this text field.\n   * @param page The page to which this text field widget should be added.\n   * @param options The options to be used when adding this text field widget.\n   */\n  PDFTextField.prototype.addToPage = function (page, options) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n    if (!options) options = {};\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n    // Create a widget for this text field\n    var widget = this.createWidget({\n      x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n      y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n      width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n      height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n      rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n      hidden: options.hidden,\n      page: page.ref\n    });\n    var widgetRef = this.doc.context.register(widget.dict);\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n    // Set appearance streams for widget\n    var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  };\n  /**\n   * Returns `true` if this text field has been marked as dirty, or if any of\n   * this text field's widgets do not have an appearance stream. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this text field needs an appearance update.\n   */\n  PDFTextField.prototype.needsAppearancesUpdate = function () {\n    var _a;\n    if (this.isDirty()) return true;\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n    return false;\n  };\n  /**\n   * Update the appearance streams for each of this text field's widgets using\n   * the default appearance provider for text fields. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const textField = form.getTextField('some.text.field')\n   * textField.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  PDFTextField.prototype.defaultUpdateAppearances = function (font) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  };\n  /**\n   * Update the appearance streams for each of this text field's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for text fields will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const textField = form.getTextField('some.text.field')\n   * textField.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawTextField(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  PDFTextField.prototype.updateAppearances = function (font, provider) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n    var widgets = this.acroField.getWidgets();\n    for (var idx = 0, len = widgets.length; idx < len; idx++) {\n      var widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  };\n  PDFTextField.prototype.updateWidgetAppearance = function (widget, font, provider) {\n    var apProvider = provider !== null && provider !== void 0 ? provider : defaultTextFieldAppearanceProvider;\n    var appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  };\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getTextField]] method, which will create an\n   * > instance of [[PDFTextField]] for you.\n   *\n   * Create an instance of [[PDFTextField]] from an existing acroText and ref\n   *\n   * @param acroText The underlying `PDFAcroText` for this text field.\n   * @param ref The unique reference for this text field.\n   * @param doc The document to which this text field will belong.\n   */\n  PDFTextField.of = function (acroText, ref, doc) {\n    return new PDFTextField(acroText, ref, doc);\n  };\n  return PDFTextField;\n}(PDFField);\nexport default PDFTextField;","map":{"version":3,"names":["PDFPage","PDFFont","PDFField","assertFieldAppearanceOptions","normalizeAppearance","defaultTextFieldAppearanceProvider","rgb","degrees","RichTextFieldReadError","ExceededMaxLengthError","InvalidMaxLengthError","ImageAlignment","TextAlignment","PDFHexString","PDFStream","PDFAcroText","AcroTextFlags","assertIs","assertIsOneOf","assertOrUndefined","assertPositive","assertRangeOrUndefined","PDFTextField","_super","__extends","acroText","ref","doc","_this","call","acroField","prototype","getText","value","getValue","isRichFormatted","getName","decodeText","setText","text","maxLength","getMaxLength","undefined","length","markAsDirty","disableRichFormatting","setValue","fromText","removeValue","getAlignment","quadding","getQuadding","Left","Center","Right","setAlignment","alignment","setQuadding","setMaxLength","Number","MAX_SAFE_INTEGER","removeMaxLength","setImage","image","fieldAlignment","widgets","getWidgets","idx","len","widget","streamRef","createImageAppearanceStream","updateWidgetAppearances","normal","markAsClean","setFontSize","fontSize","isMultiline","hasFlag","Multiline","enableMultiline","setFlagTo","disableMultiline","isPassword","Password","enablePassword","disablePassword","isFileSelector","FileSelect","enableFileSelection","disableFileSelection","isSpellChecked","DoNotSpellCheck","enableSpellChecking","disableSpellChecking","isScrollable","DoNotScroll","enableScrolling","disableScrolling","isCombed","Comb","enableCombing","msg","console","warn","disableCombing","RichText","enableRichFormatting","addToPage","page","options","textColor","backgroundColor","borderColor","borderWidth","createWidget","x","_a","y","_b","width","_c","height","_d","_e","rotate","_f","hidden","widgetRef","context","register","dict","addWidget","font","_g","getForm","getDefaultFont","updateWidgetAppearance","node","addAnnot","needsAppearancesUpdate","isDirty","hasAppearances","getAppearances","defaultUpdateAppearances","updateAppearances","provider","Function","apProvider","appearances","updateWidgetAppearanceWithFont","of"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\api\\form\\PDFTextField.ts"],"sourcesContent":["import PDFDocument from 'src/api/PDFDocument';\nimport PDFPage from 'src/api/PDFPage';\nimport PDFFont from 'src/api/PDFFont';\nimport PDFImage from 'src/api/PDFImage';\nimport PDFField, {\n  FieldAppearanceOptions,\n  assertFieldAppearanceOptions,\n} from 'src/api/form/PDFField';\nimport {\n  AppearanceProviderFor,\n  normalizeAppearance,\n  defaultTextFieldAppearanceProvider,\n} from 'src/api/form/appearances';\nimport { rgb } from 'src/api/colors';\nimport { degrees } from 'src/api/rotations';\nimport {\n  RichTextFieldReadError,\n  ExceededMaxLengthError,\n  InvalidMaxLengthError,\n} from 'src/api/errors';\nimport { ImageAlignment } from 'src/api/image/alignment';\nimport { TextAlignment } from 'src/api/text/alignment';\n\nimport {\n  PDFHexString,\n  PDFRef,\n  PDFStream,\n  PDFAcroText,\n  AcroTextFlags,\n  PDFWidgetAnnotation,\n} from 'src/core';\nimport {\n  assertIs,\n  assertIsOneOf,\n  assertOrUndefined,\n  assertPositive,\n  assertRangeOrUndefined,\n} from 'src/utils';\n\n/**\n * Represents a text field of a [[PDFForm]].\n *\n * [[PDFTextField]] fields are boxes that display text entered by the user. The\n * purpose of a text field is to enable users to enter text or view text values\n * in the document prefilled by software. Users can click on a text field and\n * input text via their keyboard. Some text fields allow multiple lines of text\n * to be entered (see [[PDFTextField.isMultiline]]).\n */\nexport default class PDFTextField extends PDFField {\n  /**\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\n   * > consider using the [[PDFForm.getTextField]] method, which will create an\n   * > instance of [[PDFTextField]] for you.\n   *\n   * Create an instance of [[PDFTextField]] from an existing acroText and ref\n   *\n   * @param acroText The underlying `PDFAcroText` for this text field.\n   * @param ref The unique reference for this text field.\n   * @param doc The document to which this text field will belong.\n   */\n  static of = (acroText: PDFAcroText, ref: PDFRef, doc: PDFDocument) =>\n    new PDFTextField(acroText, ref, doc);\n\n  /** The low-level PDFAcroText wrapped by this text field. */\n  readonly acroField: PDFAcroText;\n\n  private constructor(acroText: PDFAcroText, ref: PDFRef, doc: PDFDocument) {\n    super(acroText, ref, doc);\n\n    assertIs(acroText, 'acroText', [[PDFAcroText, 'PDFAcroText']]);\n\n    this.acroField = acroText;\n  }\n\n  /**\n   * Get the text that this field contains. This text is visible to users who\n   * view this field in a PDF reader.\n   *\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * const text = textField.getText()\n   * console.log('Text field contents:', text)\n   * ```\n   *\n   * Note that if this text field contains no underlying value, `undefined`\n   * will be returned. Text fields may also contain an underlying value that\n   * is simply an empty string (`''`). This detail is largely irrelevant for\n   * most applications. In general, you'll want to treat both cases the same\n   * way and simply consider the text field to be empty. In either case, the\n   * text field will appear empty to users when viewed in a PDF reader.\n   *\n   * An error will be thrown if this is a rich text field. `pdf-lib` does not\n   * support reading rich text fields. Nor do most PDF readers and writers.\n   * Rich text fields are based on XFA (XML Forms Architecture). Relatively few\n   * PDFs use rich text fields or XFA. Unlike PDF itself, XFA is not an ISO\n   * standard. XFA has been deprecated in PDF 2.0:\n   * * https://en.wikipedia.org/wiki/XFA\n   * * http://blog.pdfshareforms.com/pdf-2-0-release-bid-farewell-xfa-forms/\n   *\n   * @returns The text contained in this text field.\n   */\n  getText(): string | undefined {\n    const value = this.acroField.getValue();\n    if (!value && this.isRichFormatted()) {\n      throw new RichTextFieldReadError(this.getName());\n    }\n    return value?.decodeText();\n  }\n\n  /**\n   * Set the text for this field. This operation is analogous to a human user\n   * clicking on the text field in a PDF reader and typing in text via their\n   * keyboard. This method will update the underlying state of the text field\n   * to indicate what text has been set. PDF libraries and readers will be able\n   * to extract these values from the saved document and determine what text\n   * was set.\n   *\n   * For example:\n   * ```js\n   * const textField = form.getTextField('best.superhero.text.field')\n   * textField.setText('One Punch Man')\n   * ```\n   *\n   * This method will mark this text field as dirty, causing its appearance\n   * streams to be updated when either [[PDFDocument.save]] or\n   * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n   * display the text this field contains inside the widgets of this text\n   * field.\n   *\n   * **IMPORTANT:** The default font used to update appearance streams is\n   * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n   * that encoding errors will be thrown if this field contains text outside\n   * the WinAnsi character set (the latin alphabet).\n   *\n   * Embedding a custom font and passing it to\n   * [[PDFForm.updateFieldAppearances]] or [[PDFTextField.updateAppearances]]\n   * allows you to generate appearance streams with characters outside the\n   * latin alphabet (assuming the custom font supports them).\n   *\n   * If this is a rich text field, it will be converted to a standard text\n   * field in order to set the text. `pdf-lib` does not support writing rich\n   * text strings. Nor do most PDF readers and writers. See\n   * [[PDFTextField.getText]] for more information about rich text fields and\n   * their deprecation in PDF 2.0.\n   *\n   * @param text The text this field should contain.\n   */\n  setText(text: string | undefined) {\n    assertOrUndefined(text, 'text', ['string']);\n\n    const maxLength = this.getMaxLength();\n    if (maxLength !== undefined && text && text.length > maxLength) {\n      throw new ExceededMaxLengthError(text.length, maxLength, this.getName());\n    }\n\n    this.markAsDirty();\n    this.disableRichFormatting();\n\n    if (text) {\n      this.acroField.setValue(PDFHexString.fromText(text));\n    } else {\n      this.acroField.removeValue();\n    }\n  }\n\n  /**\n   * Get the alignment for this text field. This value represents the\n   * justification of the text when it is displayed to the user in PDF readers.\n   * There are three possible alignments: left, center, and right. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * const alignment = textField.getAlignment()\n   * if (alignment === TextAlignment.Left) console.log('Text is left justified')\n   * if (alignment === TextAlignment.Center) console.log('Text is centered')\n   * if (alignment === TextAlignment.Right) console.log('Text is right justified')\n   * ```\n   * @returns The alignment of this text field.\n   */\n  getAlignment(): TextAlignment {\n    const quadding = this.acroField.getQuadding();\n\n    // prettier-ignore\n    return (\n        quadding === 0 ? TextAlignment.Left\n      : quadding === 1 ? TextAlignment.Center\n      : quadding === 2 ? TextAlignment.Right\n      : TextAlignment.Left\n    );\n  }\n\n  /**\n   * Set the alignment for this text field. This will determine the\n   * justification of the text when it is displayed to the user in PDF readers.\n   * There are three possible alignments: left, center, and right. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   *\n   * // Text will be left justified when displayed\n   * textField.setAlignment(TextAlignment.Left)\n   *\n   * // Text will be centered when displayed\n   * textField.setAlignment(TextAlignment.Center)\n   *\n   * // Text will be right justified when displayed\n   * textField.setAlignment(TextAlignment.Right)\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   * @param alignment The alignment for this text field.\n   */\n  setAlignment(alignment: TextAlignment) {\n    assertIsOneOf(alignment, 'alignment', TextAlignment);\n    this.markAsDirty();\n    this.acroField.setQuadding(alignment);\n  }\n\n  /**\n   * Get the maximum length of this field. This value represents the maximum\n   * number of characters that can be typed into this field by the user. If\n   * this field does not have a maximum length, `undefined` is returned.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * const maxLength = textField.getMaxLength()\n   * if (maxLength === undefined) console.log('No max length')\n   * else console.log(`Max length is ${maxLength}`)\n   * ```\n   * @returns The maximum number of characters allowed in this field, or\n   *          `undefined` if no limit exists.\n   */\n  getMaxLength(): number | undefined {\n    return this.acroField.getMaxLength();\n  }\n\n  /**\n   * Set the maximum length of this field. This limits the number of characters\n   * that can be typed into this field by the user. This also limits the length\n   * of the string that can be passed to [[PDFTextField.setText]]. This limit\n   * can be removed by passing `undefined` as `maxLength`. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   *\n   * // Allow between 0 and 5 characters to be entered\n   * textField.setMaxLength(5)\n   *\n   * // Allow any number of characters to be entered\n   * textField.setMaxLength(undefined)\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   * @param maxLength The maximum number of characters allowed in this field, or\n   *                  `undefined` to remove the limit.\n   */\n  setMaxLength(maxLength?: number) {\n    assertRangeOrUndefined(maxLength, 'maxLength', 0, Number.MAX_SAFE_INTEGER);\n\n    this.markAsDirty();\n\n    if (maxLength === undefined) {\n      this.acroField.removeMaxLength();\n    } else {\n      const text = this.getText();\n      if (text && text.length > maxLength) {\n        throw new InvalidMaxLengthError(text.length, maxLength, this.getName());\n      }\n      this.acroField.setMaxLength(maxLength);\n    }\n  }\n\n  /**\n   * Remove the maximum length for this text field. This allows any number of\n   * characters to be typed into this field by the user. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.removeMaxLength()\n   * ```\n   * Calling this method is equivalent to passing `undefined` to\n   * [[PDFTextField.setMaxLength]].\n   */\n  removeMaxLength() {\n    this.markAsDirty();\n    this.acroField.removeMaxLength();\n  }\n\n  /**\n   * Display an image inside the bounds of this text field's widgets. For example:\n   * ```js\n   * const pngImage = await pdfDoc.embedPng(...)\n   * const textField = form.getTextField('some.text.field')\n   * textField.setImage(pngImage)\n   * ```\n   * This will update the appearances streams for each of this text field's widgets.\n   * @param image The image that should be displayed.\n   */\n  setImage(image: PDFImage) {\n    const fieldAlignment = this.getAlignment();\n\n    // prettier-ignore\n    const alignment = \n        fieldAlignment === TextAlignment.Center ? ImageAlignment.Center\n      : fieldAlignment === TextAlignment.Right ? ImageAlignment.Right\n      : ImageAlignment.Left;\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const streamRef = this.createImageAppearanceStream(\n        widget,\n        image,\n        alignment,\n      );\n      this.updateWidgetAppearances(widget, { normal: streamRef });\n    }\n\n    this.markAsClean();\n  }\n\n  /**\n   * Set the font size for this field. Larger font sizes will result in larger\n   * text being displayed when PDF readers render this text field. Font sizes\n   * may be integer or floating point numbers. Supplying a negative font size\n   * will cause this method to throw an error.\n   *\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.setFontSize(4)\n   * textField.setFontSize(15.7)\n   * ```\n   *\n   * > This method depends upon the existence of a default appearance\n   * > (`/DA`) string. If this field does not have a default appearance string,\n   * > or that string does not contain a font size (via the `Tf` operator),\n   * > then this method will throw an error.\n   *\n   * @param fontSize The font size to be used when rendering text in this field.\n   */\n  setFontSize(fontSize: number) {\n    assertPositive(fontSize, 'fontSize');\n    this.acroField.setFontSize(fontSize);\n    this.markAsDirty();\n  }\n\n  /**\n   * Returns `true` if each line of text is shown on a new line when this\n   * field is displayed in a PDF reader. The alternative is that all lines of\n   * text are merged onto a single line when displayed. See\n   * [[PDFTextField.enableMultiline]] and [[PDFTextField.disableMultiline]].\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isMultiline()) console.log('Multiline is enabled')\n   * ```\n   * @returns Whether or not this is a multiline text field.\n   */\n  isMultiline(): boolean {\n    return this.acroField.hasFlag(AcroTextFlags.Multiline);\n  }\n\n  /**\n   * Display each line of text on a new line when this field is displayed in a\n   * PDF reader. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableMultiline()\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  enableMultiline() {\n    this.markAsDirty();\n    this.acroField.setFlagTo(AcroTextFlags.Multiline, true);\n  }\n\n  /**\n   * Display each line of text on the same line when this field is displayed\n   * in a PDF reader. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableMultiline()\n   * ```\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  disableMultiline() {\n    this.markAsDirty();\n    this.acroField.setFlagTo(AcroTextFlags.Multiline, false);\n  }\n\n  /**\n   * Returns `true` if this is a password text field. This means that the field\n   * is intended for storing a secure password. See\n   * [[PDFTextField.enablePassword]] and [[PDFTextField.disablePassword]].\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isPassword()) console.log('Password is enabled')\n   * ```\n   * @returns Whether or not this is a password text field.\n   */\n  isPassword(): boolean {\n    return this.acroField.hasFlag(AcroTextFlags.Password);\n  }\n\n  /**\n   * Indicate that this text field is intended for storing a secure password.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enablePassword()\n   * ```\n   * Values entered into password text fields should not be displayed on the\n   * screen by PDF readers. Most PDF readers will display the value as\n   * asterisks or bullets. PDF readers should never store values entered by the\n   * user into password text fields. Similarly, applications should not\n   * write data to a password text field.\n   *\n   * **Please note that this method does not cause entered values to be\n   * encrypted or secured in any way! It simply sets a flag that PDF software\n   * and readers can access to determine the _purpose_ of this field.**\n   */\n  enablePassword() {\n    this.acroField.setFlagTo(AcroTextFlags.Password, true);\n  }\n\n  /**\n   * Indicate that this text field is **not** intended for storing a secure\n   * password. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disablePassword()\n   * ```\n   */\n  disablePassword() {\n    this.acroField.setFlagTo(AcroTextFlags.Password, false);\n  }\n\n  /**\n   * Returns `true` if the contents of this text field represent a file path.\n   * See [[PDFTextField.enableFileSelection]] and\n   * [[PDFTextField.disableFileSelection]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isFileSelector()) console.log('Is a file selector')\n   * ```\n   * @returns Whether or not this field should contain file paths.\n   */\n  isFileSelector(): boolean {\n    return this.acroField.hasFlag(AcroTextFlags.FileSelect);\n  }\n\n  /**\n   * Indicate that this text field is intended to store a file path. The\n   * contents of the file stored at that path should be submitted as the value\n   * of the field. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableFileSelection()\n   * ```\n   */\n  enableFileSelection() {\n    this.acroField.setFlagTo(AcroTextFlags.FileSelect, true);\n  }\n\n  /**\n   * Indicate that this text field is **not** intended to store a file path.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableFileSelection()\n   * ```\n   */\n  disableFileSelection() {\n    this.acroField.setFlagTo(AcroTextFlags.FileSelect, false);\n  }\n\n  /**\n   * Returns `true` if the text entered in this field should be spell checked\n   * by PDF readers. See [[PDFTextField.enableSpellChecking]] and\n   * [[PDFTextField.disableSpellChecking]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isSpellChecked()) console.log('Spell checking is enabled')\n   * ```\n   * @returns Whether or not this field should be spell checked.\n   */\n  isSpellChecked(): boolean {\n    return !this.acroField.hasFlag(AcroTextFlags.DoNotSpellCheck);\n  }\n\n  /**\n   * Allow PDF readers to spell check the text entered in this field.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableSpellChecking()\n   * ```\n   */\n  enableSpellChecking() {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotSpellCheck, false);\n  }\n\n  /**\n   * Do not allow PDF readers to spell check the text entered in this field.\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableSpellChecking()\n   * ```\n   */\n  disableSpellChecking() {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotSpellCheck, true);\n  }\n\n  /**\n   * Returns `true` if PDF readers should allow the user to scroll the text\n   * field when its contents do not fit within the field's view bounds. See\n   * [[PDFTextField.enableScrolling]] and [[PDFTextField.disableScrolling]].\n   * For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isScrollable()) console.log('Scrolling is enabled')\n   * ```\n   * @returns Whether or not the field is scrollable in PDF readers.\n   */\n  isScrollable(): boolean {\n    return !this.acroField.hasFlag(AcroTextFlags.DoNotScroll);\n  }\n\n  /**\n   * Allow PDF readers to present a scroll bar to the user when the contents\n   * of this text field do not fit within its view bounds. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableScrolling()\n   * ```\n   * A horizontal scroll bar should be shown for singleline fields. A vertical\n   * scroll bar should be shown for multiline fields.\n   */\n  enableScrolling() {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotScroll, false);\n  }\n\n  /**\n   * Do not allow PDF readers to present a scroll bar to the user when the\n   * contents of this text field do not fit within its view bounds. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableScrolling()\n   * ```\n   */\n  disableScrolling() {\n    this.acroField.setFlagTo(AcroTextFlags.DoNotScroll, true);\n  }\n\n  /**\n   * Returns `true` if this is a combed text field. This means that the field\n   * is split into `n` equal size cells with one character in each (where `n`\n   * is equal to the max length of the text field). The result is that all\n   * characters in this field are displayed an equal distance apart from one\n   * another. See [[PDFTextField.enableCombing]] and\n   * [[PDFTextField.disableCombing]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isCombed()) console.log('Combing is enabled')\n   * ```\n   * Note that in order for a text field to be combed, the following must be\n   * true (in addition to enabling combing):\n   * * It must not be a multiline field (see [[PDFTextField.isMultiline]])\n   * * It must not be a password field (see [[PDFTextField.isPassword]])\n   * * It must not be a file selector field (see [[PDFTextField.isFileSelector]])\n   * * It must have a max length defined (see [[PDFTextField.setMaxLength]])\n   * @returns Whether or not this field is combed.\n   */\n  isCombed(): boolean {\n    return (\n      this.acroField.hasFlag(AcroTextFlags.Comb) &&\n      !this.isMultiline() &&\n      !this.isPassword() &&\n      !this.isFileSelector() &&\n      this.getMaxLength() !== undefined\n    );\n  }\n\n  /**\n   * Split this field into `n` equal size cells with one character in each\n   * (where `n` is equal to the max length of the text field). This will cause\n   * all characters in the field to be displayed an equal distance apart from\n   * one another. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableCombing()\n   * ```\n   *\n   * In addition to calling this method, text fields must have a max length\n   * defined in order to be combed (see [[PDFTextField.setMaxLength]]).\n   *\n   * This method will also call the following three methods internally:\n   * * [[PDFTextField.disableMultiline]]\n   * * [[PDFTextField.disablePassword]]\n   * * [[PDFTextField.disableFileSelection]]\n   *\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  enableCombing() {\n    if (this.getMaxLength() === undefined) {\n      const msg = `PDFTextFields must have a max length in order to be combed`;\n      console.warn(msg);\n    }\n\n    this.markAsDirty();\n\n    this.disableMultiline();\n    this.disablePassword();\n    this.disableFileSelection();\n\n    this.acroField.setFlagTo(AcroTextFlags.Comb, true);\n  }\n\n  /**\n   * Turn off combing for this text field. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableCombing()\n   * ```\n   * See [[PDFTextField.isCombed]] and [[PDFTextField.enableCombing]] for more\n   * information about what combing is.\n   *\n   * This method will mark this text field as dirty. See\n   * [[PDFTextField.setText]] for more details about what this means.\n   */\n  disableCombing() {\n    this.markAsDirty();\n    this.acroField.setFlagTo(AcroTextFlags.Comb, false);\n  }\n\n  /**\n   * Returns `true` if this text field contains rich text. See\n   * [[PDFTextField.enableRichFormatting]] and\n   * [[PDFTextField.disableRichFormatting]]. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.isRichFormatted()) console.log('Rich formatting enabled')\n   * ```\n   * @returns Whether or not this field contains rich text.\n   */\n  isRichFormatted(): boolean {\n    return this.acroField.hasFlag(AcroTextFlags.RichText);\n  }\n\n  /**\n   * Indicate that this field contains XFA data - or rich text. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.enableRichFormatting()\n   * ```\n   * Note that `pdf-lib` does not support reading or writing rich text fields.\n   * Nor do most PDF readers and writers. Rich text fields are based on XFA\n   * (XML Forms Architecture). Relatively few PDFs use rich text fields or XFA.\n   * Unlike PDF itself, XFA is not an ISO standard. XFA has been deprecated in\n   * PDF 2.0:\n   * * https://en.wikipedia.org/wiki/XFA\n   * * http://blog.pdfshareforms.com/pdf-2-0-release-bid-farewell-xfa-forms/\n   */\n  enableRichFormatting() {\n    this.acroField.setFlagTo(AcroTextFlags.RichText, true);\n  }\n\n  /**\n   * Indicate that this is a standard text field that does not XFA data (rich\n   * text). For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * textField.disableRichFormatting()\n   * ```\n   */\n  disableRichFormatting() {\n    this.acroField.setFlagTo(AcroTextFlags.RichText, false);\n  }\n\n  /**\n   * Show this text field on the specified page. For example:\n   * ```js\n   * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n   * const page = pdfDoc.addPage()\n   *\n   * const form = pdfDoc.getForm()\n   * const textField = form.createTextField('best.gundam')\n   * textField.setText('Exia')\n   *\n   * textField.addToPage(page, {\n   *   x: 50,\n   *   y: 75,\n   *   width: 200,\n   *   height: 100,\n   *   textColor: rgb(1, 0, 0),\n   *   backgroundColor: rgb(0, 1, 0),\n   *   borderColor: rgb(0, 0, 1),\n   *   borderWidth: 2,\n   *   rotate: degrees(90),\n   *   font: ubuntuFont,\n   * })\n   * ```\n   * This will create a new widget for this text field.\n   * @param page The page to which this text field widget should be added.\n   * @param options The options to be used when adding this text field widget.\n   */\n  addToPage(page: PDFPage, options?: FieldAppearanceOptions) {\n    assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n    assertFieldAppearanceOptions(options);\n\n    if (!options) options = {};\n\n    if (!('textColor' in options)) options.textColor = rgb(0, 0, 0);\n    if (!('backgroundColor' in options)) options.backgroundColor = rgb(1, 1, 1);\n    if (!('borderColor' in options)) options.borderColor = rgb(0, 0, 0);\n    if (!('borderWidth' in options)) options.borderWidth = 1;\n\n    // Create a widget for this text field\n    const widget = this.createWidget({\n      x: options.x ?? 0,\n      y: options.y ?? 0,\n      width: options.width ?? 200,\n      height: options.height ?? 50,\n      textColor: options.textColor,\n      backgroundColor: options.backgroundColor,\n      borderColor: options.borderColor,\n      borderWidth: options.borderWidth ?? 0,\n      rotate: options.rotate ?? degrees(0),\n      hidden: options.hidden,\n      page: page.ref,\n    });\n    const widgetRef = this.doc.context.register(widget.dict);\n\n    // Add widget to this field\n    this.acroField.addWidget(widgetRef);\n\n    // Set appearance streams for widget\n    const font = options.font ?? this.doc.getForm().getDefaultFont();\n    this.updateWidgetAppearance(widget, font);\n\n    // Add widget to the given page\n    page.node.addAnnot(widgetRef);\n  }\n\n  /**\n   * Returns `true` if this text field has been marked as dirty, or if any of\n   * this text field's widgets do not have an appearance stream. For example:\n   * ```js\n   * const textField = form.getTextField('some.text.field')\n   * if (textField.needsAppearancesUpdate()) console.log('Needs update')\n   * ```\n   * @returns Whether or not this text field needs an appearance update.\n   */\n  needsAppearancesUpdate(): boolean {\n    if (this.isDirty()) return true;\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      const hasAppearances =\n        widget.getAppearances()?.normal instanceof PDFStream;\n      if (!hasAppearances) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Update the appearance streams for each of this text field's widgets using\n   * the default appearance provider for text fields. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const textField = form.getTextField('some.text.field')\n   * textField.defaultUpdateAppearances(helvetica)\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   */\n  defaultUpdateAppearances(font: PDFFont) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    this.updateAppearances(font);\n  }\n\n  /**\n   * Update the appearance streams for each of this text field's widgets using\n   * the given appearance provider. If no `provider` is passed, the default\n   * appearance provider for text fields will be used. For example:\n   * ```js\n   * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n   * const textField = form.getTextField('some.text.field')\n   * textField.updateAppearances(helvetica, (field, widget, font) => {\n   *   ...\n   *   return drawTextField(...)\n   * })\n   * ```\n   * @param font The font to be used for creating the appearance streams.\n   * @param provider Optionally, the appearance provider to be used for\n   *                 generating the contents of the appearance streams.\n   */\n  updateAppearances(\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFTextField>,\n  ) {\n    assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n    assertOrUndefined(provider, 'provider', [Function]);\n\n    const widgets = this.acroField.getWidgets();\n    for (let idx = 0, len = widgets.length; idx < len; idx++) {\n      const widget = widgets[idx];\n      this.updateWidgetAppearance(widget, font, provider);\n    }\n    this.markAsClean();\n  }\n\n  private updateWidgetAppearance(\n    widget: PDFWidgetAnnotation,\n    font: PDFFont,\n    provider?: AppearanceProviderFor<PDFTextField>,\n  ) {\n    const apProvider = provider ?? defaultTextFieldAppearanceProvider;\n    const appearances = normalizeAppearance(apProvider(this, widget, font));\n    this.updateWidgetAppearanceWithFont(widget, font, appearances);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}