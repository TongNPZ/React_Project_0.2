{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, toHexStringOfMinLength, utf16Decode, utf16Encode, pdfDocEncodingDecode, parseDate, hasUtf16BOM } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFHexString = /** @class */function (_super) {\n  __extends(PDFHexString, _super);\n  function PDFHexString(value) {\n    var _this = _super.call(this) || this;\n    _this.value = value;\n    return _this;\n  }\n  PDFHexString.prototype.asBytes = function () {\n    // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n    var hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n    var hexLength = hex.length;\n    var bytes = new Uint8Array(hex.length / 2);\n    var hexOffset = 0;\n    var bytesOffset = 0;\n    // Interpret each pair of hex digits as a single byte\n    while (hexOffset < hexLength) {\n      var byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n      bytes[bytesOffset] = byte;\n      hexOffset += 2;\n      bytesOffset += 1;\n    }\n    return bytes;\n  };\n  PDFHexString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  };\n  PDFHexString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  };\n  PDFHexString.prototype.asString = function () {\n    return this.value;\n  };\n  PDFHexString.prototype.clone = function () {\n    return PDFHexString.of(this.value);\n  };\n  PDFHexString.prototype.toString = function () {\n    return \"<\" + this.value + \">\";\n  };\n  PDFHexString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n  PDFHexString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes.LessThan;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.GreaterThan;\n    return this.value.length + 2;\n  };\n  PDFHexString.of = function (value) {\n    return new PDFHexString(value);\n  };\n  PDFHexString.fromText = function (value) {\n    var encoded = utf16Encode(value);\n    var hex = '';\n    for (var idx = 0, len = encoded.length; idx < len; idx++) {\n      hex += toHexStringOfMinLength(encoded[idx], 4);\n    }\n    return new PDFHexString(hex);\n  };\n  return PDFHexString;\n}(PDFObject);\nexport default PDFHexString;","map":{"version":3,"names":["PDFObject","CharCodes","copyStringIntoBuffer","toHexStringOfMinLength","utf16Decode","utf16Encode","pdfDocEncodingDecode","parseDate","hasUtf16BOM","InvalidPDFDateStringError","PDFHexString","_super","__extends","value","_this","call","prototype","asBytes","hex","length","hexLength","bytes","Uint8Array","hexOffset","bytesOffset","byte","parseInt","substring","decodeText","decodeDate","text","date","asString","clone","of","toString","sizeInBytes","copyBytesInto","buffer","offset","LessThan","GreaterThan","fromText","encoded","idx","len"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\core\\objects\\PDFHexString.ts"],"sourcesContent":["import PDFObject from 'src/core/objects/PDFObject';\r\nimport CharCodes from 'src/core/syntax/CharCodes';\r\nimport {\r\n  copyStringIntoBuffer,\r\n  toHexStringOfMinLength,\r\n  utf16Decode,\r\n  utf16Encode,\r\n  pdfDocEncodingDecode,\r\n  parseDate,\r\n  hasUtf16BOM,\r\n} from 'src/utils';\r\nimport { InvalidPDFDateStringError } from 'src/core/errors';\r\n\r\nclass PDFHexString extends PDFObject {\r\n  static of = (value: string) => new PDFHexString(value);\r\n\r\n  static fromText = (value: string) => {\r\n    const encoded = utf16Encode(value);\r\n\r\n    let hex = '';\r\n    for (let idx = 0, len = encoded.length; idx < len; idx++) {\r\n      hex += toHexStringOfMinLength(encoded[idx], 4);\r\n    }\r\n\r\n    return new PDFHexString(hex);\r\n  };\r\n\r\n  private readonly value: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  asBytes(): Uint8Array {\r\n    // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\r\n    const hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\r\n    const hexLength = hex.length;\r\n\r\n    const bytes = new Uint8Array(hex.length / 2);\r\n\r\n    let hexOffset = 0;\r\n    let bytesOffset = 0;\r\n\r\n    // Interpret each pair of hex digits as a single byte\r\n    while (hexOffset < hexLength) {\r\n      const byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\r\n      bytes[bytesOffset] = byte;\r\n\r\n      hexOffset += 2;\r\n      bytesOffset += 1;\r\n    }\r\n\r\n    return bytes;\r\n  }\r\n\r\n  decodeText(): string {\r\n    const bytes = this.asBytes();\r\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\r\n    return pdfDocEncodingDecode(bytes);\r\n  }\r\n\r\n  decodeDate(): Date {\r\n    const text = this.decodeText();\r\n    const date = parseDate(text);\r\n    if (!date) throw new InvalidPDFDateStringError(text);\r\n    return date;\r\n  }\r\n\r\n  asString(): string {\r\n    return this.value;\r\n  }\r\n\r\n  clone(): PDFHexString {\r\n    return PDFHexString.of(this.value);\r\n  }\r\n\r\n  toString(): string {\r\n    return `<${this.value}>`;\r\n  }\r\n\r\n  sizeInBytes(): number {\r\n    return this.value.length + 2;\r\n  }\r\n\r\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\r\n    buffer[offset++] = CharCodes.LessThan;\r\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\r\n    buffer[offset++] = CharCodes.GreaterThan;\r\n    return this.value.length + 2;\r\n  }\r\n}\r\n\r\nexport default PDFHexString;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}