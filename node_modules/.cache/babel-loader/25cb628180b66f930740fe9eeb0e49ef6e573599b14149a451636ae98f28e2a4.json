{"ast":null,"code":"import { isNil, last, dropLast as dropLast$2, adjust, compose } from '@react-pdf/fns';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport _createForOfIteratorHelperLoose from '@babel/runtime/helpers/createForOfIteratorHelperLoose';\nimport unicode from 'unicode-properties';\nimport hyphen from 'hyphen';\nimport pattern from 'hyphen/patterns/en-us';\n\n/**\n * Create attributed string from text fragments\n *\n * @param  {Array}  fragments\n * @return {Object} attributed string\n */\nvar fromFragments = function fromFragments(fragments) {\n  var offset = 0;\n  var string = '';\n  var runs = [];\n  fragments.forEach(function (fragment) {\n    string += fragment.string;\n    runs.push({\n      start: offset,\n      end: offset + fragment.string.length,\n      attributes: fragment.attributes || {}\n    });\n    offset += fragment.string.length;\n  });\n  return {\n    string: string,\n    runs: runs\n  };\n};\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param  {String} word\n * @return {Array} same word\n */\nvar defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n  return [word];\n};\n\n/**\n * Wrap words of attribute string\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string including syllables\n */\nvar wrapWords = function wrapWords(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return function (attributedString) {\n    var _engines$wordHyphenat, _engines;\n    var syllables = [];\n    var fragments = [];\n    var hyphenateWord = options.hyphenationCallback || ((_engines$wordHyphenat = (_engines = engines).wordHyphenation) === null || _engines$wordHyphenat === void 0 ? void 0 : _engines$wordHyphenat.call(_engines, options)) || defaultHyphenationEngine;\n    for (var i = 0; i < attributedString.runs.length; i += 1) {\n      var string = '';\n      var run = attributedString.runs[i];\n      var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n      for (var j = 0; j < words.length; j += 1) {\n        var word = words[j];\n        var parts = hyphenateWord(word);\n        syllables.push.apply(syllables, parts);\n        string += parts.join('');\n      }\n      fragments.push({\n        string: string,\n        attributes: run.attributes\n      });\n    }\n    return _extends({}, fromFragments(fragments), {\n      syllables: syllables\n    });\n  };\n};\n\n/**\n * Clone rect\n *\n * @param  {Object}  rect\n * @return {Object} cloned rect\n */\nvar copy = function copy(rect) {\n  return Object.assign({}, rect);\n};\nvar partition = function partition(rect, height) {\n  var a = Object.assign({}, rect, {\n    height: height\n  });\n  var b = Object.assign({}, rect, {\n    y: rect.y + height,\n    height: rect.height - height\n  });\n  return [a, b];\n};\n\n/**\n * Crop upper section of rect\n *\n * @param  {Object}  rect\n * @return {Object} cropped rect\n */\nvar crop = function crop(height, rect) {\n  var _partition = partition(rect, height),\n    result = _partition[1];\n  return result;\n};\n\n/**\n * Get paragraph block height\n *\n * @param  {Object}  paragraph block\n * @return {number} paragraph block height\n */\nvar height$2 = function height(paragraph) {\n  return paragraph.reduce(function (acc, block) {\n    return acc + block.box.height;\n  }, 0);\n};\n\n/**\n * Calculate run scale\n *\n * @param  {Object}  run\n * @return {number} scale\n */\nvar calculateScale = function calculateScale(run) {\n  var _attributes$font;\n  var attributes = run.attributes || {};\n  var fontSize = attributes.fontSize || 12;\n  var unitsPerEm = (_attributes$font = attributes.font) === null || _attributes$font === void 0 ? void 0 : _attributes$font.unitsPerEm;\n  return unitsPerEm ? fontSize / unitsPerEm : 0;\n};\n\n/**\n * Get run scale\n *\n * @param  {Object}  run\n * @return {number} scale\n */\nvar scale = function scale(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.scale) || calculateScale(run);\n};\n\n/**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param  {number}  index\n * @param  {Object}  run\n * @return {number} ligature offset\n */\nvar offset = function offset(index, run) {\n  if (!run) return 0;\n  var glyphIndices = run.glyphIndices || [];\n  var value = glyphIndices[index];\n  return glyphIndices.slice(0, index).filter(function (i) {\n    return i === value;\n  }).length;\n};\n\n/**\n * Get run font\n *\n * @param  {Object}  run\n * @return {Object} font\n */\nvar getFont = function getFont(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.font) || null;\n};\n\n/**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param  {number}  start code point index\n * @param  {number}  end code point index\n * @param  {Object}  font to generate new glyph\n * @param  {Object} glyph to be sliced\n * @return {Array} sliced glyph parts\n */\nvar slice$2 = function slice(start, end, font, glyph) {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  var codePoints = glyph.codePoints.slice(start, end);\n  var string = String.fromCodePoint.apply(String, codePoints);\n  return font ? font.layout(string).glyphs : [glyph];\n};\n\n/**\n * Return glyph index at string index, if glyph indices present.\n * Otherwise return string index\n *\n * @param  {number}  string index\n * @param  {Object}  run\n * @return {number}  glyph index\n */\nvar glyphIndexAt = function glyphIndexAt(index, run) {\n  var _run$glyphIndices;\n  var result = run === null || run === void 0 ? void 0 : (_run$glyphIndices = run.glyphIndices) === null || _run$glyphIndices === void 0 ? void 0 : _run$glyphIndices[index];\n  return isNil(result) ? index : result;\n};\n\n/**\n * Returns new array starting with zero, and keeping same relation between consecutive values\n *\n * @param  {Array[number]}  list\n * @return {boolean} normalized array\n */\nvar normalize = function normalize(array) {\n  var head = array[0];\n  return array.map(function (value) {\n    return value - head;\n  });\n};\n\n/**\n * Slice run between glyph indices range\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} sliced run\n */\nvar slice$1 = function slice(start, end, run) {\n  var _run$glyphs, _run$glyphs2;\n  var runScale = scale(run);\n  var font = getFont(run);\n\n  // Get glyph start and end indices\n  var startIndex = glyphIndexAt(start, run);\n  var endIndex = glyphIndexAt(end, run);\n\n  // Get start and end glyph\n  var startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];\n  var endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex];\n\n  // Get start ligature chunks (if any)\n  var startOffset = offset(start, run);\n  var startGlyphs = startOffset > 0 ? slice$2(startOffset, Infinity, font, startGlyph) : [];\n\n  // Get end ligature chunks (if any)\n  var endOffset = offset(end, run);\n  var endGlyphs = slice$2(0, endOffset, font, endGlyph);\n\n  // Compute new glyphs\n  var sliceStart = startIndex + Math.min(1, startOffset);\n  var glyphs = (run.glyphs || []).slice(sliceStart, endIndex);\n\n  // Compute new positions\n  var glyphPosition = function glyphPosition(g) {\n    return {\n      xAdvance: g.advanceWidth * runScale\n    };\n  };\n  var startPositions = startGlyphs.map(glyphPosition);\n  var positions = (run.positions || []).slice(sliceStart, endIndex);\n  var endPositions = endGlyphs.map(glyphPosition);\n  return Object.assign({}, run, {\n    start: run.start + start,\n    end: Math.min(run.end, run.start + end),\n    glyphIndices: normalize((run.glyphIndices || []).slice(start, end)),\n    glyphs: [startGlyphs, glyphs, endGlyphs].flat(),\n    positions: [startPositions, positions, endPositions].flat()\n  });\n};\n\n/**\n * Get run index that contains passed index\n *\n * @param  {number}  char index\n * @param  {Array}  runs array\n * @return {Array} run index\n */\nvar runIndexAt$1 = function runIndexAt(n, runs) {\n  if (!runs) return -1;\n  return runs.findIndex(function (run) {\n    return run.start <= n && n < run.end;\n  });\n};\n\n/**\n * Filter runs contained between start and end\n *\n * @param  {number}  start\n * @param  {number}  end\n * @param  {Array}  runs\n * @return {boolean} filtered runs\n */\nvar filter = function filter(start, end, runs) {\n  var startIndex = runIndexAt$1(start, runs);\n  var endIndex = Math.max(runIndexAt$1(end - 1, runs), startIndex);\n  return runs.slice(startIndex, endIndex + 1);\n};\n\n/**\n * Subtract scalar to run\n *\n * @param  {number}  scalar\n * @param  {Object}  run\n * @return {Object} subtracted run\n */\nvar subtract = function subtract(n, run) {\n  var start = run.start - n;\n  var end = run.end - n;\n  return Object.assign({}, run, {\n    start: start,\n    end: end\n  });\n};\n\n/**\n * Slice array of runs\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Array}  runs\n * @return {Array} sliced runs\n */\nvar sliceRuns = function sliceRuns(start, end, runs) {\n  var sliceFirstRun = function sliceFirstRun(a) {\n    return slice$1(start - a.start, end - a.start, a);\n  };\n  var sliceLastRun = function sliceLastRun(a) {\n    return slice$1(0, end - a.start, a);\n  };\n  return runs.map(function (run, i) {\n    var result = run;\n    var isFirst = i === 0;\n    var isLast = !isFirst && i === runs.length - 1;\n    if (isFirst) result = sliceFirstRun(run);\n    if (isLast) result = sliceLastRun(run);\n    return subtract(start, result);\n  });\n};\n\n/**\n * Slice attributed string between two indices\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {Object} attributedString\n */\nvar slice = function slice(start, end, attributedString) {\n  if (attributedString.string.length === 0) return attributedString;\n  var string = attributedString.string.slice(start, end);\n  var filteredRuns = filter(start, end, attributedString.runs);\n  var slicedRuns = sliceRuns(start, end, filteredRuns);\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: slicedRuns\n  });\n};\nvar findCharIndex = function findCharIndex(string) {\n  return string.search(/\\S/g);\n};\nvar findLastCharIndex = function findLastCharIndex(string) {\n  var match = string.match(/\\S/g);\n  return match ? string.lastIndexOf(match[match.length - 1]) : -1;\n};\n\n/**\n * Removes (strips) whitespace from both ends of the attributted string.\n *\n * @param  {Object}  attributedString\n * @return {Object} attributedString\n */\nvar trim = function trim(attributedString) {\n  var start = findCharIndex(attributedString.string);\n  var end = findLastCharIndex(attributedString.string);\n  return slice(start, end + 1, attributedString);\n};\n\n/**\n * Returns empty run\n *\n * @return {Object} empty run\n */\nvar empty$1 = function empty() {\n  return {\n    start: 0,\n    end: 0,\n    glyphIndices: [],\n    glyphs: [],\n    positions: [],\n    attributes: {}\n  };\n};\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\n/**\n * Append glyph indices with given length\n *\n * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]\n *\n * @param  {number}  length\n * @param  {Array}  glyph indices\n * @return {Array}  extended glyph indices\n */\nvar appendIndices = function appendIndices(length, indices) {\n  var lastIndex = last(indices);\n  var value = isNil(lastIndex) ? 0 : lastIndex + 1;\n  var newIndices = Array(length).fill(value);\n  return indices.concat(newIndices);\n};\n\n/**\n * Get glyph for a given code point\n *\n * @param  {number}  codePoint\n * @param  {Object}  font\n * @return {Object}  glyph\n * */\nvar fromCodePoint = function fromCodePoint(value, font) {\n  return font && value ? font.glyphForCodePoint(value) : null;\n};\n\n/**\n * Append glyph to run\n *\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object} run with glyph\n */\nvar appendGlyph = function appendGlyph(glyph, run) {\n  var _glyph$codePoints;\n  var glyphLength = ((_glyph$codePoints = glyph.codePoints) === null || _glyph$codePoints === void 0 ? void 0 : _glyph$codePoints.length) || 0;\n  var end = run.end + glyphLength;\n  var glyphs = run.glyphs.concat(glyph);\n  var glyphIndices = appendIndices(glyphLength, run.glyphIndices);\n  if (!run.positions) return Object.assign({}, run, {\n    end: end,\n    glyphs: glyphs,\n    glyphIndices: glyphIndices\n  });\n  var positions = run.positions.concat({\n    xAdvance: glyph.advanceWidth * scale(run)\n  });\n  return Object.assign({}, run, {\n    end: end,\n    glyphs: glyphs,\n    glyphIndices: glyphIndices,\n    positions: positions\n  });\n};\n\n/**\n * Append glyph or code point to run\n *\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object} run with glyph\n */\nvar append$1 = function append(value, run) {\n  if (!value) return run;\n  var font = getFont(run);\n  var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return appendGlyph(glyph, run);\n};\n\n/**\n * Get string from array of code points\n *\n * @param {Array} code points\n * @return {String} string\n */\nvar stringFromCodePoints = function stringFromCodePoints(codePoints) {\n  return String.fromCodePoint.apply(String, codePoints);\n};\n\n/**\n * Append glyph into last run of attributed string\n *\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar append = function append(glyph, attributedString) {\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  var codePointsString = stringFromCodePoints(codePoints);\n  var string = attributedString.string + codePointsString;\n  var firstRuns = attributedString.runs.slice(0, -1);\n  var lastRun = last(attributedString.runs) || empty$1();\n  var runs = firstRuns.concat(append$1(glyph, lastRun));\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: runs\n  });\n};\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param  {number}  font\n * @return {Object} ellipsis codepoint\n */\nvar getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n  var _font$encode = font.encode(ELLIPSIS_STRING),\n    codePoints = _font$encode[0];\n  return parseInt(codePoints[0], 16);\n};\n\n/**\n * Trucante block with ellipsis\n *\n * @param  {number}  lines quantity\n * @param  {Object}  paragraph block\n * @return {Object} sliced paragraph block\n */\nvar truncate = function truncate(block) {\n  var _last, _last2, _last2$attributes;\n  var runs = ((_last = last(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n  var font = (_last2 = last(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n  if (font) {\n    var _Object$assign;\n    var index = block.length - 1;\n    var codePoint = getEllipsisCodePoint(font);\n    var glyph = font.glyphForCodePoint(codePoint);\n    var lastBlock = append(glyph, trim(block[index]));\n    return Object.assign([], block, (_Object$assign = {}, _Object$assign[index] = lastBlock, _Object$assign));\n  }\n  return block;\n};\n\n/**\n * Omit attribute from run\n *\n * @param  {Object}  run\n * @return {Object} run without ommited attribute\n */\nvar omit = function omit(value, run) {\n  var attributes = Object.assign({}, run.attributes);\n  delete attributes[value];\n  return Object.assign({}, run, {\n    attributes: attributes\n  });\n};\n\n/**\n * Get run ascent\n *\n * @param  {Object}  run\n * @return {boolean} ascent\n */\nvar ascent$1 = function ascent(run) {\n  var _run$attributes, _run$attributes$attac, _run$attributes2, _run$attributes2$font;\n  var attachmentHeight = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$attac = _run$attributes.attachment) === null || _run$attributes$attac === void 0 ? void 0 : _run$attributes$attac.height) || 0;\n  var fontAscent = ((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : (_run$attributes2$font = _run$attributes2.font) === null || _run$attributes2$font === void 0 ? void 0 : _run$attributes2$font.ascent) || 0;\n  return Math.max(attachmentHeight, fontAscent * scale(run));\n};\n\n/**\n * Get run descent\n *\n * @param  {Object}  run\n * @return {number} descent\n */\nvar descent = function descent(run) {\n  var _run$attributes, _run$attributes$font;\n  var fontDescent = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.descent) || 0;\n  return scale(run) * fontDescent;\n};\n\n/**\n * Get run lineGap\n *\n * @param  {Object}  run\n * @return {number} lineGap\n */\nvar lineGap = function lineGap(run) {\n  var _run$attributes, _run$attributes$font;\n  return (((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.lineGap) || 0) * scale(run);\n};\n\n/**\n * Get run height\n *\n * @param  {Object}  run\n * @return {number} height\n */\nvar height$1 = function height(run) {\n  var _run$attributes;\n  var lineHeight = (_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.lineHeight;\n  return lineHeight || lineGap(run) + ascent$1(run) - descent(run);\n};\n\n/**\n * Returns attributed string height\n *\n * @param {Object} attributed string\n * @return {number} height\n */\nvar height = function height(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return Math.max(acc, height$1(run));\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\n\n/**\n * Checks if two rects intersect each other\n *\n * @param {Rect} a\n * @param {Rect} b\n * @returns {Boolean} rects intersects\n */\nvar intersects = function intersects(a, b) {\n  var x = Math.max(a.x, b.x);\n  var num1 = Math.min(a.x + a.width, b.x + b.width);\n  var y = Math.max(a.y, b.y);\n  var num2 = Math.min(a.y + a.height, b.y + b.height);\n  return num1 >= x && num2 >= y;\n};\nvar _excluded = [\"excludeRects\"];\nvar getLineFragment = function getLineFragment(lineRect, excludeRect) {\n  if (!intersects(excludeRect, lineRect)) return [lineRect];\n  var eStart = excludeRect.x;\n  var eEnd = excludeRect.x + excludeRect.width;\n  var lStart = lineRect.x;\n  var lEnd = lineRect.x + lineRect.width;\n  var a = Object.assign({}, lineRect, {\n    width: eStart - lStart\n  });\n  var b = Object.assign({}, lineRect, {\n    x: eEnd,\n    width: lEnd - eEnd\n  });\n  return [a, b].filter(function (r) {\n    return r.width > 0;\n  });\n};\nvar getLineFragments = function getLineFragments(rect, excludeRects) {\n  var fragments = [rect];\n  var _loop = function _loop() {\n    var excludeRect = excludeRects[i];\n    fragments = fragments.reduce(function (acc, fragment) {\n      var pieces = getLineFragment(fragment, excludeRect);\n      return acc.concat(pieces);\n    }, []);\n  };\n  for (var i = 0; i < excludeRects.length; i += 1) {\n    _loop();\n  }\n  return fragments;\n};\nvar generateLineRects = function generateLineRects(container, height) {\n  var excludeRects = container.excludeRects,\n    rect = _objectWithoutPropertiesLoose(container, _excluded);\n  if (!excludeRects) return [rect];\n  var lineRects = [];\n  var maxY = Math.max.apply(Math, excludeRects.map(function (r) {\n    return r.y + r.height;\n  }));\n  var currentRect = rect;\n  while (currentRect.y < maxY) {\n    var _partition = partition(currentRect, height),\n      lineRect = _partition[0],\n      rest = _partition[1];\n    var lineRectFragments = getLineFragments(lineRect, excludeRects);\n    currentRect = rest;\n    lineRects.push.apply(lineRects, lineRectFragments);\n  }\n  return [].concat(lineRects, [currentRect]);\n};\nvar ATTACHMENT_CODE$1 = \"\\uFFFC\"; // 65532\n\n/**\n * Remove attachment attribute if no char present\n *\n * @param  {Object} attributed string\n * @return {Object} attributed string\n */\nvar purgeAttachments = function purgeAttachments(attributedString) {\n  var shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE$1);\n  if (!shouldPurge) return attributedString;\n  var runs = attributedString.runs.map(function (run) {\n    return omit('attachment', run);\n  });\n  return Object.assign({}, attributedString, {\n    runs: runs\n  });\n};\n\n/**\n * Layout paragraphs inside rectangle\n *\n * @param  {Object} rect\n * @param  {Array} attributed strings\n * @return {Object} layout blocks\n */\nvar layoutLines = function layoutLines(rects, lines, indent) {\n  var rect = rects.shift();\n  var currentY = rect.y;\n  return lines.map(function (line, i) {\n    var _line$runs, _line$runs$;\n    var lineIndent = i === 0 ? indent : 0;\n    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    var height$1 = Math.max(height(line), style.lineHeight);\n    if (currentY + height$1 > rect.y + rect.height && rects.length > 0) {\n      rect = rects.shift();\n      currentY = rect.y;\n    }\n    var newLine = Object.assign({}, line);\n    delete newLine.syllables;\n    newLine.box = {\n      x: rect.x + lineIndent,\n      y: currentY,\n      width: rect.width - lineIndent,\n      height: height$1\n    };\n    currentY += height$1;\n    return purgeAttachments(newLine);\n  });\n};\n\n/**\n * Performs line breaking and layout\n *\n * @param  {Object} engines\n * @param  {Object}  layout options\n * @param  {Object} rect\n * @param  {Object} attributed string\n * @return {Object} layout block\n */\nvar layoutParagraph = function layoutParagraph(engines, options) {\n  return function (container, paragraph) {\n    var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;\n    var height$1 = height(paragraph);\n    var indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;\n    var rects = generateLineRects(container, height$1);\n    var availableWidths = rects.map(function (r) {\n      return r.width;\n    });\n    availableWidths[0] -= indent;\n    var lines = engines.linebreaker(options)(paragraph, availableWidths);\n    return layoutLines(rects, lines, indent);\n  };\n};\n\n/**\n * Slice block at given height\n *\n * @param  {number}  height\n * @param  {Object}  paragraph block\n * @return {number} sliced paragraph block\n */\nvar sliceAtHeight = function sliceAtHeight(height, block) {\n  var newBlock = [];\n  var counter = 0;\n  for (var i = 0; i < block.length; i += 1) {\n    var line = block[i];\n    counter += line.box.height;\n    if (counter < height) {\n      newBlock.push(line);\n    } else {\n      break;\n    }\n  }\n  return newBlock;\n};\n\n/**\n * Layout paragraphs inside container until it does not\n * fit anymore, performing line wrapping in the process.\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  container rect\n * @param  {Object}  attributed strings (paragraphs)\n * @return {Array} paragraph blocks\n */\nvar typesetter = function typesetter(engines, options, container) {\n  return function (attributedStrings) {\n    var blocks = [];\n    var paragraphs = [].concat(attributedStrings);\n    var layoutBlock = layoutParagraph(engines, options);\n    var maxLines = isNil(container.maxLines) ? Infinity : container.maxLines;\n    var truncateEllipsis = container.truncateMode === 'ellipsis';\n    var linesCount = maxLines;\n    var paragraphRect = copy(container);\n    var nextParagraph = paragraphs.shift();\n    while (linesCount > 0 && nextParagraph) {\n      var block = layoutBlock(paragraphRect, nextParagraph);\n      var slicedBlock = block.slice(0, linesCount);\n      var linesHeight = height$2(slicedBlock);\n      var shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;\n      linesCount -= slicedBlock.length;\n      if (paragraphRect.height >= linesHeight) {\n        blocks.push(shouldTruncate ? truncate(slicedBlock) : slicedBlock);\n        paragraphRect = crop(linesHeight, paragraphRect);\n        nextParagraph = paragraphs.shift();\n      } else {\n        blocks.push(truncate(sliceAtHeight(paragraphRect.height, slicedBlock)));\n        break;\n      }\n    }\n    return blocks;\n  };\n};\nvar DUMMY_CODEPOINT = 123;\n\n/**\n * Resolve string indices based on glyphs code points\n *\n * @param  {Array}  glyphs\n * @return {Array} glyph indices\n */\nvar resolve = function resolve(glyphs) {\n  if (glyphs === void 0) {\n    glyphs = [];\n  }\n  return glyphs.reduce(function (acc, glyph) {\n    var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [DUMMY_CODEPOINT];\n    if (acc.length === 0) return codePoints.map(function () {\n      return 0;\n    });\n    var last = acc[acc.length - 1];\n    var next = codePoints.map(function () {\n      return last + 1;\n    });\n    return [].concat(acc, next);\n  }, []);\n};\nvar getCharacterSpacing = function getCharacterSpacing(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.characterSpacing) || 0;\n};\n\n/**\n * Scale run positions\n *\n * @param  {Object}  run\n * @param  {Array}  positions\n * @return {Array} scaled positions\n */\nvar scalePositions = function scalePositions(run, positions) {\n  var runScale = scale(run);\n  var characterSpacing = getCharacterSpacing(run);\n  return positions.map(function (position, i) {\n    var isLast = i === positions.length;\n    var xSpacing = isLast ? 0 : characterSpacing;\n    return Object.assign({}, position, {\n      xAdvance: position.xAdvance * runScale + xSpacing,\n      yAdvance: position.yAdvance * runScale,\n      xOffset: position.xOffset * runScale,\n      yOffset: position.yOffset * runScale\n    });\n  });\n};\n\n/**\n * Create glyph run\n *\n * @param  {String}  string\n * @param  {Object}  run\n * @return {Object}  glyph run\n */\nvar layoutRun = function layoutRun(string) {\n  return function (run) {\n    var start = run.start,\n      end = run.end,\n      _run$attributes2 = run.attributes,\n      attributes = _run$attributes2 === void 0 ? {} : _run$attributes2;\n    var font = attributes.font;\n    if (!font) return _extends({}, run, {\n      glyphs: [],\n      glyphIndices: [],\n      positions: []\n    });\n    var runString = string.slice(start, end);\n    var glyphRun = font.layout(runString);\n    var positions = scalePositions(run, glyphRun.positions);\n    var glyphIndices = resolve(glyphRun.glyphs);\n    return _extends({}, run, {\n      positions: positions,\n      glyphIndices: glyphIndices,\n      glyphs: glyphRun.glyphs\n    });\n  };\n};\n\n/**\n * Generate glyphs for single attributed string\n *\n * @param  {Object}  layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings\n * @return {Array} attributed string with glyphs\n */\nvar generateGlyphs = function generateGlyphs() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(layoutRun(attributedString.string));\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\n\n/**\n * Resolves yOffset for run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\nvar resolveRunYOffset = function resolveRunYOffset(run) {\n  var _run$attributes, _run$attributes$font, _run$attributes2;\n  if (!run.positions) return run;\n  var unitsPerEm = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.unitsPerEm) || 0;\n  var yOffset = (((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : _run$attributes2.yOffset) || 0) * unitsPerEm;\n  var positions = run.positions.map(function (p) {\n    return Object.assign({}, p, {\n      yOffset: yOffset\n    });\n  });\n  return Object.assign({}, run, {\n    positions: positions\n  });\n};\n\n/**\n * Resolves yOffset for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\nvar resolveYOffset = function resolveYOffset() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(resolveRunYOffset);\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\n\n/**\n * Sort runs in ascending order\n *\n * @param  {Array}  runs\n * @return {Array} sorted runs\n */\nvar sort = function sort(runs) {\n  return runs.sort(function (a, b) {\n    return a.start - b.start || a.end - b.end;\n  });\n};\n\n/**\n * Is run empty (start === end)\n *\n * @param  {Object}  run\n * @return {Object} is run empty\n */\nvar isEmpty = function isEmpty(run) {\n  return run.start === run.end;\n};\nvar sortPoints = function sortPoints(a, b) {\n  return a[1] - b[1] || a[3] - b[3];\n};\nvar generatePoints = function generatePoints(runs) {\n  var result = runs.reduce(function (acc, run, i) {\n    return acc.concat([['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]]);\n  }, []);\n  return result.sort(sortPoints);\n};\nvar mergeRuns = function mergeRuns(runs) {\n  return runs.reduce(function (acc, run) {\n    var attributes = Object.assign({}, acc.attributes, run.attributes);\n    return Object.assign({}, run, {\n      attributes: attributes\n    });\n  }, {});\n};\nvar groupEmptyRuns = function groupEmptyRuns(runs) {\n  var groups = runs.reduce(function (acc, run) {\n    if (!acc[run.start]) acc[run.start] = [];\n    acc[run.start].push(run);\n    return acc;\n  }, {});\n  return Object.values(groups);\n};\nvar flattenEmptyRuns = function flattenEmptyRuns(runs) {\n  return groupEmptyRuns(runs).map(mergeRuns);\n};\nvar flattenRegularRuns = function flattenRegularRuns(runs) {\n  var res = [];\n  var points = generatePoints(runs);\n  var start = -1;\n  var attrs = {};\n  var stack = [];\n  for (var i = 0; i < points.length; i += 1) {\n    var _points$i = points[i],\n      type = _points$i[0],\n      offset = _points$i[1],\n      attributes = _points$i[2];\n    if (start !== -1 && start < offset) {\n      res.push({\n        start: start,\n        end: offset,\n        attributes: attrs\n      });\n    }\n    if (type === 'start') {\n      stack.push(attributes);\n      attrs = Object.assign({}, attrs, attributes);\n    } else {\n      attrs = {};\n      for (var j = 0; j < stack.length; j += 1) {\n        if (stack[j] === attributes) {\n          // eslint-disable-next-line no-plusplus\n          stack.splice(j--, 1);\n        } else {\n          attrs = Object.assign({}, attrs, stack[j]);\n        }\n      }\n    }\n    start = offset;\n  }\n  return res;\n};\n\n/**\n * Flatten many runs\n *\n * @param  {Array}  runs\n * @return {Array} flatten runs\n */\nvar flatten = function flatten(runs) {\n  if (runs === void 0) {\n    runs = [];\n  }\n  var emptyRuns = flattenEmptyRuns(runs.filter(function (run) {\n    return isEmpty(run);\n  }));\n  var regularRuns = flattenRegularRuns(runs.filter(function (run) {\n    return !isEmpty(run);\n  }));\n  return sort(emptyRuns.concat(regularRuns));\n};\n\n/**\n * Returns empty attributed string\n *\n * @return {Object} empty attributed string\n */\nvar empty = function empty() {\n  return {\n    string: '',\n    runs: []\n  };\n};\nvar omitFont = function omitFont(attributedString) {\n  var runs = attributedString.runs.map(function (run) {\n    return omit('font', run);\n  });\n  return Object.assign({}, attributedString, {\n    runs: runs\n  });\n};\n\n/**\n * Performs font substitution and script itemization on attributed string\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} processed attributed string\n */\nvar preprocessRuns = function preprocessRuns(engines, options) {\n  return function (attributedString) {\n    if (isNil(attributedString)) return empty();\n    var string = attributedString.string;\n    var fontSubstitution = engines.fontSubstitution,\n      scriptItemizer = engines.scriptItemizer;\n    var _omitFont = omitFont(attributedString),\n      omittedFontRuns = _omitFont.runs;\n    var _fontSubstitution = fontSubstitution(options)(attributedString),\n      substitutedRuns = _fontSubstitution.runs;\n    var _scriptItemizer = scriptItemizer(options)(attributedString),\n      itemizationRuns = _scriptItemizer.runs;\n    var runs = substitutedRuns.concat(itemizationRuns).concat(omittedFontRuns);\n    return {\n      string: string,\n      runs: flatten(runs)\n    };\n  };\n};\n\n/**\n * Get attributed string start value\n *\n * @param  {Object}  attributed string\n * @return {number} start\n */\nvar start = function start(attributedString) {\n  var runs = attributedString.runs;\n  return runs.length === 0 ? 0 : runs[0].start;\n};\n\n/**\n * Get attributed string end value\n *\n * @param  {Object}  attributed string\n * @return {number} end\n */\nvar end = function end(attributedString) {\n  var runs = attributedString.runs;\n  return runs.length === 0 ? 0 : last(runs).end;\n};\n\n/**\n * Get attributed string length\n *\n * @param  {Object}  glyph string\n * @return {number} end\n */\nvar length$1 = function length(attributedString) {\n  return end(attributedString) - start(attributedString);\n};\n\n/**\n * Breaks attributed string into paragraphs\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Array} attributed string array\n */\nvar splitParagraphs = function splitParagraphs() {\n  return function (attributedString) {\n    var res = [];\n    var start = 0;\n    var breakPoint = attributedString.string.indexOf('\\n') + 1;\n    while (breakPoint > 0) {\n      res.push(slice(start, breakPoint, attributedString));\n      start = breakPoint;\n      breakPoint = attributedString.string.indexOf('\\n', breakPoint) + 1;\n    }\n    if (start === 0) {\n      res.push(attributedString);\n    } else if (start < attributedString.string.length) {\n      res.push(slice(start, length$1(attributedString), attributedString));\n    }\n    return res;\n  };\n};\n\n/**\n * Return positions advance width\n *\n * @param  {Object}  positions\n * @return {number} advance width\n */\nvar advanceWidth$2 = function advanceWidth(positions) {\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Return run advance width\n *\n * @param  {Object}  run\n * @return {number} advance width\n */\nvar advanceWidth$1 = function advanceWidth(run) {\n  return advanceWidth$2(run.positions || []);\n};\n\n/**\n * Returns attributed string advancewidth\n *\n * @param {Object} attributed string\n * @return {number} advance width\n */\nvar advanceWidth = function advanceWidth(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return acc + advanceWidth$1(run);\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\nvar WHITE_SPACES_CODE = 32;\n\n/**\n * Check if glyph is white space\n *\n * @param  {Object}  glyph\n * @return {Boolean}  is white space\n * */\nvar isWhiteSpace = function isWhiteSpace(glyph) {\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  return codePoints.includes(WHITE_SPACES_CODE);\n};\n\n/**\n * Get white space leading positions\n *\n * @param  {Object}  run\n * @return {Array} white space leading positions\n */\nvar leadingPositions = function leadingPositions(run) {\n  var glyphs = run.glyphs || [];\n  var positions = run.positions || [];\n  var leadingWhitespaces = glyphs.findIndex(function (g) {\n    return !isWhiteSpace(g);\n  });\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run leading white space offset\n *\n * @param  {Object}  run\n * @return {number} leading white space offset\n */\nvar leadingOffset$1 = function leadingOffset(run) {\n  var positions = leadingPositions(run);\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Get attributed string leading white space offset\n *\n * @param  {Object}  attributed string\n * @return {number} leading white space offset\n */\nvar leadingOffset = function leadingOffset(attributedString) {\n  var runs = attributedString.runs || [];\n  return leadingOffset$1(runs[0]);\n};\nvar reverse = function reverse(array) {\n  return [].concat(array).reverse();\n};\n\n/**\n * Get white space trailing positions\n *\n * @param  {Object}  run\n * @return {Array} white space trailing positions\n */\nvar trailingPositions = function trailingPositions(run) {\n  var glyphs = reverse(run.glyphs || []);\n  var positions = reverse(run.positions || []);\n  var leadingWhitespaces = glyphs.findIndex(function (g) {\n    return !isWhiteSpace(g);\n  });\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run trailing white space offset\n *\n * @param  {Object}  run\n * @return {number} trailing white space offset\n */\nvar trailingOffset$1 = function trailingOffset(run) {\n  var positions = trailingPositions(run);\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Get attributed string trailing white space offset\n *\n * @param  {Object}  attributed string\n * @return {number} trailing white space offset\n */\nvar trailingOffset = function trailingOffset(attributedString) {\n  var runs = attributedString.runs || [];\n  return trailingOffset$1(last(runs));\n};\n\n/**\n * Drop last char of run\n *\n * @param  {Object}  run\n * @return {boolean} run without last char\n */\nvar dropLast$1 = function dropLast(run) {\n  return slice$1(0, run.end - run.start - 1, run);\n};\n\n/**\n * Drop last glyph\n *\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar dropLast = function dropLast(attributeString) {\n  var string = dropLast$2(attributeString.string);\n  var runs = adjust(-1, dropLast$1, attributeString.runs);\n  return Object.assign({}, attributeString, {\n    string: string,\n    runs: runs\n  });\n};\nvar ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n\n/**\n * Remove new line char at the end of line if present\n *\n * @param  {Object}  line\n * @return {Object} line\n */\nvar removeNewLine = function removeNewLine(line) {\n  return last(line.string) === '\\n' ? dropLast(line) : line;\n};\nvar getOverflowLeft = function getOverflowLeft(line) {\n  return leadingOffset(line) + (line.overflowLeft || 0);\n};\nvar getOverflowRight = function getOverflowRight(line) {\n  return trailingOffset(line) + (line.overflowRight || 0);\n};\n\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param  {Object}  line\n * @return {Object} line\n */\nvar adjustOverflow = function adjustOverflow(line) {\n  var overflowLeft = getOverflowLeft(line);\n  var overflowRight = getOverflowRight(line);\n  var x = line.box.x - overflowLeft;\n  var width = line.box.width + overflowLeft + overflowRight;\n  var box = Object.assign({}, line.box, {\n    x: x,\n    width: width\n  });\n  return Object.assign({}, line, {\n    box: box,\n    overflowLeft: overflowLeft,\n    overflowRight: overflowRight\n  });\n};\n\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {string}  text align\n * @param  {Object}  line\n * @return {Object} line\n */\nvar justifyLine$1 = function justifyLine(engines, options, align) {\n  return function (line) {\n    var lineWidth = advanceWidth(line);\n    var alignFactor = ALIGNMENT_FACTORS[align] || 0;\n    var remainingWidth = Math.max(0, line.box.width - lineWidth);\n    var shouldJustify = align === 'justify' || lineWidth > line.box.width;\n    var x = line.box.x + remainingWidth * alignFactor;\n    var box = Object.assign({}, line.box, {\n      x: x\n    });\n    var newLine = Object.assign({}, line, {\n      box: box\n    });\n    return shouldJustify ? engines.justification(options)(newLine) : newLine;\n  };\n};\nvar finalizeLine = function finalizeLine(line) {\n  var lineAscent = 0;\n  var lineDescent = 0;\n  var lineHeight = 0;\n  var lineXAdvance = 0;\n  var runs = line.runs.map(function (run) {\n    var height = height$1(run);\n    var ascent = ascent$1(run);\n    var descent$1 = descent(run);\n    var xAdvance = advanceWidth$1(run);\n    lineHeight = Math.max(lineHeight, height);\n    lineAscent = Math.max(lineAscent, ascent);\n    lineDescent = Math.max(lineDescent, descent$1);\n    lineXAdvance += xAdvance;\n    return Object.assign({}, run, {\n      height: height,\n      ascent: ascent,\n      descent: descent$1,\n      xAdvance: xAdvance\n    });\n  });\n  return Object.assign({}, line, {\n    runs: runs,\n    height: lineHeight,\n    ascent: lineAscent,\n    descent: lineDescent,\n    xAdvance: lineXAdvance\n  });\n};\n\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  line\n * @param  {number}  line index\n * @param  {Array}  total lines\n * @return {Object} line\n */\nvar finalizeBlock = function finalizeBlock(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  return function (line, i, lines) {\n    var _line$runs, _line$runs$;\n    var isLastFragment = i === lines.length - 1;\n    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    var align = isLastFragment ? style.alignLastLine : style.align;\n    return compose(finalizeLine, engines.textDecoration(options), justifyLine$1(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Array}  line blocks\n * @return {Array} line blocks\n */\nvar finalizeFragments = function finalizeFragments(engines, options) {\n  return function (blocks) {\n    var blockFinalizer = finalizeBlock(engines, options);\n    return blocks.map(function (block) {\n      return block.map(blockFinalizer);\n    });\n  };\n};\nvar ATTACHMENT_CODE = 0xfffc; // 65532\n\nvar isReplaceGlyph = function isReplaceGlyph(glyph) {\n  return glyph.codePoints.includes(ATTACHMENT_CODE);\n};\n\n/**\n * Resolve attachments of run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\nvar resolveRunAttachments = function resolveRunAttachments(run) {\n  var _run$attributes;\n  if (!run.positions) return run;\n  var glyphs = run.glyphs || [];\n  var attachment = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.attachment) || {};\n  var positions = run.positions.map(function (position, i) {\n    var glyph = glyphs[i];\n    if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n      return Object.assign({}, position, {\n        xAdvance: attachment.width\n      });\n    }\n    return Object.assign({}, position);\n  });\n  return Object.assign({}, run, {\n    positions: positions\n  });\n};\n\n/**\n * Resolve attachments for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\nvar resolveAttachments = function resolveAttachments() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(resolveRunAttachments);\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\nvar applyAttributes = function applyAttributes(a) {\n  return {\n    align: a.align || 'left',\n    alignLastLine: a.alignLastLine || (a.align === 'justify' ? 'left' : a.align || 'left'),\n    attachment: a.attachment || null,\n    backgroundColor: a.backgroundColor || null,\n    bidiLevel: a.bidiLevel || null,\n    bullet: a.bullet || null,\n    characterSpacing: a.characterSpacing || 0,\n    color: a.color || 'black',\n    features: a.features || [],\n    fill: a.fill !== false,\n    font: a.font || null,\n    fontSize: a.fontSize || 12,\n    hangingPunctuation: a.hangingPunctuation || false,\n    hyphenationFactor: a.hyphenationFactor || 0,\n    indent: a.indent || 0,\n    justificationFactor: a.justificationFactor || 1,\n    lineHeight: a.lineHeight || null,\n    lineSpacing: a.lineSpacing || 0,\n    link: a.link || null,\n    marginLeft: a.marginLeft || a.margin || 0,\n    marginRight: a.marginRight || a.margin || 0,\n    opacity: a.opacity,\n    paddingTop: a.paddingTop || a.padding || 0,\n    paragraphSpacing: a.paragraphSpacing || 0,\n    underline: a.underline || false,\n    underlineColor: a.underlineColor || a.color || 'black',\n    underlineStyle: a.underlineStyle || 'solid',\n    script: a.script || null,\n    shrinkFactor: a.shrinkFactor || 0,\n    strike: a.strike || false,\n    strikeColor: a.strikeColor || a.color || 'black',\n    strikeStyle: a.strikeStyle || 'solid',\n    stroke: a.stroke || false,\n    verticalAlign: a.verticalAlign || null,\n    wordSpacing: a.wordSpacing || 0,\n    yOffset: a.yOffset || 0\n  };\n};\n\n/**\n * Apply default style to run\n *\n * @param  {Object}  run\n * @return {Object} run with styles\n */\nvar applyRunStyles = function applyRunStyles(run) {\n  var attributes = applyAttributes(run.attributes);\n  return Object.assign({}, run, {\n    attributes: attributes\n  });\n};\n\n/**\n * Apply default attributes for an attributed string\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar applyDefaultStyles = function applyDefaultStyles() {\n  return function (attributedString) {\n    var string = attributedString.string || '';\n    var runs = (attributedString.runs || []).map(applyRunStyles);\n    return {\n      string: string,\n      runs: runs\n    };\n  };\n};\n\n/* eslint-disable no-restricted-syntax */\n\n/**\n * Apply scaling and yOffset for verticalAlign 'sub' and 'super'.\n *\n * @param  {Object} layout options\n * @param  {Object} attributed string\n * @return {Object} attributed string\n */\nvar verticalAlignment = function verticalAlignment() {\n  return function (attributedString) {\n    attributedString.runs.forEach(function (run) {\n      var attributes = run.attributes;\n      var verticalAlign = attributes.verticalAlign;\n      if (verticalAlign === 'sub') {\n        attributes.yOffset = -0.2;\n      } else if (verticalAlign === 'super') {\n        attributes.yOffset = 0.4;\n      }\n    });\n    return attributedString;\n  };\n};\n\n/**\n * A LayoutEngine is the main object that performs text layout.\n * It accepts an AttributedString and a Container object\n * to layout text into, and uses several helper objects to perform\n * various layout tasks. These objects can be overridden to customize\n * layout behavior.\n *\n * @param  {Object}  engines\n * @param  {Object}  attributed string\n * @param  {Object}  container rect\n * @param  {Object}  layout options\n * @return {Array} paragraph blocks\n */\nvar layoutEngine = function layoutEngine(engines) {\n  return function (attributedString, container, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var processParagraph = compose(resolveYOffset(), resolveAttachments(), generateGlyphs(), verticalAlignment(), wrapWords(engines, options));\n    var processParagraphs = function processParagraphs(paragraphs) {\n      return paragraphs.map(processParagraph);\n    };\n    return compose(finalizeFragments(engines, options), typesetter(engines, options, container), processParagraphs, splitParagraphs(), preprocessRuns(engines, options), applyDefaultStyles())(attributedString);\n  };\n};\n\n/* eslint-disable no-plusplus */\nvar INFINITY = 10000;\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    }\n    if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n    return 0;\n  };\n  for (var i = 0; i < subnodes.length; i += 1) {\n    var node = subnodes[i];\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n    if (sum.width - sum.shrink > lineLength) {\n      if (position === null) {\n        var j = i === 0 ? i + 1 : i;\n        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {\n          j++;\n        }\n        position = j - 1;\n      }\n      break;\n    }\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n    if (breakpoint !== null) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n  return breakpoints;\n};\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable max-classes-per-file */\nvar Node = /*#__PURE__*/function () {\n  function Node(data) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n  var _proto = Node.prototype;\n  _proto.toString = function toString() {\n    return this.data.toString();\n  };\n  return Node;\n}();\nvar LinkedList = /*#__PURE__*/function () {\n  function LinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n  }\n  var _proto2 = LinkedList.prototype;\n  _proto2.isLinked = function isLinked(node) {\n    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());\n  };\n  _proto2.size = function size() {\n    return this.listSize;\n  };\n  _proto2.isEmpty = function isEmpty() {\n    return this.listSize === 0;\n  };\n  _proto2.first = function first() {\n    return this.head;\n  };\n  _proto2.last = function last() {\n    return this.last;\n  };\n  _proto2.toString = function toString() {\n    return this.toArray().toString();\n  };\n  _proto2.toArray = function toArray() {\n    var node = this.head;\n    var result = [];\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n    return result;\n  };\n  _proto2.forEach = function forEach(fun) {\n    var node = this.head;\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  };\n  _proto2.contains = function contains(n) {\n    var node = this.head;\n    if (!this.isLinked(n)) {\n      return false;\n    }\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n      node = node.next;\n    }\n    return false;\n  };\n  _proto2.at = function at(i) {\n    var node = this.head;\n    var index = 0;\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n      node = node.next;\n      index += 1;\n    }\n    return null;\n  };\n  _proto2.insertAfter = function insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  };\n  _proto2.insertBefore = function insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  };\n  _proto2.push = function push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n    return this;\n  };\n  _proto2.unshift = function unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n    return this;\n  };\n  _proto2.remove = function remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    this.listSize -= 1;\n    return this;\n  };\n  _proto2.pop = function pop() {\n    var node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n  _proto2.shift = function shift() {\n    var node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n  return LinkedList;\n}();\nLinkedList.Node = Node;\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nvar linebreak = function linebreak(nodes, lines, settings) {\n  var options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  var activeNodes = new LinkedList();\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLengths = lines;\n  var breaks = [];\n  var tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position: position,\n      demerits: demerits,\n      ratio: ratio,\n      line: line,\n      fitnessClass: fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous: previous\n    };\n  }\n  function computeCost(start, end, active, currentLine) {\n    var width = sum.width - active.totals.width;\n    var stretch = 0;\n    var shrink = 0;\n    // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n    var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n      return linebreak.infinity;\n    }\n    if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n      return linebreak.infinity;\n    }\n\n    // perfect match\n    return 0;\n  }\n\n  // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n  function computeSum(breakPointIndex) {\n    var result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n    for (var i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  // The main loop of the algorithm\n  // eslint-disable-next-line no-shadow\n  function mainLoop(node, index, nodes) {\n    var active = activeNodes.first();\n    var next = null;\n    var ratio = 0;\n    var demerits = 0;\n    var candidates = [];\n    var badness;\n    var currentLine = 0;\n    var tmpSum;\n    var currentClass = 0;\n    var fitnessClass;\n    var candidate;\n    var newNode;\n\n    // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }];\n\n      // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine);\n\n        // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        }\n\n        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3);\n\n          // Positive penalty\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);\n            // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);\n            // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          }\n\n          // Calculate the fitness class for this candidate active node.\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          }\n\n          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          }\n\n          // Add the total demerits of the active node to get the total demerits of this candidate node.\n          demerits += active.data.demerits;\n\n          // Only store the best candidate for each fitness class\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active: active,\n              demerits: demerits,\n              ratio: ratio\n            };\n          }\n        }\n        active = next;\n\n        // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n      tmpSum = computeSum(index);\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Add an active node for the start of the paragraph.\n  activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n\n  // eslint-disable-next-line no-shadow\n  nodes.forEach(function (node, index, nodes) {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(function (node) {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\nlinebreak.infinity = 10000;\nlinebreak.glue = function (width, value, stretch, shrink) {\n  return {\n    type: 'glue',\n    value: value,\n    width: width,\n    stretch: stretch,\n    shrink: shrink\n  };\n};\nlinebreak.box = function (width, value, hyphenated) {\n  if (hyphenated === void 0) {\n    hyphenated = false;\n  }\n  return {\n    type: 'box',\n    width: width,\n    value: value,\n    hyphenated: hyphenated\n  };\n};\nlinebreak.penalty = function (width, penalty, flagged) {\n  return {\n    type: 'penalty',\n    width: width,\n    penalty: penalty,\n    flagged: flagged\n  };\n};\n\n/**\n * Add scalar to run\n *\n * @param  {number}  scalar\n * @param  {Object}  run\n * @return {Object} added run\n */\nvar add = function add(n, run) {\n  var start = run.start + n;\n  var end = run.end + n;\n  return Object.assign({}, run, {\n    start: start,\n    end: end\n  });\n};\n\n/**\n * Get run length\n *\n * @param  {Object}  run\n * @return {number} length\n */\nvar length = function length(run) {\n  return run.end - run.start;\n};\n\n/**\n * Concats two runs into one\n *\n * @param  {Object}  first run\n * @param  {Object}  second run\n * @return {Object}  concatenated run\n */\nvar concat = function concat(runA, runB) {\n  var end = runA.end + length(runB);\n  var glyphs = (runA.glyphs || []).concat(runB.glyphs || []);\n  var positions = (runA.positions || []).concat(runB.positions || []);\n  var attributes = Object.assign({}, runA.attributes, runB.attributes);\n  var runAIndices = runA.glyphIndices || [];\n  var runALastIndex = last(runAIndices) || 0;\n  var runBIndices = (runB.glyphIndices || []).map(function (i) {\n    return i + runALastIndex + 1;\n  });\n  var glyphIndices = normalize(runAIndices.concat(runBIndices));\n  return Object.assign({}, runA, {\n    end: end,\n    glyphs: glyphs,\n    positions: positions,\n    attributes: attributes,\n    glyphIndices: glyphIndices\n  });\n};\n\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insertGlyph$1 = function insertGlyph(index, glyph, run) {\n  if (!glyph) return run;\n\n  // Split resolves ligature splitting in case new glyph breaks some\n  var leadingRun = slice$1(0, index, run);\n  var trailingRun = slice$1(index, Infinity, run);\n  return concat(append$1(glyph, leadingRun), trailingRun);\n};\n\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insert = function insert(index, value, run) {\n  var font = getFont(run);\n  var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return insertGlyph$1(index, glyph, run);\n};\n\n/**\n * Get run index at char index\n *\n * @param  {number}  char index\n * @param  {Object}  attributedString\n * @return {number} run index\n */\nvar runIndexAt = function runIndexAt(n, string) {\n  return runIndexAt$1(n, string.runs);\n};\n\n/**\n * Insert glyph into attributed string\n *\n * @param {number} index\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar insertGlyph = function insertGlyph(index, glyph, attributedString) {\n  var runIndex = runIndexAt(index, attributedString);\n\n  // Add glyph to the end if run index invalid\n  if (runIndex === -1) return append(glyph, attributedString);\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  var string = attributedString.string.slice(0, index) + stringFromCodePoints(codePoints) + attributedString.string.slice(index);\n  var runs = attributedString.runs.map(function (run, i) {\n    if (i === runIndex) return insert(index - run.start, glyph, run);\n    if (i > runIndex) return add(codePoints.length, run);\n    return run;\n  });\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: runs\n  });\n};\n\n/**\n * Advance width between two string indices\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} advanced width run\n */\nvar advanceWidthBetween$1 = function advanceWidthBetween(start, end, run) {\n  var runStart = run.start || 0;\n  var glyphStartIndex = Math.max(0, glyphIndexAt(start - runStart, run));\n  var glyphEndIndex = Math.max(0, glyphIndexAt(end - runStart, run));\n  var positions = (run.positions || []).slice(glyphStartIndex, glyphEndIndex);\n  return advanceWidth$2(positions);\n};\n\n/**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {number} advance width\n */\nvar advanceWidthBetween = function advanceWidthBetween(start, end, attributedString) {\n  var runs = filter(start, end, attributedString.runs);\n  return runs.reduce(function (acc, run) {\n    return acc + advanceWidthBetween$1(start, end, run);\n  }, 0);\n};\nvar HYPHEN = 0x002d;\nvar TOLERANCE_STEPS = 5;\nvar TOLERANCE_LIMIT = 50;\nvar opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n\n/**\n * Slice attributed string to many lines\n *\n * @param {Object} attributed string\n * @param  {Array}  nodes\n * @param  {Array}  breaks\n * @return {Array} attributed strings\n */\nvar breakLines = function breakLines(string, nodes, breaks) {\n  var start = 0;\n  var end = null;\n  var lines = breaks.reduce(function (acc, breakPoint) {\n    var node = nodes[breakPoint.position];\n    var prevNode = nodes[breakPoint.position - 1];\n\n    // Last breakpoint corresponds to K&P mandatory final glue\n    if (breakPoint.position === nodes.length - 1) return acc;\n    var line;\n    if (node.type === 'penalty') {\n      end = prevNode.value.end;\n      line = slice(start, end, string);\n      line = insertGlyph(line.length, HYPHEN, line);\n    } else {\n      end = node.value.end;\n      line = slice(start, end, string);\n    }\n    start = end;\n    return [].concat(acc, [line]);\n  }, []);\n\n  // Last line\n  lines.push(slice(start, string.string.length, string));\n  return lines;\n};\n\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {Object} attributed string\n * @param  {Object}  attributed string\n * @param  {Object}  layout options\n * @return {Array} attributed strings\n */\nvar getNodes = function getNodes(attributedString, _ref, options) {\n  var align = _ref.align;\n  var start = 0;\n  var hyphenWidth = 5;\n  var syllables = attributedString.syllables;\n  var hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);\n  var result = syllables.reduce(function (acc, s, index) {\n    var width = advanceWidthBetween(start, start + s.length, attributedString);\n    if (s.trim() === '') {\n      var stretch = width * opts.width / opts.stretch;\n      var shrink = width * opts.width / opts.shrink;\n      var value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(linebreak.glue(width, value, stretch, shrink));\n    } else {\n      var hyphenated = syllables[index + 1] !== ' ';\n      var _value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(linebreak.box(width, _value, hyphenated));\n      if (syllables[index + 1] && hyphenated) {\n        acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n      }\n    }\n    start += s.length;\n    return acc;\n  }, []);\n  result.push(linebreak.glue(0, null, linebreak.infinity, 0));\n  result.push(linebreak.penalty(0, -linebreak.infinity, 1));\n  return result;\n};\nvar getStyles = function getStyles(attributedString) {\n  var _attributedString$run, _attributedString$run2;\n  return ((_attributedString$run = attributedString.runs) === null || _attributedString$run === void 0 ? void 0 : (_attributedString$run2 = _attributedString$run[0]) === null || _attributedString$run2 === void 0 ? void 0 : _attributedString$run2.attributes) || {};\n};\n\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @param {Object} attributed string\n * @return {Array} attributed strings\n */\nvar linebreaker = function linebreaker(options) {\n  return function (attributedString, availableWidths) {\n    var tolerance = options.tolerance || 4;\n    var style = getStyles(attributedString);\n    var nodes = getNodes(attributedString, style, options);\n    var breaks = linebreak(nodes, availableWidths, {\n      tolerance: tolerance\n    });\n\n    // Try again with a higher tolerance if the line breaking failed.\n    while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n      tolerance += TOLERANCE_STEPS;\n      breaks = linebreak(nodes, availableWidths, {\n        tolerance: tolerance\n      });\n    }\n    if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n      breaks = applyBestFit(nodes, availableWidths);\n    }\n    return breakLines(attributedString, nodes, breaks.slice(1));\n  };\n};\nvar WHITESPACE_PRIORITY = 1;\nvar LETTER_PRIORITY = 2;\nvar EXPAND_WHITESPACE_FACTOR = {\n  before: 0.5,\n  after: 0.5,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nvar EXPAND_CHAR_FACTOR = {\n  before: 0.14453125,\n  // 37/256\n  after: 0.14453125,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nvar SHRINK_WHITESPACE_FACTOR = {\n  before: -0.04296875,\n  // -11/256\n  after: -0.04296875,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nvar SHRINK_CHAR_FACTOR = {\n  before: -0.04296875,\n  after: -0.04296875,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nvar getCharFactor = function getCharFactor(direction, options) {\n  var expandCharFactor = options.expandCharFactor || {};\n  var shrinkCharFactor = options.shrinkCharFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_CHAR_FACTOR, expandCharFactor) : Object.assign({}, SHRINK_CHAR_FACTOR, shrinkCharFactor);\n};\nvar getWhitespaceFactor = function getWhitespaceFactor(direction, options) {\n  var expandWhitespaceFactor = options.expandWhitespaceFactor || {};\n  var shrinkWhitespaceFactor = options.shrinkWhitespaceFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : Object.assign({}, SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);\n};\nvar factor = function factor(direction, options) {\n  return function (glyphs) {\n    var charFactor = getCharFactor(direction, options);\n    var whitespaceFactor = getWhitespaceFactor(direction, options);\n    var factors = [];\n    for (var index = 0; index < glyphs.length; index += 1) {\n      var f = void 0;\n      var glyph = glyphs[index];\n      if (isWhiteSpace(glyph)) {\n        f = Object.assign({}, whitespaceFactor);\n        if (index === glyphs.length - 1) {\n          f.before = 0;\n          if (index > 0) {\n            factors[index - 1].after = 0;\n          }\n        }\n      } else if (glyph.isMark && index > 0) {\n        f = Object.assign({}, factors[index - 1]);\n        f.before = 0;\n        factors[index - 1].after = 0;\n      } else {\n        f = Object.assign({}, charFactor);\n      }\n      factors.push(f);\n    }\n    return factors;\n  };\n};\nvar getFactors = function getFactors(gap, line, options) {\n  var direction = gap > 0 ? 'GROW' : 'SHRINK';\n  var getFactor = factor(direction, options);\n  var factors = line.runs.reduce(function (acc, run) {\n    return acc.concat(getFactor(run.glyphs));\n  }, []);\n  factors[0].before = 0;\n  factors[factors.length - 1].after = 0;\n  return factors;\n};\n\n/* eslint-disable no-multi-assign */\nvar KASHIDA_PRIORITY = 0;\nvar NULL_PRIORITY = 3;\nvar getDistances = function getDistances(gap, factors) {\n  var total = 0;\n  var priorities = [];\n  var unconstrained = [];\n  for (var _priority = KASHIDA_PRIORITY; _priority <= NULL_PRIORITY; _priority += 1) {\n    priorities[_priority] = unconstrained[_priority] = 0;\n  }\n\n  // sum the factors at each priority\n  for (var j = 0; j < factors.length; j += 1) {\n    var f = factors[j];\n    var sum = f.before + f.after;\n    total += sum;\n    priorities[f.priority] += sum;\n    if (f.unconstrained) {\n      unconstrained[f.priority] += sum;\n    }\n  }\n\n  // choose the priorities that need to be applied\n  var highestPriority = -1;\n  var highestPrioritySum = 0;\n  var remainingGap = gap;\n  var priority;\n  for (priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {\n    var prioritySum = priorities[priority];\n    if (prioritySum !== 0) {\n      if (highestPriority === -1) {\n        highestPriority = priority;\n        highestPrioritySum = prioritySum;\n      }\n\n      // if this priority covers the remaining gap, we're done\n      if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {\n        priorities[priority] = remainingGap / prioritySum;\n        unconstrained[priority] = 0;\n        remainingGap = 0;\n        break;\n      }\n\n      // mark that we need to use 100% of the adjustment from\n      // this priority, and subtract the space that it consumes\n      priorities[priority] = 1;\n      remainingGap -= prioritySum;\n\n      // if this priority has unconstrained glyphs, let them consume the remaining space\n      if (unconstrained[priority] !== 0) {\n        unconstrained[priority] = remainingGap / unconstrained[priority];\n        remainingGap = 0;\n        break;\n      }\n    }\n  }\n\n  // zero out remaining priorities (if any)\n  for (var p = priority + 1; p <= NULL_PRIORITY; p += 1) {\n    priorities[p] = 0;\n    unconstrained[p] = 0;\n  }\n\n  // if there is still space left over, assign it to the highest priority that we saw.\n  // this violates their factors, but it only happens in extreme cases\n  if (remainingGap > 0 && highestPriority > -1) {\n    priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;\n  }\n\n  // create and return an array of distances to add to each glyph's advance\n  var distances = [];\n  for (var index = 0; index < factors.length; index += 1) {\n    // the distance to add to this glyph is the sum of the space to add\n    // after this glyph, and the space to add before the next glyph\n    var _f = factors[index];\n    var next = factors[index + 1];\n    var dist = _f.after * priorities[_f.priority];\n    if (next) {\n      dist += next.before * priorities[next.priority];\n    }\n\n    // if this glyph is unconstrained, add the unconstrained distance as well\n    if (_f.unconstrained) {\n      dist += _f.after * unconstrained[_f.priority];\n      if (next) {\n        dist += next.before * unconstrained[next.priority];\n      }\n    }\n    distances.push(dist);\n  }\n  return distances;\n};\n\n/**\n * Adjust run positions by given distances\n *\n * @param {Array} distances\n * @param {Object} line\n * @returns {Object} line\n */\nvar justifyLine = function justifyLine(distances, line) {\n  var index = 0;\n  for (var _iterator = _createForOfIteratorHelperLoose(line.runs), _step; !(_step = _iterator()).done;) {\n    var run = _step.value;\n    for (var _iterator2 = _createForOfIteratorHelperLoose(run.positions), _step2; !(_step2 = _iterator2()).done;) {\n      var position = _step2.value;\n      position.xAdvance += distances[index++];\n    }\n  }\n  return line;\n};\n\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * //TODO: Make it immutable\n *\n * @param {Object} layout options\n * @param {Object} line\n * @returns {Object} line\n */\nvar justification = function justification(options) {\n  return function (line) {\n    var gap = line.box.width - advanceWidth(line);\n    if (gap === 0) return; // Exact fit\n\n    var factors = getFactors(gap, line, options);\n    var distances = getDistances(gap, factors);\n    return justifyLine(distances, line);\n  };\n};\n\n/**\n * Returns attributed string ascent\n *\n * @param {Object} attributed string\n * @return {number} ascent\n */\nvar ascent = function ascent(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return Math.max(acc, ascent$1(run));\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\n\n/* eslint-disable no-param-reassign */\n\n// The base font size used for calculating underline thickness.\nvar BASE_FONT_SIZE = 12;\n\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */\nvar textDecoration = function textDecoration() {\n  return function (lineFragment) {\n    var x = lineFragment.overflowLeft || 0;\n    var overflowRight = lineFragment.overflowRight || 0;\n    var maxX = advanceWidth(lineFragment) - overflowRight;\n    lineFragment.decorationLines = [];\n    for (var i = 0; i < lineFragment.runs.length; i += 1) {\n      var run = lineFragment.runs[i];\n      var width = Math.min(maxX - x, advanceWidth$1(run));\n      var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n      if (run.attributes.underline) {\n        var rect = {\n          x: x,\n          y: ascent(lineFragment) + thickness * 2,\n          width: width,\n          height: thickness\n        };\n        var line = {\n          rect: rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.underlineColor || 'black',\n          style: run.attributes.underlineStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(line);\n      }\n      if (run.attributes.strike) {\n        var y = ascent(lineFragment) - ascent$1(run) / 3;\n        var _rect = {\n          x: x,\n          y: y,\n          width: width,\n          height: thickness\n        };\n        var _line = {\n          rect: _rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.strikeColor || 'black',\n          style: run.attributes.strikeStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(_line);\n      }\n      x += width;\n    }\n    return lineFragment;\n  };\n};\nvar ignoredScripts = ['Common', 'Inherited', 'Unknown'];\n\n/**\n * Resolves unicode script in runs, grouping equal runs together\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar scriptItemizer = function scriptItemizer() {\n  return function (attributedString) {\n    var string = attributedString.string;\n    var lastScript = 'Unknown';\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n    if (!string) return empty();\n    for (var i = 0; i < string.length; i += 1) {\n      var char = string[i];\n      var codePoint = char.codePointAt();\n      var script = unicode.getScript(codePoint);\n      if (script !== lastScript && !ignoredScripts.includes(script)) {\n        if (lastScript !== 'Unknown') {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              script: lastScript\n            }\n          });\n        }\n        lastIndex = index;\n        lastScript = script;\n      }\n      index += char.length;\n    }\n    if (lastIndex < string.length) {\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          script: lastScript\n        }\n      });\n    }\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = hyphen(pattern);\nvar splitHyphen = function splitHyphen(word) {\n  return word.split(SOFT_HYPHEN);\n};\nvar cache = {};\nvar getParts = function getParts(word) {\n  var base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n  return splitHyphen(base);\n};\nvar wordHyphenation = function wordHyphenation() {\n  return function (word) {\n    var cacheKey = \"_\" + word;\n    if (isNil(word)) return [];\n    if (cache[cacheKey]) return cache[cacheKey];\n    cache[cacheKey] = getParts(word);\n    return cache[cacheKey];\n  };\n};\nvar getFontSize = function getFontSize(value) {\n  return value.attributes.fontSize || 12;\n};\n\n/**\n * Resolve font runs in an AttributedString, grouping equal\n * runs and performing font substitution where necessary.\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar fontSubstitution = function fontSubstitution() {\n  return function (attributedString) {\n    var string = attributedString.string,\n      runs = attributedString.runs;\n    var lastFont = null;\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n    if (!string) return empty();\n    for (var _iterator = _createForOfIteratorHelperLoose(runs), _step; !(_step = _iterator()).done;) {\n      var run = _step.value;\n      var _fontSize = getFontSize(run);\n      var defaultFont = run.attributes.font;\n      if (string.length === 0) {\n        res.push({\n          start: 0,\n          end: 0,\n          attributes: {\n            font: defaultFont\n          }\n        });\n        break;\n      }\n      for (var _iterator2 = _createForOfIteratorHelperLoose(string.slice(run.start, run.end)), _step2; !(_step2 = _iterator2()).done;) {\n        var char = _step2.value;\n        var font = defaultFont;\n        if (font !== lastFont) {\n          if (lastFont) {\n            res.push({\n              start: lastIndex,\n              end: index,\n              attributes: {\n                font: lastFont,\n                scale: lastFont ? _fontSize / lastFont.unitsPerEm : 0\n              }\n            });\n          }\n          lastFont = font;\n          lastIndex = index;\n        }\n        index += char.length;\n      }\n    }\n    if (lastIndex < string.length) {\n      var fontSize = getFontSize(last(runs));\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          font: lastFont,\n          scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n        }\n      });\n    }\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\nexport { layoutEngine as default, fontSubstitution, justification, linebreaker, scriptItemizer, textDecoration, wordHyphenation };","map":{"version":3,"names":["isNil","last","dropLast","dropLast$2","adjust","compose","_extends","_objectWithoutPropertiesLoose","_createForOfIteratorHelperLoose","unicode","hyphen","pattern","fromFragments","fragments","offset","string","runs","forEach","fragment","push","start","end","length","attributes","defaultHyphenationEngine","word","wrapWords","engines","options","attributedString","_engines$wordHyphenat","_engines","syllables","hyphenateWord","hyphenationCallback","wordHyphenation","call","i","run","words","slice","split","filter","Boolean","j","parts","apply","join","copy","rect","Object","assign","partition","height","a","b","y","crop","_partition","result","height$2","paragraph","reduce","acc","block","box","calculateScale","_attributes$font","fontSize","unitsPerEm","font","scale","_run$attributes","index","glyphIndices","value","getFont","slice$2","glyph","codePoints","String","fromCodePoint","layout","glyphs","glyphIndexAt","_run$glyphIndices","normalize","array","head","map","slice$1","_run$glyphs","_run$glyphs2","runScale","startIndex","endIndex","startGlyph","endGlyph","startOffset","startGlyphs","Infinity","endOffset","endGlyphs","sliceStart","Math","min","glyphPosition","g","xAdvance","advanceWidth","startPositions","positions","endPositions","flat","runIndexAt$1","runIndexAt","n","findIndex","max","subtract","sliceRuns","sliceFirstRun","sliceLastRun","isFirst","isLast","filteredRuns","slicedRuns","findCharIndex","search","findLastCharIndex","match","lastIndexOf","trim","empty$1","empty","isNumber","appendIndices","indices","lastIndex","newIndices","Array","fill","concat","glyphForCodePoint","appendGlyph","_glyph$codePoints","glyphLength","append$1","append","stringFromCodePoints","codePointsString","firstRuns","lastRun","ELLIPSIS_UNICODE","ELLIPSIS_STRING","fromCharCode","getEllipsisCodePoint","encode","_font$encode","parseInt","truncate","_last","_last2","_last2$attributes","_Object$assign","codePoint","lastBlock","omit","ascent$1","ascent","_run$attributes$attac","_run$attributes2","_run$attributes2$font","attachmentHeight","attachment","fontAscent","descent","_run$attributes$font","fontDescent","lineGap","height$1","lineHeight","attributeString","reducer","intersects","x","num1","width","num2","_excluded","getLineFragment","lineRect","excludeRect","eStart","eEnd","lStart","lEnd","r","getLineFragments","excludeRects","_loop","pieces","generateLineRects","container","lineRects","maxY","currentRect","rest","lineRectFragments","ATTACHMENT_CODE$1","purgeAttachments","shouldPurge","includes","layoutLines","rects","lines","indent","shift","currentY","line","_line$runs","_line$runs$","lineIndent","style","newLine","layoutParagraph","_paragraph$runs","_paragraph$runs$","_paragraph$runs$$attr","availableWidths","linebreaker","sliceAtHeight","newBlock","counter","typesetter","attributedStrings","blocks","paragraphs","layoutBlock","maxLines","truncateEllipsis","truncateMode","linesCount","paragraphRect","nextParagraph","slicedBlock","linesHeight","shouldTruncate","DUMMY_CODEPOINT","resolve","next","getCharacterSpacing","characterSpacing","scalePositions","position","xSpacing","yAdvance","xOffset","yOffset","layoutRun","runString","glyphRun","generateGlyphs","resolveRunYOffset","p","resolveYOffset","sort","isEmpty","sortPoints","generatePoints","mergeRuns","groupEmptyRuns","groups","values","flattenEmptyRuns","flattenRegularRuns","res","points","attrs","stack","_points$i","type","splice","flatten","emptyRuns","regularRuns","omitFont","preprocessRuns","fontSubstitution","scriptItemizer","_omitFont","omittedFontRuns","_fontSubstitution","substitutedRuns","_scriptItemizer","itemizationRuns","length$1","splitParagraphs","breakPoint","indexOf","advanceWidth$2","pos","advanceWidth$1","WHITE_SPACES_CODE","isWhiteSpace","leadingPositions","leadingWhitespaces","leadingOffset$1","leadingOffset","reverse","trailingPositions","trailingOffset$1","trailingOffset","dropLast$1","ALIGNMENT_FACTORS","center","right","removeNewLine","getOverflowLeft","overflowLeft","getOverflowRight","overflowRight","adjustOverflow","justifyLine$1","justifyLine","align","lineWidth","alignFactor","remainingWidth","shouldJustify","justification","finalizeLine","lineAscent","lineDescent","lineXAdvance","descent$1","finalizeBlock","isLastFragment","alignLastLine","textDecoration","finalizeFragments","blockFinalizer","ATTACHMENT_CODE","isReplaceGlyph","resolveRunAttachments","resolveAttachments","applyAttributes","backgroundColor","bidiLevel","bullet","color","features","hangingPunctuation","hyphenationFactor","justificationFactor","lineSpacing","link","marginLeft","margin","marginRight","opacity","paddingTop","padding","paragraphSpacing","underline","underlineColor","underlineStyle","script","shrinkFactor","strike","strikeColor","strikeStyle","stroke","verticalAlign","wordSpacing","applyRunStyles","applyDefaultStyles","verticalAlignment","layoutEngine","processParagraph","processParagraphs","INFINITY","getNextBreakpoint","subnodes","widths","lineNumber","minimumBadness","sum","stretch","shrink","lineLength","calculateRatio","node","ratio","penalty","badness","pow","abs","applyBestFit","nodes","count","breakpoints","breakpoint","Node","data","prev","_proto","prototype","toString","LinkedList","tail","listSize","_proto2","isLinked","size","first","toArray","fun","contains","at","listLength","insertAfter","newNode","insertBefore","unshift","remove","pop","linebreak","settings","demerits","flagged","fitness","tolerance","activeNodes","lineLengths","breaks","tmp","fitnessClass","totals","previous","computeCost","active","currentLine","infinity","computeSum","breakPointIndex","mainLoop","candidates","tmpSum","currentClass","candidate","undefined","glue","hyphenated","add","runA","runB","runAIndices","runALastIndex","runBIndices","insertGlyph$1","insertGlyph","leadingRun","trailingRun","insert","runIndex","advanceWidthBetween$1","advanceWidthBetween","runStart","glyphStartIndex","glyphEndIndex","HYPHEN","TOLERANCE_STEPS","TOLERANCE_LIMIT","opts","breakLines","prevNode","getNodes","_ref","hyphenWidth","hyphenPenalty","hyphenationPenalty","s","_value","getStyles","_attributedString$run","_attributedString$run2","WHITESPACE_PRIORITY","LETTER_PRIORITY","EXPAND_WHITESPACE_FACTOR","before","after","priority","unconstrained","EXPAND_CHAR_FACTOR","SHRINK_WHITESPACE_FACTOR","SHRINK_CHAR_FACTOR","getCharFactor","direction","expandCharFactor","shrinkCharFactor","getWhitespaceFactor","expandWhitespaceFactor","shrinkWhitespaceFactor","factor","charFactor","whitespaceFactor","factors","f","isMark","getFactors","gap","getFactor","KASHIDA_PRIORITY","NULL_PRIORITY","getDistances","total","priorities","_priority","highestPriority","highestPrioritySum","remainingGap","prioritySum","distances","_f","dist","_iterator","_step","done","_iterator2","_step2","BASE_FONT_SIZE","lineFragment","maxX","decorationLines","thickness","floor","_rect","_line","ignoredScripts","lastScript","char","codePointAt","getScript","SOFT_HYPHEN","hyphenator","splitHyphen","cache","getParts","base","cacheKey","getFontSize","lastFont","_fontSize","defaultFont","default"],"sources":["C:/Users/TongNPZ/Desktop/my-app-2.0/node_modules/@react-pdf/textkit/lib/textkit.es.js"],"sourcesContent":["import { isNil, last, dropLast as dropLast$2, adjust, compose } from '@react-pdf/fns';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport _createForOfIteratorHelperLoose from '@babel/runtime/helpers/createForOfIteratorHelperLoose';\nimport unicode from 'unicode-properties';\nimport hyphen from 'hyphen';\nimport pattern from 'hyphen/patterns/en-us';\n\n/**\n * Create attributed string from text fragments\n *\n * @param  {Array}  fragments\n * @return {Object} attributed string\n */\nvar fromFragments = function fromFragments(fragments) {\n  var offset = 0;\n  var string = '';\n  var runs = [];\n  fragments.forEach(function (fragment) {\n    string += fragment.string;\n    runs.push({\n      start: offset,\n      end: offset + fragment.string.length,\n      attributes: fragment.attributes || {}\n    });\n    offset += fragment.string.length;\n  });\n  return {\n    string: string,\n    runs: runs\n  };\n};\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param  {String} word\n * @return {Array} same word\n */\nvar defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n  return [word];\n};\n\n/**\n * Wrap words of attribute string\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string including syllables\n */\nvar wrapWords = function wrapWords(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  return function (attributedString) {\n    var _engines$wordHyphenat, _engines;\n    var syllables = [];\n    var fragments = [];\n    var hyphenateWord = options.hyphenationCallback || ((_engines$wordHyphenat = (_engines = engines).wordHyphenation) === null || _engines$wordHyphenat === void 0 ? void 0 : _engines$wordHyphenat.call(_engines, options)) || defaultHyphenationEngine;\n    for (var i = 0; i < attributedString.runs.length; i += 1) {\n      var string = '';\n      var run = attributedString.runs[i];\n      var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n      for (var j = 0; j < words.length; j += 1) {\n        var word = words[j];\n        var parts = hyphenateWord(word);\n        syllables.push.apply(syllables, parts);\n        string += parts.join('');\n      }\n      fragments.push({\n        string: string,\n        attributes: run.attributes\n      });\n    }\n    return _extends({}, fromFragments(fragments), {\n      syllables: syllables\n    });\n  };\n};\n\n/**\n * Clone rect\n *\n * @param  {Object}  rect\n * @return {Object} cloned rect\n */\nvar copy = function copy(rect) {\n  return Object.assign({}, rect);\n};\n\nvar partition = function partition(rect, height) {\n  var a = Object.assign({}, rect, {\n    height: height\n  });\n  var b = Object.assign({}, rect, {\n    y: rect.y + height,\n    height: rect.height - height\n  });\n  return [a, b];\n};\n\n/**\n * Crop upper section of rect\n *\n * @param  {Object}  rect\n * @return {Object} cropped rect\n */\nvar crop = function crop(height, rect) {\n  var _partition = partition(rect, height),\n    result = _partition[1];\n  return result;\n};\n\n/**\n * Get paragraph block height\n *\n * @param  {Object}  paragraph block\n * @return {number} paragraph block height\n */\nvar height$2 = function height(paragraph) {\n  return paragraph.reduce(function (acc, block) {\n    return acc + block.box.height;\n  }, 0);\n};\n\n/**\n * Calculate run scale\n *\n * @param  {Object}  run\n * @return {number} scale\n */\nvar calculateScale = function calculateScale(run) {\n  var _attributes$font;\n  var attributes = run.attributes || {};\n  var fontSize = attributes.fontSize || 12;\n  var unitsPerEm = (_attributes$font = attributes.font) === null || _attributes$font === void 0 ? void 0 : _attributes$font.unitsPerEm;\n  return unitsPerEm ? fontSize / unitsPerEm : 0;\n};\n\n/**\n * Get run scale\n *\n * @param  {Object}  run\n * @return {number} scale\n */\nvar scale = function scale(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.scale) || calculateScale(run);\n};\n\n/**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param  {number}  index\n * @param  {Object}  run\n * @return {number} ligature offset\n */\nvar offset = function offset(index, run) {\n  if (!run) return 0;\n  var glyphIndices = run.glyphIndices || [];\n  var value = glyphIndices[index];\n  return glyphIndices.slice(0, index).filter(function (i) {\n    return i === value;\n  }).length;\n};\n\n/**\n * Get run font\n *\n * @param  {Object}  run\n * @return {Object} font\n */\nvar getFont = function getFont(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.font) || null;\n};\n\n/**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param  {number}  start code point index\n * @param  {number}  end code point index\n * @param  {Object}  font to generate new glyph\n * @param  {Object} glyph to be sliced\n * @return {Array} sliced glyph parts\n */\nvar slice$2 = function slice(start, end, font, glyph) {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  var codePoints = glyph.codePoints.slice(start, end);\n  var string = String.fromCodePoint.apply(String, codePoints);\n  return font ? font.layout(string).glyphs : [glyph];\n};\n\n/**\n * Return glyph index at string index, if glyph indices present.\n * Otherwise return string index\n *\n * @param  {number}  string index\n * @param  {Object}  run\n * @return {number}  glyph index\n */\nvar glyphIndexAt = function glyphIndexAt(index, run) {\n  var _run$glyphIndices;\n  var result = run === null || run === void 0 ? void 0 : (_run$glyphIndices = run.glyphIndices) === null || _run$glyphIndices === void 0 ? void 0 : _run$glyphIndices[index];\n  return isNil(result) ? index : result;\n};\n\n/**\n * Returns new array starting with zero, and keeping same relation between consecutive values\n *\n * @param  {Array[number]}  list\n * @return {boolean} normalized array\n */\nvar normalize = function normalize(array) {\n  var head = array[0];\n  return array.map(function (value) {\n    return value - head;\n  });\n};\n\n/**\n * Slice run between glyph indices range\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} sliced run\n */\nvar slice$1 = function slice(start, end, run) {\n  var _run$glyphs, _run$glyphs2;\n  var runScale = scale(run);\n  var font = getFont(run);\n\n  // Get glyph start and end indices\n  var startIndex = glyphIndexAt(start, run);\n  var endIndex = glyphIndexAt(end, run);\n\n  // Get start and end glyph\n  var startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];\n  var endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex];\n\n  // Get start ligature chunks (if any)\n  var startOffset = offset(start, run);\n  var startGlyphs = startOffset > 0 ? slice$2(startOffset, Infinity, font, startGlyph) : [];\n\n  // Get end ligature chunks (if any)\n  var endOffset = offset(end, run);\n  var endGlyphs = slice$2(0, endOffset, font, endGlyph);\n\n  // Compute new glyphs\n  var sliceStart = startIndex + Math.min(1, startOffset);\n  var glyphs = (run.glyphs || []).slice(sliceStart, endIndex);\n\n  // Compute new positions\n  var glyphPosition = function glyphPosition(g) {\n    return {\n      xAdvance: g.advanceWidth * runScale\n    };\n  };\n  var startPositions = startGlyphs.map(glyphPosition);\n  var positions = (run.positions || []).slice(sliceStart, endIndex);\n  var endPositions = endGlyphs.map(glyphPosition);\n  return Object.assign({}, run, {\n    start: run.start + start,\n    end: Math.min(run.end, run.start + end),\n    glyphIndices: normalize((run.glyphIndices || []).slice(start, end)),\n    glyphs: [startGlyphs, glyphs, endGlyphs].flat(),\n    positions: [startPositions, positions, endPositions].flat()\n  });\n};\n\n/**\n * Get run index that contains passed index\n *\n * @param  {number}  char index\n * @param  {Array}  runs array\n * @return {Array} run index\n */\nvar runIndexAt$1 = function runIndexAt(n, runs) {\n  if (!runs) return -1;\n  return runs.findIndex(function (run) {\n    return run.start <= n && n < run.end;\n  });\n};\n\n/**\n * Filter runs contained between start and end\n *\n * @param  {number}  start\n * @param  {number}  end\n * @param  {Array}  runs\n * @return {boolean} filtered runs\n */\nvar filter = function filter(start, end, runs) {\n  var startIndex = runIndexAt$1(start, runs);\n  var endIndex = Math.max(runIndexAt$1(end - 1, runs), startIndex);\n  return runs.slice(startIndex, endIndex + 1);\n};\n\n/**\n * Subtract scalar to run\n *\n * @param  {number}  scalar\n * @param  {Object}  run\n * @return {Object} subtracted run\n */\nvar subtract = function subtract(n, run) {\n  var start = run.start - n;\n  var end = run.end - n;\n  return Object.assign({}, run, {\n    start: start,\n    end: end\n  });\n};\n\n/**\n * Slice array of runs\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Array}  runs\n * @return {Array} sliced runs\n */\nvar sliceRuns = function sliceRuns(start, end, runs) {\n  var sliceFirstRun = function sliceFirstRun(a) {\n    return slice$1(start - a.start, end - a.start, a);\n  };\n  var sliceLastRun = function sliceLastRun(a) {\n    return slice$1(0, end - a.start, a);\n  };\n  return runs.map(function (run, i) {\n    var result = run;\n    var isFirst = i === 0;\n    var isLast = !isFirst && i === runs.length - 1;\n    if (isFirst) result = sliceFirstRun(run);\n    if (isLast) result = sliceLastRun(run);\n    return subtract(start, result);\n  });\n};\n\n/**\n * Slice attributed string between two indices\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {Object} attributedString\n */\nvar slice = function slice(start, end, attributedString) {\n  if (attributedString.string.length === 0) return attributedString;\n  var string = attributedString.string.slice(start, end);\n  var filteredRuns = filter(start, end, attributedString.runs);\n  var slicedRuns = sliceRuns(start, end, filteredRuns);\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: slicedRuns\n  });\n};\n\nvar findCharIndex = function findCharIndex(string) {\n  return string.search(/\\S/g);\n};\nvar findLastCharIndex = function findLastCharIndex(string) {\n  var match = string.match(/\\S/g);\n  return match ? string.lastIndexOf(match[match.length - 1]) : -1;\n};\n\n/**\n * Removes (strips) whitespace from both ends of the attributted string.\n *\n * @param  {Object}  attributedString\n * @return {Object} attributedString\n */\nvar trim = function trim(attributedString) {\n  var start = findCharIndex(attributedString.string);\n  var end = findLastCharIndex(attributedString.string);\n  return slice(start, end + 1, attributedString);\n};\n\n/**\n * Returns empty run\n *\n * @return {Object} empty run\n */\nvar empty$1 = function empty() {\n  return {\n    start: 0,\n    end: 0,\n    glyphIndices: [],\n    glyphs: [],\n    positions: [],\n    attributes: {}\n  };\n};\n\nvar isNumber = function isNumber(value) {\n  return typeof value === 'number';\n};\n\n/**\n * Append glyph indices with given length\n *\n * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]\n *\n * @param  {number}  length\n * @param  {Array}  glyph indices\n * @return {Array}  extended glyph indices\n */\nvar appendIndices = function appendIndices(length, indices) {\n  var lastIndex = last(indices);\n  var value = isNil(lastIndex) ? 0 : lastIndex + 1;\n  var newIndices = Array(length).fill(value);\n  return indices.concat(newIndices);\n};\n\n/**\n * Get glyph for a given code point\n *\n * @param  {number}  codePoint\n * @param  {Object}  font\n * @return {Object}  glyph\n * */\nvar fromCodePoint = function fromCodePoint(value, font) {\n  return font && value ? font.glyphForCodePoint(value) : null;\n};\n\n/**\n * Append glyph to run\n *\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object} run with glyph\n */\nvar appendGlyph = function appendGlyph(glyph, run) {\n  var _glyph$codePoints;\n  var glyphLength = ((_glyph$codePoints = glyph.codePoints) === null || _glyph$codePoints === void 0 ? void 0 : _glyph$codePoints.length) || 0;\n  var end = run.end + glyphLength;\n  var glyphs = run.glyphs.concat(glyph);\n  var glyphIndices = appendIndices(glyphLength, run.glyphIndices);\n  if (!run.positions) return Object.assign({}, run, {\n    end: end,\n    glyphs: glyphs,\n    glyphIndices: glyphIndices\n  });\n  var positions = run.positions.concat({\n    xAdvance: glyph.advanceWidth * scale(run)\n  });\n  return Object.assign({}, run, {\n    end: end,\n    glyphs: glyphs,\n    glyphIndices: glyphIndices,\n    positions: positions\n  });\n};\n\n/**\n * Append glyph or code point to run\n *\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object} run with glyph\n */\nvar append$1 = function append(value, run) {\n  if (!value) return run;\n  var font = getFont(run);\n  var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return appendGlyph(glyph, run);\n};\n\n/**\n * Get string from array of code points\n *\n * @param {Array} code points\n * @return {String} string\n */\nvar stringFromCodePoints = function stringFromCodePoints(codePoints) {\n  return String.fromCodePoint.apply(String, codePoints);\n};\n\n/**\n * Append glyph into last run of attributed string\n *\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar append = function append(glyph, attributedString) {\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  var codePointsString = stringFromCodePoints(codePoints);\n  var string = attributedString.string + codePointsString;\n  var firstRuns = attributedString.runs.slice(0, -1);\n  var lastRun = last(attributedString.runs) || empty$1();\n  var runs = firstRuns.concat(append$1(glyph, lastRun));\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: runs\n  });\n};\n\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param  {number}  font\n * @return {Object} ellipsis codepoint\n */\nvar getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n  var _font$encode = font.encode(ELLIPSIS_STRING),\n    codePoints = _font$encode[0];\n  return parseInt(codePoints[0], 16);\n};\n\n/**\n * Trucante block with ellipsis\n *\n * @param  {number}  lines quantity\n * @param  {Object}  paragraph block\n * @return {Object} sliced paragraph block\n */\nvar truncate = function truncate(block) {\n  var _last, _last2, _last2$attributes;\n  var runs = ((_last = last(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n  var font = (_last2 = last(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n  if (font) {\n    var _Object$assign;\n    var index = block.length - 1;\n    var codePoint = getEllipsisCodePoint(font);\n    var glyph = font.glyphForCodePoint(codePoint);\n    var lastBlock = append(glyph, trim(block[index]));\n    return Object.assign([], block, (_Object$assign = {}, _Object$assign[index] = lastBlock, _Object$assign));\n  }\n  return block;\n};\n\n/**\n * Omit attribute from run\n *\n * @param  {Object}  run\n * @return {Object} run without ommited attribute\n */\nvar omit = function omit(value, run) {\n  var attributes = Object.assign({}, run.attributes);\n  delete attributes[value];\n  return Object.assign({}, run, {\n    attributes: attributes\n  });\n};\n\n/**\n * Get run ascent\n *\n * @param  {Object}  run\n * @return {boolean} ascent\n */\nvar ascent$1 = function ascent(run) {\n  var _run$attributes, _run$attributes$attac, _run$attributes2, _run$attributes2$font;\n  var attachmentHeight = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$attac = _run$attributes.attachment) === null || _run$attributes$attac === void 0 ? void 0 : _run$attributes$attac.height) || 0;\n  var fontAscent = ((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : (_run$attributes2$font = _run$attributes2.font) === null || _run$attributes2$font === void 0 ? void 0 : _run$attributes2$font.ascent) || 0;\n  return Math.max(attachmentHeight, fontAscent * scale(run));\n};\n\n/**\n * Get run descent\n *\n * @param  {Object}  run\n * @return {number} descent\n */\nvar descent = function descent(run) {\n  var _run$attributes, _run$attributes$font;\n  var fontDescent = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.descent) || 0;\n  return scale(run) * fontDescent;\n};\n\n/**\n * Get run lineGap\n *\n * @param  {Object}  run\n * @return {number} lineGap\n */\nvar lineGap = function lineGap(run) {\n  var _run$attributes, _run$attributes$font;\n  return (((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.lineGap) || 0) * scale(run);\n};\n\n/**\n * Get run height\n *\n * @param  {Object}  run\n * @return {number} height\n */\nvar height$1 = function height(run) {\n  var _run$attributes;\n  var lineHeight = (_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.lineHeight;\n  return lineHeight || lineGap(run) + ascent$1(run) - descent(run);\n};\n\n/**\n * Returns attributed string height\n *\n * @param {Object} attributed string\n * @return {number} height\n */\nvar height = function height(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return Math.max(acc, height$1(run));\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\n\n/**\n * Checks if two rects intersect each other\n *\n * @param {Rect} a\n * @param {Rect} b\n * @returns {Boolean} rects intersects\n */\nvar intersects = function intersects(a, b) {\n  var x = Math.max(a.x, b.x);\n  var num1 = Math.min(a.x + a.width, b.x + b.width);\n  var y = Math.max(a.y, b.y);\n  var num2 = Math.min(a.y + a.height, b.y + b.height);\n  return num1 >= x && num2 >= y;\n};\n\nvar _excluded = [\"excludeRects\"];\nvar getLineFragment = function getLineFragment(lineRect, excludeRect) {\n  if (!intersects(excludeRect, lineRect)) return [lineRect];\n  var eStart = excludeRect.x;\n  var eEnd = excludeRect.x + excludeRect.width;\n  var lStart = lineRect.x;\n  var lEnd = lineRect.x + lineRect.width;\n  var a = Object.assign({}, lineRect, {\n    width: eStart - lStart\n  });\n  var b = Object.assign({}, lineRect, {\n    x: eEnd,\n    width: lEnd - eEnd\n  });\n  return [a, b].filter(function (r) {\n    return r.width > 0;\n  });\n};\nvar getLineFragments = function getLineFragments(rect, excludeRects) {\n  var fragments = [rect];\n  var _loop = function _loop() {\n    var excludeRect = excludeRects[i];\n    fragments = fragments.reduce(function (acc, fragment) {\n      var pieces = getLineFragment(fragment, excludeRect);\n      return acc.concat(pieces);\n    }, []);\n  };\n  for (var i = 0; i < excludeRects.length; i += 1) {\n    _loop();\n  }\n  return fragments;\n};\nvar generateLineRects = function generateLineRects(container, height) {\n  var excludeRects = container.excludeRects,\n    rect = _objectWithoutPropertiesLoose(container, _excluded);\n  if (!excludeRects) return [rect];\n  var lineRects = [];\n  var maxY = Math.max.apply(Math, excludeRects.map(function (r) {\n    return r.y + r.height;\n  }));\n  var currentRect = rect;\n  while (currentRect.y < maxY) {\n    var _partition = partition(currentRect, height),\n      lineRect = _partition[0],\n      rest = _partition[1];\n    var lineRectFragments = getLineFragments(lineRect, excludeRects);\n    currentRect = rest;\n    lineRects.push.apply(lineRects, lineRectFragments);\n  }\n  return [].concat(lineRects, [currentRect]);\n};\n\nvar ATTACHMENT_CODE$1 = \"\\uFFFC\"; // 65532\n\n/**\n * Remove attachment attribute if no char present\n *\n * @param  {Object} attributed string\n * @return {Object} attributed string\n */\nvar purgeAttachments = function purgeAttachments(attributedString) {\n  var shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE$1);\n  if (!shouldPurge) return attributedString;\n  var runs = attributedString.runs.map(function (run) {\n    return omit('attachment', run);\n  });\n  return Object.assign({}, attributedString, {\n    runs: runs\n  });\n};\n\n/**\n * Layout paragraphs inside rectangle\n *\n * @param  {Object} rect\n * @param  {Array} attributed strings\n * @return {Object} layout blocks\n */\nvar layoutLines = function layoutLines(rects, lines, indent) {\n  var rect = rects.shift();\n  var currentY = rect.y;\n  return lines.map(function (line, i) {\n    var _line$runs, _line$runs$;\n    var lineIndent = i === 0 ? indent : 0;\n    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    var height$1 = Math.max(height(line), style.lineHeight);\n    if (currentY + height$1 > rect.y + rect.height && rects.length > 0) {\n      rect = rects.shift();\n      currentY = rect.y;\n    }\n    var newLine = Object.assign({}, line);\n    delete newLine.syllables;\n    newLine.box = {\n      x: rect.x + lineIndent,\n      y: currentY,\n      width: rect.width - lineIndent,\n      height: height$1\n    };\n    currentY += height$1;\n    return purgeAttachments(newLine);\n  });\n};\n\n/**\n * Performs line breaking and layout\n *\n * @param  {Object} engines\n * @param  {Object}  layout options\n * @param  {Object} rect\n * @param  {Object} attributed string\n * @return {Object} layout block\n */\nvar layoutParagraph = function layoutParagraph(engines, options) {\n  return function (container, paragraph) {\n    var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;\n    var height$1 = height(paragraph);\n    var indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;\n    var rects = generateLineRects(container, height$1);\n    var availableWidths = rects.map(function (r) {\n      return r.width;\n    });\n    availableWidths[0] -= indent;\n    var lines = engines.linebreaker(options)(paragraph, availableWidths);\n    return layoutLines(rects, lines, indent);\n  };\n};\n\n/**\n * Slice block at given height\n *\n * @param  {number}  height\n * @param  {Object}  paragraph block\n * @return {number} sliced paragraph block\n */\nvar sliceAtHeight = function sliceAtHeight(height, block) {\n  var newBlock = [];\n  var counter = 0;\n  for (var i = 0; i < block.length; i += 1) {\n    var line = block[i];\n    counter += line.box.height;\n    if (counter < height) {\n      newBlock.push(line);\n    } else {\n      break;\n    }\n  }\n  return newBlock;\n};\n\n/**\n * Layout paragraphs inside container until it does not\n * fit anymore, performing line wrapping in the process.\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  container rect\n * @param  {Object}  attributed strings (paragraphs)\n * @return {Array} paragraph blocks\n */\nvar typesetter = function typesetter(engines, options, container) {\n  return function (attributedStrings) {\n    var blocks = [];\n    var paragraphs = [].concat(attributedStrings);\n    var layoutBlock = layoutParagraph(engines, options);\n    var maxLines = isNil(container.maxLines) ? Infinity : container.maxLines;\n    var truncateEllipsis = container.truncateMode === 'ellipsis';\n    var linesCount = maxLines;\n    var paragraphRect = copy(container);\n    var nextParagraph = paragraphs.shift();\n    while (linesCount > 0 && nextParagraph) {\n      var block = layoutBlock(paragraphRect, nextParagraph);\n      var slicedBlock = block.slice(0, linesCount);\n      var linesHeight = height$2(slicedBlock);\n      var shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;\n      linesCount -= slicedBlock.length;\n      if (paragraphRect.height >= linesHeight) {\n        blocks.push(shouldTruncate ? truncate(slicedBlock) : slicedBlock);\n        paragraphRect = crop(linesHeight, paragraphRect);\n        nextParagraph = paragraphs.shift();\n      } else {\n        blocks.push(truncate(sliceAtHeight(paragraphRect.height, slicedBlock)));\n        break;\n      }\n    }\n    return blocks;\n  };\n};\n\nvar DUMMY_CODEPOINT = 123;\n\n/**\n * Resolve string indices based on glyphs code points\n *\n * @param  {Array}  glyphs\n * @return {Array} glyph indices\n */\nvar resolve = function resolve(glyphs) {\n  if (glyphs === void 0) {\n    glyphs = [];\n  }\n  return glyphs.reduce(function (acc, glyph) {\n    var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [DUMMY_CODEPOINT];\n    if (acc.length === 0) return codePoints.map(function () {\n      return 0;\n    });\n    var last = acc[acc.length - 1];\n    var next = codePoints.map(function () {\n      return last + 1;\n    });\n    return [].concat(acc, next);\n  }, []);\n};\n\nvar getCharacterSpacing = function getCharacterSpacing(run) {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.characterSpacing) || 0;\n};\n\n/**\n * Scale run positions\n *\n * @param  {Object}  run\n * @param  {Array}  positions\n * @return {Array} scaled positions\n */\nvar scalePositions = function scalePositions(run, positions) {\n  var runScale = scale(run);\n  var characterSpacing = getCharacterSpacing(run);\n  return positions.map(function (position, i) {\n    var isLast = i === positions.length;\n    var xSpacing = isLast ? 0 : characterSpacing;\n    return Object.assign({}, position, {\n      xAdvance: position.xAdvance * runScale + xSpacing,\n      yAdvance: position.yAdvance * runScale,\n      xOffset: position.xOffset * runScale,\n      yOffset: position.yOffset * runScale\n    });\n  });\n};\n\n/**\n * Create glyph run\n *\n * @param  {String}  string\n * @param  {Object}  run\n * @return {Object}  glyph run\n */\nvar layoutRun = function layoutRun(string) {\n  return function (run) {\n    var start = run.start,\n      end = run.end,\n      _run$attributes2 = run.attributes,\n      attributes = _run$attributes2 === void 0 ? {} : _run$attributes2;\n    var font = attributes.font;\n    if (!font) return _extends({}, run, {\n      glyphs: [],\n      glyphIndices: [],\n      positions: []\n    });\n    var runString = string.slice(start, end);\n    var glyphRun = font.layout(runString);\n    var positions = scalePositions(run, glyphRun.positions);\n    var glyphIndices = resolve(glyphRun.glyphs);\n    return _extends({}, run, {\n      positions: positions,\n      glyphIndices: glyphIndices,\n      glyphs: glyphRun.glyphs\n    });\n  };\n};\n\n/**\n * Generate glyphs for single attributed string\n *\n * @param  {Object}  layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings\n * @return {Array} attributed string with glyphs\n */\nvar generateGlyphs = function generateGlyphs() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(layoutRun(attributedString.string));\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\n\n/**\n * Resolves yOffset for run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\nvar resolveRunYOffset = function resolveRunYOffset(run) {\n  var _run$attributes, _run$attributes$font, _run$attributes2;\n  if (!run.positions) return run;\n  var unitsPerEm = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.unitsPerEm) || 0;\n  var yOffset = (((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : _run$attributes2.yOffset) || 0) * unitsPerEm;\n  var positions = run.positions.map(function (p) {\n    return Object.assign({}, p, {\n      yOffset: yOffset\n    });\n  });\n  return Object.assign({}, run, {\n    positions: positions\n  });\n};\n\n/**\n * Resolves yOffset for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\nvar resolveYOffset = function resolveYOffset() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(resolveRunYOffset);\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\n\n/**\n * Sort runs in ascending order\n *\n * @param  {Array}  runs\n * @return {Array} sorted runs\n */\nvar sort = function sort(runs) {\n  return runs.sort(function (a, b) {\n    return a.start - b.start || a.end - b.end;\n  });\n};\n\n/**\n * Is run empty (start === end)\n *\n * @param  {Object}  run\n * @return {Object} is run empty\n */\nvar isEmpty = function isEmpty(run) {\n  return run.start === run.end;\n};\n\nvar sortPoints = function sortPoints(a, b) {\n  return a[1] - b[1] || a[3] - b[3];\n};\nvar generatePoints = function generatePoints(runs) {\n  var result = runs.reduce(function (acc, run, i) {\n    return acc.concat([['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]]);\n  }, []);\n  return result.sort(sortPoints);\n};\nvar mergeRuns = function mergeRuns(runs) {\n  return runs.reduce(function (acc, run) {\n    var attributes = Object.assign({}, acc.attributes, run.attributes);\n    return Object.assign({}, run, {\n      attributes: attributes\n    });\n  }, {});\n};\nvar groupEmptyRuns = function groupEmptyRuns(runs) {\n  var groups = runs.reduce(function (acc, run) {\n    if (!acc[run.start]) acc[run.start] = [];\n    acc[run.start].push(run);\n    return acc;\n  }, {});\n  return Object.values(groups);\n};\nvar flattenEmptyRuns = function flattenEmptyRuns(runs) {\n  return groupEmptyRuns(runs).map(mergeRuns);\n};\nvar flattenRegularRuns = function flattenRegularRuns(runs) {\n  var res = [];\n  var points = generatePoints(runs);\n  var start = -1;\n  var attrs = {};\n  var stack = [];\n  for (var i = 0; i < points.length; i += 1) {\n    var _points$i = points[i],\n      type = _points$i[0],\n      offset = _points$i[1],\n      attributes = _points$i[2];\n    if (start !== -1 && start < offset) {\n      res.push({\n        start: start,\n        end: offset,\n        attributes: attrs\n      });\n    }\n    if (type === 'start') {\n      stack.push(attributes);\n      attrs = Object.assign({}, attrs, attributes);\n    } else {\n      attrs = {};\n      for (var j = 0; j < stack.length; j += 1) {\n        if (stack[j] === attributes) {\n          // eslint-disable-next-line no-plusplus\n          stack.splice(j--, 1);\n        } else {\n          attrs = Object.assign({}, attrs, stack[j]);\n        }\n      }\n    }\n    start = offset;\n  }\n  return res;\n};\n\n/**\n * Flatten many runs\n *\n * @param  {Array}  runs\n * @return {Array} flatten runs\n */\nvar flatten = function flatten(runs) {\n  if (runs === void 0) {\n    runs = [];\n  }\n  var emptyRuns = flattenEmptyRuns(runs.filter(function (run) {\n    return isEmpty(run);\n  }));\n  var regularRuns = flattenRegularRuns(runs.filter(function (run) {\n    return !isEmpty(run);\n  }));\n  return sort(emptyRuns.concat(regularRuns));\n};\n\n/**\n * Returns empty attributed string\n *\n * @return {Object} empty attributed string\n */\nvar empty = function empty() {\n  return {\n    string: '',\n    runs: []\n  };\n};\n\nvar omitFont = function omitFont(attributedString) {\n  var runs = attributedString.runs.map(function (run) {\n    return omit('font', run);\n  });\n  return Object.assign({}, attributedString, {\n    runs: runs\n  });\n};\n\n/**\n * Performs font substitution and script itemization on attributed string\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} processed attributed string\n */\nvar preprocessRuns = function preprocessRuns(engines, options) {\n  return function (attributedString) {\n    if (isNil(attributedString)) return empty();\n    var string = attributedString.string;\n    var fontSubstitution = engines.fontSubstitution,\n      scriptItemizer = engines.scriptItemizer;\n    var _omitFont = omitFont(attributedString),\n      omittedFontRuns = _omitFont.runs;\n    var _fontSubstitution = fontSubstitution(options)(attributedString),\n      substitutedRuns = _fontSubstitution.runs;\n    var _scriptItemizer = scriptItemizer(options)(attributedString),\n      itemizationRuns = _scriptItemizer.runs;\n    var runs = substitutedRuns.concat(itemizationRuns).concat(omittedFontRuns);\n    return {\n      string: string,\n      runs: flatten(runs)\n    };\n  };\n};\n\n/**\n * Get attributed string start value\n *\n * @param  {Object}  attributed string\n * @return {number} start\n */\nvar start = function start(attributedString) {\n  var runs = attributedString.runs;\n  return runs.length === 0 ? 0 : runs[0].start;\n};\n\n/**\n * Get attributed string end value\n *\n * @param  {Object}  attributed string\n * @return {number} end\n */\nvar end = function end(attributedString) {\n  var runs = attributedString.runs;\n  return runs.length === 0 ? 0 : last(runs).end;\n};\n\n/**\n * Get attributed string length\n *\n * @param  {Object}  glyph string\n * @return {number} end\n */\nvar length$1 = function length(attributedString) {\n  return end(attributedString) - start(attributedString);\n};\n\n/**\n * Breaks attributed string into paragraphs\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Array} attributed string array\n */\nvar splitParagraphs = function splitParagraphs() {\n  return function (attributedString) {\n    var res = [];\n    var start = 0;\n    var breakPoint = attributedString.string.indexOf('\\n') + 1;\n    while (breakPoint > 0) {\n      res.push(slice(start, breakPoint, attributedString));\n      start = breakPoint;\n      breakPoint = attributedString.string.indexOf('\\n', breakPoint) + 1;\n    }\n    if (start === 0) {\n      res.push(attributedString);\n    } else if (start < attributedString.string.length) {\n      res.push(slice(start, length$1(attributedString), attributedString));\n    }\n    return res;\n  };\n};\n\n/**\n * Return positions advance width\n *\n * @param  {Object}  positions\n * @return {number} advance width\n */\nvar advanceWidth$2 = function advanceWidth(positions) {\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Return run advance width\n *\n * @param  {Object}  run\n * @return {number} advance width\n */\nvar advanceWidth$1 = function advanceWidth(run) {\n  return advanceWidth$2(run.positions || []);\n};\n\n/**\n * Returns attributed string advancewidth\n *\n * @param {Object} attributed string\n * @return {number} advance width\n */\nvar advanceWidth = function advanceWidth(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return acc + advanceWidth$1(run);\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\n\nvar WHITE_SPACES_CODE = 32;\n\n/**\n * Check if glyph is white space\n *\n * @param  {Object}  glyph\n * @return {Boolean}  is white space\n * */\nvar isWhiteSpace = function isWhiteSpace(glyph) {\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  return codePoints.includes(WHITE_SPACES_CODE);\n};\n\n/**\n * Get white space leading positions\n *\n * @param  {Object}  run\n * @return {Array} white space leading positions\n */\nvar leadingPositions = function leadingPositions(run) {\n  var glyphs = run.glyphs || [];\n  var positions = run.positions || [];\n  var leadingWhitespaces = glyphs.findIndex(function (g) {\n    return !isWhiteSpace(g);\n  });\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run leading white space offset\n *\n * @param  {Object}  run\n * @return {number} leading white space offset\n */\nvar leadingOffset$1 = function leadingOffset(run) {\n  var positions = leadingPositions(run);\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Get attributed string leading white space offset\n *\n * @param  {Object}  attributed string\n * @return {number} leading white space offset\n */\nvar leadingOffset = function leadingOffset(attributedString) {\n  var runs = attributedString.runs || [];\n  return leadingOffset$1(runs[0]);\n};\n\nvar reverse = function reverse(array) {\n  return [].concat(array).reverse();\n};\n\n/**\n * Get white space trailing positions\n *\n * @param  {Object}  run\n * @return {Array} white space trailing positions\n */\nvar trailingPositions = function trailingPositions(run) {\n  var glyphs = reverse(run.glyphs || []);\n  var positions = reverse(run.positions || []);\n  var leadingWhitespaces = glyphs.findIndex(function (g) {\n    return !isWhiteSpace(g);\n  });\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run trailing white space offset\n *\n * @param  {Object}  run\n * @return {number} trailing white space offset\n */\nvar trailingOffset$1 = function trailingOffset(run) {\n  var positions = trailingPositions(run);\n  return positions.reduce(function (acc, pos) {\n    return acc + (pos.xAdvance || 0);\n  }, 0);\n};\n\n/**\n * Get attributed string trailing white space offset\n *\n * @param  {Object}  attributed string\n * @return {number} trailing white space offset\n */\nvar trailingOffset = function trailingOffset(attributedString) {\n  var runs = attributedString.runs || [];\n  return trailingOffset$1(last(runs));\n};\n\n/**\n * Drop last char of run\n *\n * @param  {Object}  run\n * @return {boolean} run without last char\n */\nvar dropLast$1 = function dropLast(run) {\n  return slice$1(0, run.end - run.start - 1, run);\n};\n\n/**\n * Drop last glyph\n *\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar dropLast = function dropLast(attributeString) {\n  var string = dropLast$2(attributeString.string);\n  var runs = adjust(-1, dropLast$1, attributeString.runs);\n  return Object.assign({}, attributeString, {\n    string: string,\n    runs: runs\n  });\n};\n\nvar ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n\n/**\n * Remove new line char at the end of line if present\n *\n * @param  {Object}  line\n * @return {Object} line\n */\nvar removeNewLine = function removeNewLine(line) {\n  return last(line.string) === '\\n' ? dropLast(line) : line;\n};\nvar getOverflowLeft = function getOverflowLeft(line) {\n  return leadingOffset(line) + (line.overflowLeft || 0);\n};\nvar getOverflowRight = function getOverflowRight(line) {\n  return trailingOffset(line) + (line.overflowRight || 0);\n};\n\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param  {Object}  line\n * @return {Object} line\n */\nvar adjustOverflow = function adjustOverflow(line) {\n  var overflowLeft = getOverflowLeft(line);\n  var overflowRight = getOverflowRight(line);\n  var x = line.box.x - overflowLeft;\n  var width = line.box.width + overflowLeft + overflowRight;\n  var box = Object.assign({}, line.box, {\n    x: x,\n    width: width\n  });\n  return Object.assign({}, line, {\n    box: box,\n    overflowLeft: overflowLeft,\n    overflowRight: overflowRight\n  });\n};\n\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {string}  text align\n * @param  {Object}  line\n * @return {Object} line\n */\nvar justifyLine$1 = function justifyLine(engines, options, align) {\n  return function (line) {\n    var lineWidth = advanceWidth(line);\n    var alignFactor = ALIGNMENT_FACTORS[align] || 0;\n    var remainingWidth = Math.max(0, line.box.width - lineWidth);\n    var shouldJustify = align === 'justify' || lineWidth > line.box.width;\n    var x = line.box.x + remainingWidth * alignFactor;\n    var box = Object.assign({}, line.box, {\n      x: x\n    });\n    var newLine = Object.assign({}, line, {\n      box: box\n    });\n    return shouldJustify ? engines.justification(options)(newLine) : newLine;\n  };\n};\nvar finalizeLine = function finalizeLine(line) {\n  var lineAscent = 0;\n  var lineDescent = 0;\n  var lineHeight = 0;\n  var lineXAdvance = 0;\n  var runs = line.runs.map(function (run) {\n    var height = height$1(run);\n    var ascent = ascent$1(run);\n    var descent$1 = descent(run);\n    var xAdvance = advanceWidth$1(run);\n    lineHeight = Math.max(lineHeight, height);\n    lineAscent = Math.max(lineAscent, ascent);\n    lineDescent = Math.max(lineDescent, descent$1);\n    lineXAdvance += xAdvance;\n    return Object.assign({}, run, {\n      height: height,\n      ascent: ascent,\n      descent: descent$1,\n      xAdvance: xAdvance\n    });\n  });\n  return Object.assign({}, line, {\n    runs: runs,\n    height: lineHeight,\n    ascent: lineAscent,\n    descent: lineDescent,\n    xAdvance: lineXAdvance\n  });\n};\n\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  line\n * @param  {number}  line index\n * @param  {Array}  total lines\n * @return {Object} line\n */\nvar finalizeBlock = function finalizeBlock(engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  return function (line, i, lines) {\n    var _line$runs, _line$runs$;\n    var isLastFragment = i === lines.length - 1;\n    var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    var align = isLastFragment ? style.alignLastLine : style.align;\n    return compose(finalizeLine, engines.textDecoration(options), justifyLine$1(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Array}  line blocks\n * @return {Array} line blocks\n */\nvar finalizeFragments = function finalizeFragments(engines, options) {\n  return function (blocks) {\n    var blockFinalizer = finalizeBlock(engines, options);\n    return blocks.map(function (block) {\n      return block.map(blockFinalizer);\n    });\n  };\n};\n\nvar ATTACHMENT_CODE = 0xfffc; // 65532\n\nvar isReplaceGlyph = function isReplaceGlyph(glyph) {\n  return glyph.codePoints.includes(ATTACHMENT_CODE);\n};\n\n/**\n * Resolve attachments of run\n *\n * @param  {Object}  run\n * @return {Object} run\n */\nvar resolveRunAttachments = function resolveRunAttachments(run) {\n  var _run$attributes;\n  if (!run.positions) return run;\n  var glyphs = run.glyphs || [];\n  var attachment = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.attachment) || {};\n  var positions = run.positions.map(function (position, i) {\n    var glyph = glyphs[i];\n    if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n      return Object.assign({}, position, {\n        xAdvance: attachment.width\n      });\n    }\n    return Object.assign({}, position);\n  });\n  return Object.assign({}, run, {\n    positions: positions\n  });\n};\n\n/**\n * Resolve attachments for multiple paragraphs\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Array}  attributed strings (paragraphs)\n * @return {Array} attributed strings (paragraphs)\n */\nvar resolveAttachments = function resolveAttachments() {\n  return function (attributedString) {\n    var runs = attributedString.runs.map(resolveRunAttachments);\n    return Object.assign({}, attributedString, {\n      runs: runs\n    });\n  };\n};\n\nvar applyAttributes = function applyAttributes(a) {\n  return {\n    align: a.align || 'left',\n    alignLastLine: a.alignLastLine || (a.align === 'justify' ? 'left' : a.align || 'left'),\n    attachment: a.attachment || null,\n    backgroundColor: a.backgroundColor || null,\n    bidiLevel: a.bidiLevel || null,\n    bullet: a.bullet || null,\n    characterSpacing: a.characterSpacing || 0,\n    color: a.color || 'black',\n    features: a.features || [],\n    fill: a.fill !== false,\n    font: a.font || null,\n    fontSize: a.fontSize || 12,\n    hangingPunctuation: a.hangingPunctuation || false,\n    hyphenationFactor: a.hyphenationFactor || 0,\n    indent: a.indent || 0,\n    justificationFactor: a.justificationFactor || 1,\n    lineHeight: a.lineHeight || null,\n    lineSpacing: a.lineSpacing || 0,\n    link: a.link || null,\n    marginLeft: a.marginLeft || a.margin || 0,\n    marginRight: a.marginRight || a.margin || 0,\n    opacity: a.opacity,\n    paddingTop: a.paddingTop || a.padding || 0,\n    paragraphSpacing: a.paragraphSpacing || 0,\n    underline: a.underline || false,\n    underlineColor: a.underlineColor || a.color || 'black',\n    underlineStyle: a.underlineStyle || 'solid',\n    script: a.script || null,\n    shrinkFactor: a.shrinkFactor || 0,\n    strike: a.strike || false,\n    strikeColor: a.strikeColor || a.color || 'black',\n    strikeStyle: a.strikeStyle || 'solid',\n    stroke: a.stroke || false,\n    verticalAlign: a.verticalAlign || null,\n    wordSpacing: a.wordSpacing || 0,\n    yOffset: a.yOffset || 0\n  };\n};\n\n/**\n * Apply default style to run\n *\n * @param  {Object}  run\n * @return {Object} run with styles\n */\nvar applyRunStyles = function applyRunStyles(run) {\n  var attributes = applyAttributes(run.attributes);\n  return Object.assign({}, run, {\n    attributes: attributes\n  });\n};\n\n/**\n * Apply default attributes for an attributed string\n *\n * @param  {Object}  engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar applyDefaultStyles = function applyDefaultStyles() {\n  return function (attributedString) {\n    var string = attributedString.string || '';\n    var runs = (attributedString.runs || []).map(applyRunStyles);\n    return {\n      string: string,\n      runs: runs\n    };\n  };\n};\n\n/* eslint-disable no-restricted-syntax */\n\n/**\n * Apply scaling and yOffset for verticalAlign 'sub' and 'super'.\n *\n * @param  {Object} layout options\n * @param  {Object} attributed string\n * @return {Object} attributed string\n */\nvar verticalAlignment = function verticalAlignment() {\n  return function (attributedString) {\n    attributedString.runs.forEach(function (run) {\n      var attributes = run.attributes;\n      var verticalAlign = attributes.verticalAlign;\n      if (verticalAlign === 'sub') {\n        attributes.yOffset = -0.2;\n      } else if (verticalAlign === 'super') {\n        attributes.yOffset = 0.4;\n      }\n    });\n    return attributedString;\n  };\n};\n\n/**\n * A LayoutEngine is the main object that performs text layout.\n * It accepts an AttributedString and a Container object\n * to layout text into, and uses several helper objects to perform\n * various layout tasks. These objects can be overridden to customize\n * layout behavior.\n *\n * @param  {Object}  engines\n * @param  {Object}  attributed string\n * @param  {Object}  container rect\n * @param  {Object}  layout options\n * @return {Array} paragraph blocks\n */\nvar layoutEngine = function layoutEngine(engines) {\n  return function (attributedString, container, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var processParagraph = compose(resolveYOffset(), resolveAttachments(), generateGlyphs(), verticalAlignment(), wrapWords(engines, options));\n    var processParagraphs = function processParagraphs(paragraphs) {\n      return paragraphs.map(processParagraph);\n    };\n    return compose(finalizeFragments(engines, options), typesetter(engines, options, container), processParagraphs, splitParagraphs(), preprocessRuns(engines, options), applyDefaultStyles())(attributedString);\n  };\n};\n\n/* eslint-disable no-plusplus */\nvar INFINITY = 10000;\nvar getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n  var position = null;\n  var minimumBadness = Infinity;\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n  var calculateRatio = function calculateRatio(node) {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    }\n    if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n    return 0;\n  };\n  for (var i = 0; i < subnodes.length; i += 1) {\n    var node = subnodes[i];\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n    if (sum.width - sum.shrink > lineLength) {\n      if (position === null) {\n        var j = i === 0 ? i + 1 : i;\n        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {\n          j++;\n        }\n        position = j - 1;\n      }\n      break;\n    }\n    if (node.type === 'penalty' || node.type === 'glue') {\n      var ratio = calculateRatio(node);\n      var penalty = node.type === 'penalty' ? node.penalty : 0;\n      var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\nvar applyBestFit = function applyBestFit(nodes, widths) {\n  var count = 0;\n  var lineNumber = 0;\n  var subnodes = nodes;\n  var breakpoints = [{\n    position: 0\n  }];\n  while (subnodes.length > 0) {\n    var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n    if (breakpoint !== null) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n  return breakpoints;\n};\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable max-classes-per-file */\nvar Node = /*#__PURE__*/function () {\n  function Node(data) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n  var _proto = Node.prototype;\n  _proto.toString = function toString() {\n    return this.data.toString();\n  };\n  return Node;\n}();\nvar LinkedList = /*#__PURE__*/function () {\n  function LinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n  }\n  var _proto2 = LinkedList.prototype;\n  _proto2.isLinked = function isLinked(node) {\n    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());\n  };\n  _proto2.size = function size() {\n    return this.listSize;\n  };\n  _proto2.isEmpty = function isEmpty() {\n    return this.listSize === 0;\n  };\n  _proto2.first = function first() {\n    return this.head;\n  };\n  _proto2.last = function last() {\n    return this.last;\n  };\n  _proto2.toString = function toString() {\n    return this.toArray().toString();\n  };\n  _proto2.toArray = function toArray() {\n    var node = this.head;\n    var result = [];\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n    return result;\n  };\n  _proto2.forEach = function forEach(fun) {\n    var node = this.head;\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  };\n  _proto2.contains = function contains(n) {\n    var node = this.head;\n    if (!this.isLinked(n)) {\n      return false;\n    }\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n      node = node.next;\n    }\n    return false;\n  };\n  _proto2.at = function at(i) {\n    var node = this.head;\n    var index = 0;\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n      node = node.next;\n      index += 1;\n    }\n    return null;\n  };\n  _proto2.insertAfter = function insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  };\n  _proto2.insertBefore = function insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  };\n  _proto2.push = function push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n    return this;\n  };\n  _proto2.unshift = function unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n    return this;\n  };\n  _proto2.remove = function remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    this.listSize -= 1;\n    return this;\n  };\n  _proto2.pop = function pop() {\n    var node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n  _proto2.shift = function shift() {\n    var node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  };\n  return LinkedList;\n}();\nLinkedList.Node = Node;\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nvar linebreak = function linebreak(nodes, lines, settings) {\n  var options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  var activeNodes = new LinkedList();\n  var sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  var lineLengths = lines;\n  var breaks = [];\n  var tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position: position,\n      demerits: demerits,\n      ratio: ratio,\n      line: line,\n      fitnessClass: fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous: previous\n    };\n  }\n  function computeCost(start, end, active, currentLine) {\n    var width = sum.width - active.totals.width;\n    var stretch = 0;\n    var shrink = 0;\n    // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n    var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n      return linebreak.infinity;\n    }\n    if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n      return linebreak.infinity;\n    }\n\n    // perfect match\n    return 0;\n  }\n\n  // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n  function computeSum(breakPointIndex) {\n    var result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n    for (var i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  // The main loop of the algorithm\n  // eslint-disable-next-line no-shadow\n  function mainLoop(node, index, nodes) {\n    var active = activeNodes.first();\n    var next = null;\n    var ratio = 0;\n    var demerits = 0;\n    var candidates = [];\n    var badness;\n    var currentLine = 0;\n    var tmpSum;\n    var currentClass = 0;\n    var fitnessClass;\n    var candidate;\n    var newNode;\n\n    // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }];\n\n      // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine);\n\n        // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        }\n\n        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3);\n\n          // Positive penalty\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);\n            // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);\n            // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          }\n\n          // Calculate the fitness class for this candidate active node.\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          }\n\n          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          }\n\n          // Add the total demerits of the active node to get the total demerits of this candidate node.\n          demerits += active.data.demerits;\n\n          // Only store the best candidate for each fitness class\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active: active,\n              demerits: demerits,\n              ratio: ratio\n            };\n          }\n        }\n        active = next;\n\n        // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n      tmpSum = computeSum(index);\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Add an active node for the start of the paragraph.\n  activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n\n  // eslint-disable-next-line no-shadow\n  nodes.forEach(function (node, index, nodes) {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(function (node) {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\nlinebreak.infinity = 10000;\nlinebreak.glue = function (width, value, stretch, shrink) {\n  return {\n    type: 'glue',\n    value: value,\n    width: width,\n    stretch: stretch,\n    shrink: shrink\n  };\n};\nlinebreak.box = function (width, value, hyphenated) {\n  if (hyphenated === void 0) {\n    hyphenated = false;\n  }\n  return {\n    type: 'box',\n    width: width,\n    value: value,\n    hyphenated: hyphenated\n  };\n};\nlinebreak.penalty = function (width, penalty, flagged) {\n  return {\n    type: 'penalty',\n    width: width,\n    penalty: penalty,\n    flagged: flagged\n  };\n};\n\n/**\n * Add scalar to run\n *\n * @param  {number}  scalar\n * @param  {Object}  run\n * @return {Object} added run\n */\nvar add = function add(n, run) {\n  var start = run.start + n;\n  var end = run.end + n;\n  return Object.assign({}, run, {\n    start: start,\n    end: end\n  });\n};\n\n/**\n * Get run length\n *\n * @param  {Object}  run\n * @return {number} length\n */\nvar length = function length(run) {\n  return run.end - run.start;\n};\n\n/**\n * Concats two runs into one\n *\n * @param  {Object}  first run\n * @param  {Object}  second run\n * @return {Object}  concatenated run\n */\nvar concat = function concat(runA, runB) {\n  var end = runA.end + length(runB);\n  var glyphs = (runA.glyphs || []).concat(runB.glyphs || []);\n  var positions = (runA.positions || []).concat(runB.positions || []);\n  var attributes = Object.assign({}, runA.attributes, runB.attributes);\n  var runAIndices = runA.glyphIndices || [];\n  var runALastIndex = last(runAIndices) || 0;\n  var runBIndices = (runB.glyphIndices || []).map(function (i) {\n    return i + runALastIndex + 1;\n  });\n  var glyphIndices = normalize(runAIndices.concat(runBIndices));\n  return Object.assign({}, runA, {\n    end: end,\n    glyphs: glyphs,\n    positions: positions,\n    attributes: attributes,\n    glyphIndices: glyphIndices\n  });\n};\n\n/**\n * Insert glyph to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object}  glyph\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insertGlyph$1 = function insertGlyph(index, glyph, run) {\n  if (!glyph) return run;\n\n  // Split resolves ligature splitting in case new glyph breaks some\n  var leadingRun = slice$1(0, index, run);\n  var trailingRun = slice$1(index, Infinity, run);\n  return concat(append$1(glyph, leadingRun), trailingRun);\n};\n\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param  {number}  string index\n * @param  {Object | number}  glyph | codePoint\n * @param  {Object}  run\n * @return {Object}  run with glyph\n */\nvar insert = function insert(index, value, run) {\n  var font = getFont(run);\n  var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return insertGlyph$1(index, glyph, run);\n};\n\n/**\n * Get run index at char index\n *\n * @param  {number}  char index\n * @param  {Object}  attributedString\n * @return {number} run index\n */\nvar runIndexAt = function runIndexAt(n, string) {\n  return runIndexAt$1(n, string.runs);\n};\n\n/**\n * Insert glyph into attributed string\n *\n * @param {number} index\n * @param {Object} glyph\n * @param {Object} attributed string\n * @return {Object} attributed string with new glyph\n */\nvar insertGlyph = function insertGlyph(index, glyph, attributedString) {\n  var runIndex = runIndexAt(index, attributedString);\n\n  // Add glyph to the end if run index invalid\n  if (runIndex === -1) return append(glyph, attributedString);\n  var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  var string = attributedString.string.slice(0, index) + stringFromCodePoints(codePoints) + attributedString.string.slice(index);\n  var runs = attributedString.runs.map(function (run, i) {\n    if (i === runIndex) return insert(index - run.start, glyph, run);\n    if (i > runIndex) return add(codePoints.length, run);\n    return run;\n  });\n  return Object.assign({}, attributedString, {\n    string: string,\n    runs: runs\n  });\n};\n\n/**\n * Advance width between two string indices\n *\n * @param  {number}  start glyph index\n * @param  {number}  end glyph index\n * @param  {Object}  run\n * @return {Object} advanced width run\n */\nvar advanceWidthBetween$1 = function advanceWidthBetween(start, end, run) {\n  var runStart = run.start || 0;\n  var glyphStartIndex = Math.max(0, glyphIndexAt(start - runStart, run));\n  var glyphEndIndex = Math.max(0, glyphIndexAt(end - runStart, run));\n  var positions = (run.positions || []).slice(glyphStartIndex, glyphEndIndex);\n  return advanceWidth$2(positions);\n};\n\n/**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param  {number}  start offset\n * @param  {number}  end offset\n * @param  {Object}  attributedString\n * @return {number} advance width\n */\nvar advanceWidthBetween = function advanceWidthBetween(start, end, attributedString) {\n  var runs = filter(start, end, attributedString.runs);\n  return runs.reduce(function (acc, run) {\n    return acc + advanceWidthBetween$1(start, end, run);\n  }, 0);\n};\n\nvar HYPHEN = 0x002d;\nvar TOLERANCE_STEPS = 5;\nvar TOLERANCE_LIMIT = 50;\nvar opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n\n/**\n * Slice attributed string to many lines\n *\n * @param {Object} attributed string\n * @param  {Array}  nodes\n * @param  {Array}  breaks\n * @return {Array} attributed strings\n */\nvar breakLines = function breakLines(string, nodes, breaks) {\n  var start = 0;\n  var end = null;\n  var lines = breaks.reduce(function (acc, breakPoint) {\n    var node = nodes[breakPoint.position];\n    var prevNode = nodes[breakPoint.position - 1];\n\n    // Last breakpoint corresponds to K&P mandatory final glue\n    if (breakPoint.position === nodes.length - 1) return acc;\n    var line;\n    if (node.type === 'penalty') {\n      end = prevNode.value.end;\n      line = slice(start, end, string);\n      line = insertGlyph(line.length, HYPHEN, line);\n    } else {\n      end = node.value.end;\n      line = slice(start, end, string);\n    }\n    start = end;\n    return [].concat(acc, [line]);\n  }, []);\n\n  // Last line\n  lines.push(slice(start, string.string.length, string));\n  return lines;\n};\n\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {Object} attributed string\n * @param  {Object}  attributed string\n * @param  {Object}  layout options\n * @return {Array} attributed strings\n */\nvar getNodes = function getNodes(attributedString, _ref, options) {\n  var align = _ref.align;\n  var start = 0;\n  var hyphenWidth = 5;\n  var syllables = attributedString.syllables;\n  var hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);\n  var result = syllables.reduce(function (acc, s, index) {\n    var width = advanceWidthBetween(start, start + s.length, attributedString);\n    if (s.trim() === '') {\n      var stretch = width * opts.width / opts.stretch;\n      var shrink = width * opts.width / opts.shrink;\n      var value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(linebreak.glue(width, value, stretch, shrink));\n    } else {\n      var hyphenated = syllables[index + 1] !== ' ';\n      var _value = {\n        start: start,\n        end: start + s.length\n      };\n      acc.push(linebreak.box(width, _value, hyphenated));\n      if (syllables[index + 1] && hyphenated) {\n        acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n      }\n    }\n    start += s.length;\n    return acc;\n  }, []);\n  result.push(linebreak.glue(0, null, linebreak.infinity, 0));\n  result.push(linebreak.penalty(0, -linebreak.infinity, 1));\n  return result;\n};\nvar getStyles = function getStyles(attributedString) {\n  var _attributedString$run, _attributedString$run2;\n  return ((_attributedString$run = attributedString.runs) === null || _attributedString$run === void 0 ? void 0 : (_attributedString$run2 = _attributedString$run[0]) === null || _attributedString$run2 === void 0 ? void 0 : _attributedString$run2.attributes) || {};\n};\n\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @param {Object} attributed string\n * @return {Array} attributed strings\n */\nvar linebreaker = function linebreaker(options) {\n  return function (attributedString, availableWidths) {\n    var tolerance = options.tolerance || 4;\n    var style = getStyles(attributedString);\n    var nodes = getNodes(attributedString, style, options);\n    var breaks = linebreak(nodes, availableWidths, {\n      tolerance: tolerance\n    });\n\n    // Try again with a higher tolerance if the line breaking failed.\n    while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n      tolerance += TOLERANCE_STEPS;\n      breaks = linebreak(nodes, availableWidths, {\n        tolerance: tolerance\n      });\n    }\n    if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n      breaks = applyBestFit(nodes, availableWidths);\n    }\n    return breakLines(attributedString, nodes, breaks.slice(1));\n  };\n};\n\nvar WHITESPACE_PRIORITY = 1;\nvar LETTER_PRIORITY = 2;\nvar EXPAND_WHITESPACE_FACTOR = {\n  before: 0.5,\n  after: 0.5,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nvar EXPAND_CHAR_FACTOR = {\n  before: 0.14453125,\n  // 37/256\n  after: 0.14453125,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nvar SHRINK_WHITESPACE_FACTOR = {\n  before: -0.04296875,\n  // -11/256\n  after: -0.04296875,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nvar SHRINK_CHAR_FACTOR = {\n  before: -0.04296875,\n  after: -0.04296875,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nvar getCharFactor = function getCharFactor(direction, options) {\n  var expandCharFactor = options.expandCharFactor || {};\n  var shrinkCharFactor = options.shrinkCharFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_CHAR_FACTOR, expandCharFactor) : Object.assign({}, SHRINK_CHAR_FACTOR, shrinkCharFactor);\n};\nvar getWhitespaceFactor = function getWhitespaceFactor(direction, options) {\n  var expandWhitespaceFactor = options.expandWhitespaceFactor || {};\n  var shrinkWhitespaceFactor = options.shrinkWhitespaceFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : Object.assign({}, SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);\n};\nvar factor = function factor(direction, options) {\n  return function (glyphs) {\n    var charFactor = getCharFactor(direction, options);\n    var whitespaceFactor = getWhitespaceFactor(direction, options);\n    var factors = [];\n    for (var index = 0; index < glyphs.length; index += 1) {\n      var f = void 0;\n      var glyph = glyphs[index];\n      if (isWhiteSpace(glyph)) {\n        f = Object.assign({}, whitespaceFactor);\n        if (index === glyphs.length - 1) {\n          f.before = 0;\n          if (index > 0) {\n            factors[index - 1].after = 0;\n          }\n        }\n      } else if (glyph.isMark && index > 0) {\n        f = Object.assign({}, factors[index - 1]);\n        f.before = 0;\n        factors[index - 1].after = 0;\n      } else {\n        f = Object.assign({}, charFactor);\n      }\n      factors.push(f);\n    }\n    return factors;\n  };\n};\nvar getFactors = function getFactors(gap, line, options) {\n  var direction = gap > 0 ? 'GROW' : 'SHRINK';\n  var getFactor = factor(direction, options);\n  var factors = line.runs.reduce(function (acc, run) {\n    return acc.concat(getFactor(run.glyphs));\n  }, []);\n  factors[0].before = 0;\n  factors[factors.length - 1].after = 0;\n  return factors;\n};\n\n/* eslint-disable no-multi-assign */\nvar KASHIDA_PRIORITY = 0;\nvar NULL_PRIORITY = 3;\nvar getDistances = function getDistances(gap, factors) {\n  var total = 0;\n  var priorities = [];\n  var unconstrained = [];\n  for (var _priority = KASHIDA_PRIORITY; _priority <= NULL_PRIORITY; _priority += 1) {\n    priorities[_priority] = unconstrained[_priority] = 0;\n  }\n\n  // sum the factors at each priority\n  for (var j = 0; j < factors.length; j += 1) {\n    var f = factors[j];\n    var sum = f.before + f.after;\n    total += sum;\n    priorities[f.priority] += sum;\n    if (f.unconstrained) {\n      unconstrained[f.priority] += sum;\n    }\n  }\n\n  // choose the priorities that need to be applied\n  var highestPriority = -1;\n  var highestPrioritySum = 0;\n  var remainingGap = gap;\n  var priority;\n  for (priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {\n    var prioritySum = priorities[priority];\n    if (prioritySum !== 0) {\n      if (highestPriority === -1) {\n        highestPriority = priority;\n        highestPrioritySum = prioritySum;\n      }\n\n      // if this priority covers the remaining gap, we're done\n      if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {\n        priorities[priority] = remainingGap / prioritySum;\n        unconstrained[priority] = 0;\n        remainingGap = 0;\n        break;\n      }\n\n      // mark that we need to use 100% of the adjustment from\n      // this priority, and subtract the space that it consumes\n      priorities[priority] = 1;\n      remainingGap -= prioritySum;\n\n      // if this priority has unconstrained glyphs, let them consume the remaining space\n      if (unconstrained[priority] !== 0) {\n        unconstrained[priority] = remainingGap / unconstrained[priority];\n        remainingGap = 0;\n        break;\n      }\n    }\n  }\n\n  // zero out remaining priorities (if any)\n  for (var p = priority + 1; p <= NULL_PRIORITY; p += 1) {\n    priorities[p] = 0;\n    unconstrained[p] = 0;\n  }\n\n  // if there is still space left over, assign it to the highest priority that we saw.\n  // this violates their factors, but it only happens in extreme cases\n  if (remainingGap > 0 && highestPriority > -1) {\n    priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;\n  }\n\n  // create and return an array of distances to add to each glyph's advance\n  var distances = [];\n  for (var index = 0; index < factors.length; index += 1) {\n    // the distance to add to this glyph is the sum of the space to add\n    // after this glyph, and the space to add before the next glyph\n    var _f = factors[index];\n    var next = factors[index + 1];\n    var dist = _f.after * priorities[_f.priority];\n    if (next) {\n      dist += next.before * priorities[next.priority];\n    }\n\n    // if this glyph is unconstrained, add the unconstrained distance as well\n    if (_f.unconstrained) {\n      dist += _f.after * unconstrained[_f.priority];\n      if (next) {\n        dist += next.before * unconstrained[next.priority];\n      }\n    }\n    distances.push(dist);\n  }\n  return distances;\n};\n\n/**\n * Adjust run positions by given distances\n *\n * @param {Array} distances\n * @param {Object} line\n * @returns {Object} line\n */\nvar justifyLine = function justifyLine(distances, line) {\n  var index = 0;\n  for (var _iterator = _createForOfIteratorHelperLoose(line.runs), _step; !(_step = _iterator()).done;) {\n    var run = _step.value;\n    for (var _iterator2 = _createForOfIteratorHelperLoose(run.positions), _step2; !(_step2 = _iterator2()).done;) {\n      var position = _step2.value;\n      position.xAdvance += distances[index++];\n    }\n  }\n  return line;\n};\n\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * //TODO: Make it immutable\n *\n * @param {Object} layout options\n * @param {Object} line\n * @returns {Object} line\n */\nvar justification = function justification(options) {\n  return function (line) {\n    var gap = line.box.width - advanceWidth(line);\n    if (gap === 0) return; // Exact fit\n\n    var factors = getFactors(gap, line, options);\n    var distances = getDistances(gap, factors);\n    return justifyLine(distances, line);\n  };\n};\n\n/**\n * Returns attributed string ascent\n *\n * @param {Object} attributed string\n * @return {number} ascent\n */\nvar ascent = function ascent(attributeString) {\n  var reducer = function reducer(acc, run) {\n    return Math.max(acc, ascent$1(run));\n  };\n  return attributeString.runs.reduce(reducer, 0);\n};\n\n/* eslint-disable no-param-reassign */\n\n// The base font size used for calculating underline thickness.\nvar BASE_FONT_SIZE = 12;\n\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */\nvar textDecoration = function textDecoration() {\n  return function (lineFragment) {\n    var x = lineFragment.overflowLeft || 0;\n    var overflowRight = lineFragment.overflowRight || 0;\n    var maxX = advanceWidth(lineFragment) - overflowRight;\n    lineFragment.decorationLines = [];\n    for (var i = 0; i < lineFragment.runs.length; i += 1) {\n      var run = lineFragment.runs[i];\n      var width = Math.min(maxX - x, advanceWidth$1(run));\n      var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n      if (run.attributes.underline) {\n        var rect = {\n          x: x,\n          y: ascent(lineFragment) + thickness * 2,\n          width: width,\n          height: thickness\n        };\n        var line = {\n          rect: rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.underlineColor || 'black',\n          style: run.attributes.underlineStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(line);\n      }\n      if (run.attributes.strike) {\n        var y = ascent(lineFragment) - ascent$1(run) / 3;\n        var _rect = {\n          x: x,\n          y: y,\n          width: width,\n          height: thickness\n        };\n        var _line = {\n          rect: _rect,\n          opacity: run.attributes.opacity,\n          color: run.attributes.strikeColor || 'black',\n          style: run.attributes.strikeStyle || 'solid'\n        };\n        lineFragment.decorationLines.push(_line);\n      }\n      x += width;\n    }\n    return lineFragment;\n  };\n};\n\nvar ignoredScripts = ['Common', 'Inherited', 'Unknown'];\n\n/**\n * Resolves unicode script in runs, grouping equal runs together\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar scriptItemizer = function scriptItemizer() {\n  return function (attributedString) {\n    var string = attributedString.string;\n    var lastScript = 'Unknown';\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n    if (!string) return empty();\n    for (var i = 0; i < string.length; i += 1) {\n      var char = string[i];\n      var codePoint = char.codePointAt();\n      var script = unicode.getScript(codePoint);\n      if (script !== lastScript && !ignoredScripts.includes(script)) {\n        if (lastScript !== 'Unknown') {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              script: lastScript\n            }\n          });\n        }\n        lastIndex = index;\n        lastScript = script;\n      }\n      index += char.length;\n    }\n    if (lastIndex < string.length) {\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          script: lastScript\n        }\n      });\n    }\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\n\nvar SOFT_HYPHEN = \"\\xAD\";\nvar hyphenator = hyphen(pattern);\nvar splitHyphen = function splitHyphen(word) {\n  return word.split(SOFT_HYPHEN);\n};\nvar cache = {};\nvar getParts = function getParts(word) {\n  var base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n  return splitHyphen(base);\n};\nvar wordHyphenation = function wordHyphenation() {\n  return function (word) {\n    var cacheKey = \"_\" + word;\n    if (isNil(word)) return [];\n    if (cache[cacheKey]) return cache[cacheKey];\n    cache[cacheKey] = getParts(word);\n    return cache[cacheKey];\n  };\n};\n\nvar getFontSize = function getFontSize(value) {\n  return value.attributes.fontSize || 12;\n};\n\n/**\n * Resolve font runs in an AttributedString, grouping equal\n * runs and performing font substitution where necessary.\n *\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nvar fontSubstitution = function fontSubstitution() {\n  return function (attributedString) {\n    var string = attributedString.string,\n      runs = attributedString.runs;\n    var lastFont = null;\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n    if (!string) return empty();\n    for (var _iterator = _createForOfIteratorHelperLoose(runs), _step; !(_step = _iterator()).done;) {\n      var run = _step.value;\n      var _fontSize = getFontSize(run);\n      var defaultFont = run.attributes.font;\n      if (string.length === 0) {\n        res.push({\n          start: 0,\n          end: 0,\n          attributes: {\n            font: defaultFont\n          }\n        });\n        break;\n      }\n      for (var _iterator2 = _createForOfIteratorHelperLoose(string.slice(run.start, run.end)), _step2; !(_step2 = _iterator2()).done;) {\n        var char = _step2.value;\n        var font = defaultFont;\n        if (font !== lastFont) {\n          if (lastFont) {\n            res.push({\n              start: lastIndex,\n              end: index,\n              attributes: {\n                font: lastFont,\n                scale: lastFont ? _fontSize / lastFont.unitsPerEm : 0\n              }\n            });\n          }\n          lastFont = font;\n          lastIndex = index;\n        }\n        index += char.length;\n      }\n    }\n    if (lastIndex < string.length) {\n      var fontSize = getFontSize(last(runs));\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          font: lastFont,\n          scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n        }\n      });\n    }\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\n\nexport { layoutEngine as default, fontSubstitution, justification, linebreaker, scriptItemizer, textDecoration, wordHyphenation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}