{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport PDFHeader from \"../document/PDFHeader\";\nimport PDFTrailer from \"../document/PDFTrailer\";\nimport PDFInvalidObject from \"../objects/PDFInvalidObject\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport PDFStream from \"../objects/PDFStream\";\nimport PDFCrossRefStream from \"../structures/PDFCrossRefStream\";\nimport PDFObjectStream from \"../structures/PDFObjectStream\";\nimport PDFWriter from \"./PDFWriter\";\nimport { last, waitForTick } from \"../../utils\";\nvar PDFStreamWriter = /** @class */function (_super) {\n  __extends(PDFStreamWriter, _super);\n  function PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream) {\n    var _this = _super.call(this, context, objectsPerTick) || this;\n    _this.encodeStreams = encodeStreams;\n    _this.objectsPerStream = objectsPerStream;\n    return _this;\n  }\n  PDFStreamWriter.prototype.computeBufferSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var objectNumber, header, size, xrefStream, uncompressedObjects, compressedObjects, objectStreamRefs, indirectObjects, idx, len, indirectObject, ref, object, shouldNotCompress, chunk, objectStreamRef, idx, len, chunk, ref, objectStream, xrefStreamRef, xrefOffset, trailer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            objectNumber = this.context.largestObjectNumber + 1;\n            header = PDFHeader.forVersion(1, 7);\n            size = header.sizeInBytes() + 2;\n            xrefStream = PDFCrossRefStream.create(this.createTrailerDict(), this.encodeStreams);\n            uncompressedObjects = [];\n            compressedObjects = [];\n            objectStreamRefs = [];\n            indirectObjects = this.context.enumerateIndirectObjects();\n            idx = 0, len = indirectObjects.length;\n            _a.label = 1;\n          case 1:\n            if (!(idx < len)) return [3 /*break*/, 6];\n            indirectObject = indirectObjects[idx];\n            ref = indirectObject[0], object = indirectObject[1];\n            shouldNotCompress = ref === this.context.trailerInfo.Encrypt || object instanceof PDFStream || object instanceof PDFInvalidObject || ref.generationNumber !== 0;\n            if (!shouldNotCompress) return [3 /*break*/, 4];\n            uncompressedObjects.push(indirectObject);\n            xrefStream.addUncompressedEntry(ref, size);\n            size += this.computeIndirectObjectSize(indirectObject);\n            if (!this.shouldWaitForTick(1)) return [3 /*break*/, 3];\n            return [4 /*yield*/, waitForTick()];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            return [3 /*break*/, 5];\n          case 4:\n            chunk = last(compressedObjects);\n            objectStreamRef = last(objectStreamRefs);\n            if (!chunk || chunk.length % this.objectsPerStream === 0) {\n              chunk = [];\n              compressedObjects.push(chunk);\n              objectStreamRef = PDFRef.of(objectNumber++);\n              objectStreamRefs.push(objectStreamRef);\n            }\n            xrefStream.addCompressedEntry(ref, objectStreamRef, chunk.length);\n            chunk.push(indirectObject);\n            _a.label = 5;\n          case 5:\n            idx++;\n            return [3 /*break*/, 1];\n          case 6:\n            idx = 0, len = compressedObjects.length;\n            _a.label = 7;\n          case 7:\n            if (!(idx < len)) return [3 /*break*/, 10];\n            chunk = compressedObjects[idx];\n            ref = objectStreamRefs[idx];\n            objectStream = PDFObjectStream.withContextAndObjects(this.context, chunk, this.encodeStreams);\n            xrefStream.addUncompressedEntry(ref, size);\n            size += this.computeIndirectObjectSize([ref, objectStream]);\n            uncompressedObjects.push([ref, objectStream]);\n            if (!this.shouldWaitForTick(chunk.length)) return [3 /*break*/, 9];\n            return [4 /*yield*/, waitForTick()];\n          case 8:\n            _a.sent();\n            _a.label = 9;\n          case 9:\n            idx++;\n            return [3 /*break*/, 7];\n          case 10:\n            xrefStreamRef = PDFRef.of(objectNumber++);\n            xrefStream.dict.set(PDFName.of('Size'), PDFNumber.of(objectNumber));\n            xrefStream.addUncompressedEntry(xrefStreamRef, size);\n            xrefOffset = size;\n            size += this.computeIndirectObjectSize([xrefStreamRef, xrefStream]);\n            uncompressedObjects.push([xrefStreamRef, xrefStream]);\n            trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n            size += trailer.sizeInBytes();\n            return [2 /*return*/, {\n              size: size,\n              header: header,\n              indirectObjects: uncompressedObjects,\n              trailer: trailer\n            }];\n        }\n      });\n    });\n  };\n  PDFStreamWriter.forContext = function (context, objectsPerTick, encodeStreams, objectsPerStream) {\n    if (encodeStreams === void 0) {\n      encodeStreams = true;\n    }\n    if (objectsPerStream === void 0) {\n      objectsPerStream = 50;\n    }\n    return new PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream);\n  };\n  return PDFStreamWriter;\n}(PDFWriter);\nexport default PDFStreamWriter;","map":{"version":3,"names":["PDFHeader","PDFTrailer","PDFInvalidObject","PDFName","PDFNumber","PDFRef","PDFStream","PDFCrossRefStream","PDFObjectStream","PDFWriter","last","waitForTick","PDFStreamWriter","_super","__extends","context","objectsPerTick","encodeStreams","objectsPerStream","_this","call","prototype","computeBufferSize","objectNumber","largestObjectNumber","header","forVersion","size","sizeInBytes","xrefStream","create","createTrailerDict","uncompressedObjects","compressedObjects","objectStreamRefs","indirectObjects","enumerateIndirectObjects","idx","len","length","indirectObject","ref","object","shouldNotCompress","trailerInfo","Encrypt","generationNumber","push","addUncompressedEntry","computeIndirectObjectSize","shouldWaitForTick","_a","sent","chunk","objectStreamRef","of","addCompressedEntry","objectStream","withContextAndObjects","xrefStreamRef","dict","set","xrefOffset","trailer","forLastCrossRefSectionOffset","forContext"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\core\\writers\\PDFStreamWriter.ts"],"sourcesContent":["import PDFHeader from 'src/core/document/PDFHeader';\nimport PDFTrailer from 'src/core/document/PDFTrailer';\nimport PDFInvalidObject from 'src/core/objects/PDFInvalidObject';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFNumber from 'src/core/objects/PDFNumber';\nimport PDFObject from 'src/core/objects/PDFObject';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport PDFStream from 'src/core/objects/PDFStream';\nimport PDFContext from 'src/core/PDFContext';\nimport PDFCrossRefStream from 'src/core/structures/PDFCrossRefStream';\nimport PDFObjectStream from 'src/core/structures/PDFObjectStream';\nimport PDFWriter from 'src/core/writers/PDFWriter';\nimport { last, waitForTick } from 'src/utils';\n\nclass PDFStreamWriter extends PDFWriter {\n  static forContext = (\n    context: PDFContext,\n    objectsPerTick: number,\n    encodeStreams = true,\n    objectsPerStream = 50,\n  ) =>\n    new PDFStreamWriter(\n      context,\n      objectsPerTick,\n      encodeStreams,\n      objectsPerStream,\n    );\n\n  private readonly encodeStreams: boolean;\n  private readonly objectsPerStream: number;\n\n  private constructor(\n    context: PDFContext,\n    objectsPerTick: number,\n    encodeStreams: boolean,\n    objectsPerStream: number,\n  ) {\n    super(context, objectsPerTick);\n\n    this.encodeStreams = encodeStreams;\n    this.objectsPerStream = objectsPerStream;\n  }\n\n  protected async computeBufferSize() {\n    let objectNumber = this.context.largestObjectNumber + 1;\n\n    const header = PDFHeader.forVersion(1, 7);\n\n    let size = header.sizeInBytes() + 2;\n\n    const xrefStream = PDFCrossRefStream.create(\n      this.createTrailerDict(),\n      this.encodeStreams,\n    );\n\n    const uncompressedObjects: [PDFRef, PDFObject][] = [];\n    const compressedObjects: [PDFRef, PDFObject][][] = [];\n    const objectStreamRefs: PDFRef[] = [];\n\n    const indirectObjects = this.context.enumerateIndirectObjects();\n    for (let idx = 0, len = indirectObjects.length; idx < len; idx++) {\n      const indirectObject = indirectObjects[idx];\n      const [ref, object] = indirectObject;\n\n      const shouldNotCompress =\n        ref === this.context.trailerInfo.Encrypt ||\n        object instanceof PDFStream ||\n        object instanceof PDFInvalidObject ||\n        ref.generationNumber !== 0;\n\n      if (shouldNotCompress) {\n        uncompressedObjects.push(indirectObject);\n        xrefStream.addUncompressedEntry(ref, size);\n        size += this.computeIndirectObjectSize(indirectObject);\n        if (this.shouldWaitForTick(1)) await waitForTick();\n      } else {\n        let chunk = last(compressedObjects);\n        let objectStreamRef = last(objectStreamRefs);\n        if (!chunk || chunk.length % this.objectsPerStream === 0) {\n          chunk = [];\n          compressedObjects.push(chunk);\n          objectStreamRef = PDFRef.of(objectNumber++);\n          objectStreamRefs.push(objectStreamRef);\n        }\n        xrefStream.addCompressedEntry(ref, objectStreamRef, chunk.length);\n        chunk.push(indirectObject);\n      }\n    }\n\n    for (let idx = 0, len = compressedObjects.length; idx < len; idx++) {\n      const chunk = compressedObjects[idx];\n      const ref = objectStreamRefs[idx];\n\n      const objectStream = PDFObjectStream.withContextAndObjects(\n        this.context,\n        chunk,\n        this.encodeStreams,\n      );\n\n      xrefStream.addUncompressedEntry(ref, size);\n      size += this.computeIndirectObjectSize([ref, objectStream]);\n\n      uncompressedObjects.push([ref, objectStream]);\n\n      if (this.shouldWaitForTick(chunk.length)) await waitForTick();\n    }\n\n    const xrefStreamRef = PDFRef.of(objectNumber++);\n    xrefStream.dict.set(PDFName.of('Size'), PDFNumber.of(objectNumber));\n    xrefStream.addUncompressedEntry(xrefStreamRef, size);\n    const xrefOffset = size;\n    size += this.computeIndirectObjectSize([xrefStreamRef, xrefStream]);\n\n    uncompressedObjects.push([xrefStreamRef, xrefStream]);\n\n    const trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n    size += trailer.sizeInBytes();\n\n    return { size, header, indirectObjects: uncompressedObjects, trailer };\n  }\n}\n\nexport default PDFStreamWriter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}