{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { setFillingColor, setStrokingColor } from \"./colors\";\nimport { beginText, closePath, drawObject, endText, fill, fillAndStroke, lineTo, moveTo, nextLine, popGraphicsState, pushGraphicsState, rotateAndSkewTextRadiansAndTranslate, rotateRadians, scale, setFontAndSize, setLineHeight, setLineWidth, showText, skewRadians, stroke, translate, setLineCap, rotateDegrees, setGraphicsState, setDashPattern, beginMarkedContent, endMarkedContent, clip, endPath, appendBezierCurve } from \"./operators\";\nimport { degrees, toRadians } from \"./rotations\";\nimport { svgPathToOperators } from \"./svgPath\";\nimport { asNumber } from \"./objects\";\nexport var drawText = function (line, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y), showText(line), endText(), popGraphicsState()].filter(Boolean);\n};\nexport var drawLinesOfText = function (lines, options) {\n  var operators = [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), setLineHeight(options.lineHeight), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y)].filter(Boolean);\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    operators.push(showText(lines[idx]), nextLine());\n  }\n  operators.push(endText(), popGraphicsState());\n  return operators;\n};\nexport var drawImage = function (name, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.width, options.height), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n};\nexport var drawPage = function (name, options) {\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.xScale, options.yScale), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n};\nexport var drawLine = function (options) {\n  var _a, _b;\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), setDashPattern((_a = options.dashArray) !== null && _a !== void 0 ? _a : [], (_b = options.dashPhase) !== null && _b !== void 0 ? _b : 0), moveTo(options.start.x, options.start.y), options.lineCap && setLineCap(options.lineCap), moveTo(options.start.x, options.start.y), lineTo(options.end.x, options.end.y), stroke(), popGraphicsState()].filter(Boolean);\n};\nexport var drawRectangle = function (options) {\n  var _a, _b;\n  return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), moveTo(0, 0), lineTo(0, options.height), lineTo(options.width, options.height), lineTo(options.width, 0), closePath(),\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()].filter(Boolean);\n};\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n/** @deprecated */\nexport var drawEllipsePath = function (config) {\n  var x = asNumber(config.x);\n  var y = asNumber(config.y);\n  var xScale = asNumber(config.xScale);\n  var yScale = asNumber(config.yScale);\n  x -= xScale;\n  y -= yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [pushGraphicsState(), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym), popGraphicsState()];\n};\nvar drawEllipseCurves = function (config) {\n  var centerX = asNumber(config.x);\n  var centerY = asNumber(config.y);\n  var xScale = asNumber(config.xScale);\n  var yScale = asNumber(config.yScale);\n  var x = -xScale;\n  var y = -yScale;\n  var ox = xScale * KAPPA;\n  var oy = yScale * KAPPA;\n  var xe = x + xScale * 2;\n  var ye = y + yScale * 2;\n  var xm = x + xScale;\n  var ym = y + yScale;\n  return [translate(centerX, centerY), rotateRadians(toRadians(config.rotate)), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym)];\n};\nexport var drawEllipse = function (options) {\n  var _a, _b, _c;\n  return __spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0)], options.rotate === undefined ? drawEllipsePath({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale\n  }) : drawEllipseCurves({\n    x: options.x,\n    y: options.y,\n    xScale: options.xScale,\n    yScale: options.yScale,\n    rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0)\n  }), [\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n};\nexport var drawSvgPath = function (path, options) {\n  var _a, _b, _c;\n  return __spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians((_a = options.rotate) !== null && _a !== void 0 ? _a : degrees(0))),\n  // SVG path Y axis is opposite pdf-lib's\n  options.scale ? scale(options.scale, -options.scale) : scale(1, -1), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), options.borderWidth && setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_b = options.borderDashArray) !== null && _b !== void 0 ? _b : [], (_c = options.borderDashPhase) !== null && _c !== void 0 ? _c : 0)], svgPathToOperators(path), [\n  // prettier-ignore\n  options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n};\nexport var drawCheckMark = function (options) {\n  var size = asNumber(options.size);\n  /*********************** Define Check Mark Points ***************************/\n  // A check mark is defined by three points in some coordinate space. Here, we\n  // define these points in a unit coordinate system, where the range of the x\n  // and y axis are both [-1, 1].\n  //\n  // Note that we do not hard code `p1y` in case we wish to change the\n  // size/shape of the check mark in the future. We want the check mark to\n  // always form a right angle. This means that the dot product between (p1-p2)\n  // and (p3-p2) should be zero:\n  //\n  //   (p1x-p2x) * (p3x-p2x) + (p1y-p2y) * (p3y-p2y) = 0\n  //\n  // We can now rejigger this equation to solve for `p1y`:\n  //\n  //   (p1y-p2y) * (p3y-p2y) = -((p1x-p2x) * (p3x-p2x))\n  //   (p1y-p2y) = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y)\n  //   p1y = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y) + p2y\n  //\n  // Thanks to my friend Joel Walker (https://github.com/JWalker1995) for\n  // devising the above equation and unit coordinate system approach!\n  // (x, y) coords of the check mark's bottommost point\n  var p2x = -1 + 0.75;\n  var p2y = -1 + 0.51;\n  // (x, y) coords of the check mark's topmost point\n  var p3y = 1 - 0.525;\n  var p3x = 1 - 0.31;\n  // (x, y) coords of the check mark's center (vertically) point\n  var p1x = -1 + 0.325;\n  var p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\n  /****************************************************************************/\n  return [pushGraphicsState(), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), translate(options.x, options.y), moveTo(p1x * size, p1y * size), lineTo(p2x * size, p2y * size), lineTo(p3x * size, p3y * size), stroke(), popGraphicsState()].filter(Boolean);\n};\n// prettier-ignore\nexport var rotateInPlace = function (options) {\n  return options.rotation === 0 ? [translate(0, 0), rotateDegrees(0)] : options.rotation === 90 ? [translate(options.width, 0), rotateDegrees(90)] : options.rotation === 180 ? [translate(options.width, options.height), rotateDegrees(180)] : options.rotation === 270 ? [translate(0, options.height), rotateDegrees(270)] : [];\n}; // Invalid rotation - noop\nexport var drawCheckBox = function (options) {\n  var outline = drawRectangle({\n    x: options.x,\n    y: options.y,\n    width: options.width,\n    height: options.height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  if (!options.filled) return outline;\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var checkMarkSize = Math.min(width, height) / 2;\n  var checkMark = drawCheckMark({\n    x: width / 2,\n    y: height / 2,\n    size: checkMarkSize,\n    thickness: options.thickness,\n    color: options.markColor\n  });\n  return __spreadArrays([pushGraphicsState()], outline, checkMark, [popGraphicsState()]);\n};\nexport var drawRadioButton = function (options) {\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var outlineScale = Math.min(width, height) / 2;\n  var outline = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale,\n    yScale: outlineScale,\n    color: options.color,\n    borderColor: options.borderColor,\n    borderWidth: options.borderWidth\n  });\n  if (!options.filled) return outline;\n  var dot = drawEllipse({\n    x: options.x,\n    y: options.y,\n    xScale: outlineScale * 0.45,\n    yScale: outlineScale * 0.45,\n    color: options.dotColor,\n    borderColor: undefined,\n    borderWidth: 0\n  });\n  return __spreadArrays([pushGraphicsState()], outline, dot, [popGraphicsState()]);\n};\nexport var drawButton = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  return __spreadArrays([pushGraphicsState()], background, lines, [popGraphicsState()]);\n};\nexport var drawTextLines = function (lines, options) {\n  var operators = [beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size)];\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var _a = lines[idx],\n      encoded = _a.encoded,\n      x = _a.x,\n      y = _a.y;\n    operators.push(rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), x, y), showText(encoded));\n  }\n  operators.push(endText());\n  return operators;\n};\nexport var drawTextField = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var borderWidth = asNumber(options.borderWidth);\n  var padding = asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var markedContent = __spreadArrays([beginMarkedContent('Tx'), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n  return __spreadArrays([pushGraphicsState()], background, clippingArea, markedContent, [popGraphicsState()]);\n};\nexport var drawOptionList = function (options) {\n  var x = asNumber(options.x);\n  var y = asNumber(options.y);\n  var width = asNumber(options.width);\n  var height = asNumber(options.height);\n  var lineHeight = asNumber(options.lineHeight);\n  var borderWidth = asNumber(options.borderWidth);\n  var padding = asNumber(options.padding);\n  var clipX = x + borderWidth / 2 + padding;\n  var clipY = y + borderWidth / 2 + padding;\n  var clipWidth = width - (borderWidth / 2 + padding) * 2;\n  var clipHeight = height - (borderWidth / 2 + padding) * 2;\n  var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n  var background = drawRectangle({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    borderWidth: options.borderWidth,\n    color: options.color,\n    borderColor: options.borderColor,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var highlights = [];\n  for (var idx = 0, len = options.selectedLines.length; idx < len; idx++) {\n    var line = options.textLines[options.selectedLines[idx]];\n    highlights.push.apply(highlights, drawRectangle({\n      x: line.x - padding,\n      y: line.y - (lineHeight - line.height) / 2,\n      width: width - borderWidth,\n      height: line.height + (lineHeight - line.height) / 2,\n      borderWidth: 0,\n      color: options.selectedColor,\n      borderColor: undefined,\n      rotate: degrees(0),\n      xSkew: degrees(0),\n      ySkew: degrees(0)\n    }));\n  }\n  var lines = drawTextLines(options.textLines, {\n    color: options.textColor,\n    font: options.font,\n    size: options.fontSize,\n    rotate: degrees(0),\n    xSkew: degrees(0),\n    ySkew: degrees(0)\n  });\n  var markedContent = __spreadArrays([beginMarkedContent('Tx'), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n  return __spreadArrays([pushGraphicsState()], background, highlights, clippingArea, markedContent, [popGraphicsState()]);\n};","map":{"version":3,"names":["setFillingColor","setStrokingColor","beginText","closePath","drawObject","endText","fill","fillAndStroke","lineTo","moveTo","nextLine","popGraphicsState","pushGraphicsState","rotateAndSkewTextRadiansAndTranslate","rotateRadians","scale","setFontAndSize","setLineHeight","setLineWidth","showText","skewRadians","stroke","translate","setLineCap","rotateDegrees","setGraphicsState","setDashPattern","beginMarkedContent","endMarkedContent","clip","endPath","appendBezierCurve","degrees","toRadians","svgPathToOperators","asNumber","drawText","line","options","graphicsState","color","font","size","rotate","xSkew","ySkew","x","y","filter","Boolean","drawLinesOfText","lines","operators","lineHeight","idx","len","length","push","drawImage","name","width","height","drawPage","xScale","yScale","drawLine","thickness","_a","dashArray","_b","dashPhase","start","lineCap","end","drawRectangle","borderColor","borderWidth","borderLineCap","borderDashArray","borderDashPhase","KAPPA","Math","sqrt","drawEllipsePath","config","ox","oy","xe","ye","xm","ym","drawEllipseCurves","centerX","centerY","drawEllipse","__spreadArrays","undefined","_c","drawSvgPath","path","drawCheckMark","p2x","p2y","p3y","p3x","p1x","p1y","rotateInPlace","rotation","drawCheckBox","outline","filled","checkMarkSize","min","checkMark","markColor","drawRadioButton","outlineScale","dot","dotColor","drawButton","background","drawTextLines","textLines","textColor","fontSize","encoded","drawTextField","padding","clipX","clipY","clipWidth","clipHeight","clippingArea","markedContent","drawOptionList","highlights","selectedLines","apply","selectedColor"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0 - Copy (2)\\node_modules\\pdf-lib\\src\\api\\operations.ts"],"sourcesContent":["import { Color, setFillingColor, setStrokingColor } from 'src/api/colors';\r\nimport {\r\n  beginText,\r\n  closePath,\r\n  drawObject,\r\n  endText,\r\n  fill,\r\n  fillAndStroke,\r\n  lineTo,\r\n  moveTo,\r\n  nextLine,\r\n  popGraphicsState,\r\n  pushGraphicsState,\r\n  rotateAndSkewTextRadiansAndTranslate,\r\n  rotateRadians,\r\n  scale,\r\n  setFontAndSize,\r\n  setLineHeight,\r\n  setLineWidth,\r\n  showText,\r\n  skewRadians,\r\n  stroke,\r\n  translate,\r\n  LineCapStyle,\r\n  setLineCap,\r\n  rotateDegrees,\r\n  setGraphicsState,\r\n  setDashPattern,\r\n  beginMarkedContent,\r\n  endMarkedContent,\r\n  clip,\r\n  endPath,\r\n  appendBezierCurve,\r\n} from 'src/api/operators';\r\nimport { Rotation, degrees, toRadians } from 'src/api/rotations';\r\nimport { svgPathToOperators } from 'src/api/svgPath';\r\nimport { PDFHexString, PDFName, PDFNumber, PDFOperator } from 'src/core';\r\nimport { asNumber } from 'src/api/objects';\r\n\r\nexport interface DrawTextOptions {\r\n  color: Color;\r\n  font: string | PDFName;\r\n  size: number | PDFNumber;\r\n  rotate: Rotation;\r\n  xSkew: Rotation;\r\n  ySkew: Rotation;\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  graphicsState?: string | PDFName;\r\n}\r\n\r\nexport const drawText = (\r\n  line: PDFHexString,\r\n  options: DrawTextOptions,\r\n): PDFOperator[] =>\r\n  [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n    beginText(),\r\n    setFillingColor(options.color),\r\n    setFontAndSize(options.font, options.size),\r\n    rotateAndSkewTextRadiansAndTranslate(\r\n      toRadians(options.rotate),\r\n      toRadians(options.xSkew),\r\n      toRadians(options.ySkew),\r\n      options.x,\r\n      options.y,\r\n    ),\r\n    showText(line),\r\n    endText(),\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\nexport interface DrawLinesOfTextOptions extends DrawTextOptions {\r\n  lineHeight: number | PDFNumber;\r\n}\r\n\r\nexport const drawLinesOfText = (\r\n  lines: PDFHexString[],\r\n  options: DrawLinesOfTextOptions,\r\n): PDFOperator[] => {\r\n  const operators = [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n    beginText(),\r\n    setFillingColor(options.color),\r\n    setFontAndSize(options.font, options.size),\r\n    setLineHeight(options.lineHeight),\r\n    rotateAndSkewTextRadiansAndTranslate(\r\n      toRadians(options.rotate),\r\n      toRadians(options.xSkew),\r\n      toRadians(options.ySkew),\r\n      options.x,\r\n      options.y,\r\n    ),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\n  for (let idx = 0, len = lines.length; idx < len; idx++) {\r\n    operators.push(showText(lines[idx]), nextLine());\r\n  }\r\n\r\n  operators.push(endText(), popGraphicsState());\r\n  return operators;\r\n};\r\n\r\nexport const drawImage = (\r\n  name: string | PDFName,\r\n  options: {\r\n    x: number | PDFNumber;\r\n    y: number | PDFNumber;\r\n    width: number | PDFNumber;\r\n    height: number | PDFNumber;\r\n    rotate: Rotation;\r\n    xSkew: Rotation;\r\n    ySkew: Rotation;\r\n    graphicsState?: string | PDFName;\r\n  },\r\n): PDFOperator[] =>\r\n  [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n    translate(options.x, options.y),\r\n    rotateRadians(toRadians(options.rotate)),\r\n    scale(options.width, options.height),\r\n    skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\r\n    drawObject(name),\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\nexport const drawPage = (\r\n  name: string | PDFName,\r\n  options: {\r\n    x: number | PDFNumber;\r\n    y: number | PDFNumber;\r\n    xScale: number | PDFNumber;\r\n    yScale: number | PDFNumber;\r\n    rotate: Rotation;\r\n    xSkew: Rotation;\r\n    ySkew: Rotation;\r\n    graphicsState?: string | PDFName;\r\n  },\r\n): PDFOperator[] =>\r\n  [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n    translate(options.x, options.y),\r\n    rotateRadians(toRadians(options.rotate)),\r\n    scale(options.xScale, options.yScale),\r\n    skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\r\n    drawObject(name),\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\nexport const drawLine = (options: {\r\n  start: { x: number | PDFNumber; y: number | PDFNumber };\r\n  end: { x: number | PDFNumber; y: number | PDFNumber };\r\n  thickness: number | PDFNumber;\r\n  color: Color | undefined;\r\n  dashArray?: (number | PDFNumber)[];\r\n  dashPhase?: number | PDFNumber;\r\n  lineCap?: LineCapStyle;\r\n  graphicsState?: string | PDFName;\r\n}) =>\r\n  [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n    options.color && setStrokingColor(options.color),\r\n    setLineWidth(options.thickness),\r\n    setDashPattern(options.dashArray ?? [], options.dashPhase ?? 0),\r\n    moveTo(options.start.x, options.start.y),\r\n    options.lineCap && setLineCap(options.lineCap),\r\n    moveTo(options.start.x, options.start.y),\r\n    lineTo(options.end.x, options.end.y),\r\n    stroke(),\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\nexport const drawRectangle = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  width: number | PDFNumber;\r\n  height: number | PDFNumber;\r\n  borderWidth: number | PDFNumber;\r\n  color: Color | undefined;\r\n  borderColor: Color | undefined;\r\n  rotate: Rotation;\r\n  xSkew: Rotation;\r\n  ySkew: Rotation;\r\n  borderLineCap?: LineCapStyle;\r\n  borderDashArray?: (number | PDFNumber)[];\r\n  borderDashPhase?: number | PDFNumber;\r\n  graphicsState?: string | PDFName;\r\n}) =>\r\n  [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n    options.color && setFillingColor(options.color),\r\n    options.borderColor && setStrokingColor(options.borderColor),\r\n    setLineWidth(options.borderWidth),\r\n    options.borderLineCap && setLineCap(options.borderLineCap),\r\n    setDashPattern(options.borderDashArray ?? [], options.borderDashPhase ?? 0),\r\n    translate(options.x, options.y),\r\n    rotateRadians(toRadians(options.rotate)),\r\n    skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)),\r\n    moveTo(0, 0),\r\n    lineTo(0, options.height),\r\n    lineTo(options.width, options.height),\r\n    lineTo(options.width, 0),\r\n    closePath(),\r\n\r\n    // prettier-ignore\r\n    options.color && options.borderWidth ? fillAndStroke()\r\n  : options.color                      ? fill()\r\n  : options.borderColor                ? stroke()\r\n  : closePath(),\r\n\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\r\n\r\n/** @deprecated */\r\nexport const drawEllipsePath = (config: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  xScale: number | PDFNumber;\r\n  yScale: number | PDFNumber;\r\n}): PDFOperator[] => {\r\n  let x = asNumber(config.x);\r\n  let y = asNumber(config.y);\r\n  const xScale = asNumber(config.xScale);\r\n  const yScale = asNumber(config.yScale);\r\n\r\n  x -= xScale;\r\n  y -= yScale;\r\n\r\n  const ox = xScale * KAPPA;\r\n  const oy = yScale * KAPPA;\r\n  const xe = x + xScale * 2;\r\n  const ye = y + yScale * 2;\r\n  const xm = x + xScale;\r\n  const ym = y + yScale;\r\n\r\n  return [\r\n    pushGraphicsState(),\r\n    moveTo(x, ym),\r\n    appendBezierCurve(x, ym - oy, xm - ox, y, xm, y),\r\n    appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym),\r\n    appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye),\r\n    appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym),\r\n    popGraphicsState(),\r\n  ];\r\n};\r\n\r\nconst drawEllipseCurves = (config: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  xScale: number | PDFNumber;\r\n  yScale: number | PDFNumber;\r\n  rotate: Rotation;\r\n}): PDFOperator[] => {\r\n  const centerX = asNumber(config.x);\r\n  const centerY = asNumber(config.y);\r\n  const xScale = asNumber(config.xScale);\r\n  const yScale = asNumber(config.yScale);\r\n\r\n  const x = -xScale;\r\n  const y = -yScale;\r\n\r\n  const ox = xScale * KAPPA;\r\n  const oy = yScale * KAPPA;\r\n  const xe = x + xScale * 2;\r\n  const ye = y + yScale * 2;\r\n  const xm = x + xScale;\r\n  const ym = y + yScale;\r\n\r\n  return [\r\n    translate(centerX, centerY),\r\n    rotateRadians(toRadians(config.rotate)),\r\n    moveTo(x, ym),\r\n    appendBezierCurve(x, ym - oy, xm - ox, y, xm, y),\r\n    appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym),\r\n    appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye),\r\n    appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym),\r\n  ];\r\n};\r\n\r\nexport const drawEllipse = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  xScale: number | PDFNumber;\r\n  yScale: number | PDFNumber;\r\n  rotate?: Rotation;\r\n  color: Color | undefined;\r\n  borderColor: Color | undefined;\r\n  borderWidth: number | PDFNumber;\r\n  borderDashArray?: (number | PDFNumber)[];\r\n  borderDashPhase?: number | PDFNumber;\r\n  graphicsState?: string | PDFName;\r\n  borderLineCap?: LineCapStyle;\r\n}) =>\r\n  [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n    options.color && setFillingColor(options.color),\r\n    options.borderColor && setStrokingColor(options.borderColor),\r\n    setLineWidth(options.borderWidth),\r\n    options.borderLineCap && setLineCap(options.borderLineCap),\r\n    setDashPattern(options.borderDashArray ?? [], options.borderDashPhase ?? 0),\r\n\r\n    // The `drawEllipsePath` branch is only here for backwards compatibility.\r\n    // See https://github.com/Hopding/pdf-lib/pull/511#issuecomment-667685655.\r\n    ...(options.rotate === undefined\r\n      ? drawEllipsePath({\r\n          x: options.x,\r\n          y: options.y,\r\n          xScale: options.xScale,\r\n          yScale: options.yScale,\r\n        })\r\n      : drawEllipseCurves({\r\n          x: options.x,\r\n          y: options.y,\r\n          xScale: options.xScale,\r\n          yScale: options.yScale,\r\n          rotate: options.rotate ?? degrees(0),\r\n        })),\r\n\r\n    // prettier-ignore\r\n    options.color && options.borderWidth ? fillAndStroke()\r\n  : options.color                      ? fill()\r\n  : options.borderColor                ? stroke()\r\n  : closePath(),\r\n\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\nexport const drawSvgPath = (\r\n  path: string,\r\n  options: {\r\n    x: number | PDFNumber;\r\n    y: number | PDFNumber;\r\n    rotate?: Rotation;\r\n    scale: number | PDFNumber | undefined;\r\n    color: Color | undefined;\r\n    borderColor: Color | undefined;\r\n    borderWidth: number | PDFNumber;\r\n    borderDashArray?: (number | PDFNumber)[];\r\n    borderDashPhase?: number | PDFNumber;\r\n    borderLineCap?: LineCapStyle;\r\n    graphicsState?: string | PDFName;\r\n  },\r\n) =>\r\n  [\r\n    pushGraphicsState(),\r\n    options.graphicsState && setGraphicsState(options.graphicsState),\r\n\r\n    translate(options.x, options.y),\r\n    rotateRadians(toRadians(options.rotate ?? degrees(0))),\r\n\r\n    // SVG path Y axis is opposite pdf-lib's\r\n    options.scale ? scale(options.scale, -options.scale) : scale(1, -1),\r\n\r\n    options.color && setFillingColor(options.color),\r\n    options.borderColor && setStrokingColor(options.borderColor),\r\n    options.borderWidth && setLineWidth(options.borderWidth),\r\n    options.borderLineCap && setLineCap(options.borderLineCap),\r\n\r\n    setDashPattern(options.borderDashArray ?? [], options.borderDashPhase ?? 0),\r\n\r\n    ...svgPathToOperators(path),\r\n\r\n    // prettier-ignore\r\n    options.color && options.borderWidth ? fillAndStroke()\r\n  : options.color                      ? fill()\r\n  : options.borderColor                ? stroke()\r\n  : closePath(),\r\n\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n\r\nexport const drawCheckMark = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  size: number | PDFNumber;\r\n  thickness: number | PDFNumber;\r\n  color: Color | undefined;\r\n}) => {\r\n  const size = asNumber(options.size);\r\n\r\n  /*********************** Define Check Mark Points ***************************/\r\n  // A check mark is defined by three points in some coordinate space. Here, we\r\n  // define these points in a unit coordinate system, where the range of the x\r\n  // and y axis are both [-1, 1].\r\n  //\r\n  // Note that we do not hard code `p1y` in case we wish to change the\r\n  // size/shape of the check mark in the future. We want the check mark to\r\n  // always form a right angle. This means that the dot product between (p1-p2)\r\n  // and (p3-p2) should be zero:\r\n  //\r\n  //   (p1x-p2x) * (p3x-p2x) + (p1y-p2y) * (p3y-p2y) = 0\r\n  //\r\n  // We can now rejigger this equation to solve for `p1y`:\r\n  //\r\n  //   (p1y-p2y) * (p3y-p2y) = -((p1x-p2x) * (p3x-p2x))\r\n  //   (p1y-p2y) = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y)\r\n  //   p1y = -((p1x-p2x) * (p3x-p2x)) / (p3y-p2y) + p2y\r\n  //\r\n  // Thanks to my friend Joel Walker (https://github.com/JWalker1995) for\r\n  // devising the above equation and unit coordinate system approach!\r\n\r\n  // (x, y) coords of the check mark's bottommost point\r\n  const p2x = -1 + 0.75;\r\n  const p2y = -1 + 0.51;\r\n\r\n  // (x, y) coords of the check mark's topmost point\r\n  const p3y = 1 - 0.525;\r\n  const p3x = 1 - 0.31;\r\n\r\n  // (x, y) coords of the check mark's center (vertically) point\r\n  const p1x = -1 + 0.325;\r\n  const p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\r\n  /****************************************************************************/\r\n\r\n  return [\r\n    pushGraphicsState(),\r\n    options.color && setStrokingColor(options.color),\r\n    setLineWidth(options.thickness),\r\n\r\n    translate(options.x, options.y),\r\n    moveTo(p1x * size, p1y * size),\r\n    lineTo(p2x * size, p2y * size),\r\n    lineTo(p3x * size, p3y * size),\r\n\r\n    stroke(),\r\n    popGraphicsState(),\r\n  ].filter(Boolean) as PDFOperator[];\r\n};\r\n\r\n// prettier-ignore\r\nexport const rotateInPlace = (options: {\r\n  width: number | PDFNumber;\r\n  height: number | PDFNumber;\r\n  rotation: 0 | 90 | 180 | 270;\r\n}) =>\r\n    options.rotation === 0 ? [\r\n      translate(0, 0),\r\n      rotateDegrees(0)\r\n    ]\r\n  : options.rotation === 90 ? [\r\n      translate(options.width, 0),\r\n      rotateDegrees(90)\r\n    ]\r\n  : options.rotation === 180 ? [\r\n      translate(options.width, options.height),\r\n      rotateDegrees(180)\r\n    ]\r\n  : options.rotation === 270 ? [\r\n      translate(0, options.height),\r\n      rotateDegrees(270)\r\n    ]\r\n  : []; // Invalid rotation - noop\r\n\r\nexport const drawCheckBox = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  width: number | PDFNumber;\r\n  height: number | PDFNumber;\r\n  thickness: number | PDFNumber;\r\n  borderWidth: number | PDFNumber;\r\n  markColor: Color | undefined;\r\n  color: Color | undefined;\r\n  borderColor: Color | undefined;\r\n  filled: boolean;\r\n}) => {\r\n  const outline = drawRectangle({\r\n    x: options.x,\r\n    y: options.y,\r\n    width: options.width,\r\n    height: options.height,\r\n    borderWidth: options.borderWidth,\r\n    color: options.color,\r\n    borderColor: options.borderColor,\r\n    rotate: degrees(0),\r\n    xSkew: degrees(0),\r\n    ySkew: degrees(0),\r\n  });\r\n\r\n  if (!options.filled) return outline;\r\n\r\n  const width = asNumber(options.width);\r\n  const height = asNumber(options.height);\r\n\r\n  const checkMarkSize = Math.min(width, height) / 2;\r\n\r\n  const checkMark = drawCheckMark({\r\n    x: width / 2,\r\n    y: height / 2,\r\n    size: checkMarkSize,\r\n    thickness: options.thickness,\r\n    color: options.markColor,\r\n  });\r\n\r\n  return [pushGraphicsState(), ...outline, ...checkMark, popGraphicsState()];\r\n};\r\n\r\nexport const drawRadioButton = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  width: number | PDFNumber;\r\n  height: number | PDFNumber;\r\n  borderWidth: number | PDFNumber;\r\n  dotColor: Color | undefined;\r\n  color: Color | undefined;\r\n  borderColor: Color | undefined;\r\n  filled: boolean;\r\n}) => {\r\n  const width = asNumber(options.width);\r\n  const height = asNumber(options.height);\r\n\r\n  const outlineScale = Math.min(width, height) / 2;\r\n\r\n  const outline = drawEllipse({\r\n    x: options.x,\r\n    y: options.y,\r\n    xScale: outlineScale,\r\n    yScale: outlineScale,\r\n    color: options.color,\r\n    borderColor: options.borderColor,\r\n    borderWidth: options.borderWidth,\r\n  });\r\n\r\n  if (!options.filled) return outline;\r\n\r\n  const dot = drawEllipse({\r\n    x: options.x,\r\n    y: options.y,\r\n    xScale: outlineScale * 0.45,\r\n    yScale: outlineScale * 0.45,\r\n    color: options.dotColor,\r\n    borderColor: undefined,\r\n    borderWidth: 0,\r\n  });\r\n\r\n  return [pushGraphicsState(), ...outline, ...dot, popGraphicsState()];\r\n};\r\n\r\nexport const drawButton = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  width: number | PDFNumber;\r\n  height: number | PDFNumber;\r\n  borderWidth: number | PDFNumber;\r\n  color: Color | undefined;\r\n  borderColor: Color | undefined;\r\n  textLines: { encoded: PDFHexString; x: number; y: number }[];\r\n  textColor: Color;\r\n  font: string | PDFName;\r\n  fontSize: number | PDFNumber;\r\n}) => {\r\n  const x = asNumber(options.x);\r\n  const y = asNumber(options.y);\r\n  const width = asNumber(options.width);\r\n  const height = asNumber(options.height);\r\n\r\n  const background = drawRectangle({\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    borderWidth: options.borderWidth,\r\n    color: options.color,\r\n    borderColor: options.borderColor,\r\n    rotate: degrees(0),\r\n    xSkew: degrees(0),\r\n    ySkew: degrees(0),\r\n  });\r\n\r\n  const lines = drawTextLines(options.textLines, {\r\n    color: options.textColor,\r\n    font: options.font,\r\n    size: options.fontSize,\r\n    rotate: degrees(0),\r\n    xSkew: degrees(0),\r\n    ySkew: degrees(0),\r\n  });\r\n\r\n  return [pushGraphicsState(), ...background, ...lines, popGraphicsState()];\r\n};\r\n\r\nexport interface DrawTextLinesOptions {\r\n  color: Color;\r\n  font: string | PDFName;\r\n  size: number | PDFNumber;\r\n  rotate: Rotation;\r\n  xSkew: Rotation;\r\n  ySkew: Rotation;\r\n}\r\n\r\nexport const drawTextLines = (\r\n  lines: { encoded: PDFHexString; x: number; y: number }[],\r\n  options: DrawTextLinesOptions,\r\n): PDFOperator[] => {\r\n  const operators = [\r\n    beginText(),\r\n    setFillingColor(options.color),\r\n    setFontAndSize(options.font, options.size),\r\n  ];\r\n\r\n  for (let idx = 0, len = lines.length; idx < len; idx++) {\r\n    const { encoded, x, y } = lines[idx];\r\n    operators.push(\r\n      rotateAndSkewTextRadiansAndTranslate(\r\n        toRadians(options.rotate),\r\n        toRadians(options.xSkew),\r\n        toRadians(options.ySkew),\r\n        x,\r\n        y,\r\n      ),\r\n      showText(encoded),\r\n    );\r\n  }\r\n\r\n  operators.push(endText());\r\n\r\n  return operators;\r\n};\r\n\r\nexport const drawTextField = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  width: number | PDFNumber;\r\n  height: number | PDFNumber;\r\n  borderWidth: number | PDFNumber;\r\n  color: Color | undefined;\r\n  borderColor: Color | undefined;\r\n  textLines: { encoded: PDFHexString; x: number; y: number }[];\r\n  textColor: Color;\r\n  font: string | PDFName;\r\n  fontSize: number | PDFNumber;\r\n  padding: number | PDFNumber;\r\n}) => {\r\n  const x = asNumber(options.x);\r\n  const y = asNumber(options.y);\r\n  const width = asNumber(options.width);\r\n  const height = asNumber(options.height);\r\n  const borderWidth = asNumber(options.borderWidth);\r\n  const padding = asNumber(options.padding);\r\n\r\n  const clipX = x + borderWidth / 2 + padding;\r\n  const clipY = y + borderWidth / 2 + padding;\r\n  const clipWidth = width - (borderWidth / 2 + padding) * 2;\r\n  const clipHeight = height - (borderWidth / 2 + padding) * 2;\r\n\r\n  const clippingArea = [\r\n    moveTo(clipX, clipY),\r\n    lineTo(clipX, clipY + clipHeight),\r\n    lineTo(clipX + clipWidth, clipY + clipHeight),\r\n    lineTo(clipX + clipWidth, clipY),\r\n    closePath(),\r\n    clip(),\r\n    endPath(),\r\n  ];\r\n\r\n  const background = drawRectangle({\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    borderWidth: options.borderWidth,\r\n    color: options.color,\r\n    borderColor: options.borderColor,\r\n    rotate: degrees(0),\r\n    xSkew: degrees(0),\r\n    ySkew: degrees(0),\r\n  });\r\n\r\n  const lines = drawTextLines(options.textLines, {\r\n    color: options.textColor,\r\n    font: options.font,\r\n    size: options.fontSize,\r\n    rotate: degrees(0),\r\n    xSkew: degrees(0),\r\n    ySkew: degrees(0),\r\n  });\r\n\r\n  const markedContent = [\r\n    beginMarkedContent('Tx'),\r\n    pushGraphicsState(),\r\n    ...lines,\r\n    popGraphicsState(),\r\n    endMarkedContent(),\r\n  ];\r\n\r\n  return [\r\n    pushGraphicsState(),\r\n    ...background,\r\n    ...clippingArea,\r\n    ...markedContent,\r\n    popGraphicsState(),\r\n  ];\r\n};\r\n\r\nexport const drawOptionList = (options: {\r\n  x: number | PDFNumber;\r\n  y: number | PDFNumber;\r\n  width: number | PDFNumber;\r\n  height: number | PDFNumber;\r\n  borderWidth: number | PDFNumber;\r\n  color: Color | undefined;\r\n  borderColor: Color | undefined;\r\n  textLines: { encoded: PDFHexString; x: number; y: number; height: number }[];\r\n  textColor: Color;\r\n  font: string | PDFName;\r\n  fontSize: number | PDFNumber;\r\n  lineHeight: number | PDFNumber;\r\n  selectedLines: number[];\r\n  selectedColor: Color;\r\n  padding: number | PDFNumber;\r\n}) => {\r\n  const x = asNumber(options.x);\r\n  const y = asNumber(options.y);\r\n  const width = asNumber(options.width);\r\n  const height = asNumber(options.height);\r\n  const lineHeight = asNumber(options.lineHeight);\r\n  const borderWidth = asNumber(options.borderWidth);\r\n  const padding = asNumber(options.padding);\r\n\r\n  const clipX = x + borderWidth / 2 + padding;\r\n  const clipY = y + borderWidth / 2 + padding;\r\n  const clipWidth = width - (borderWidth / 2 + padding) * 2;\r\n  const clipHeight = height - (borderWidth / 2 + padding) * 2;\r\n\r\n  const clippingArea = [\r\n    moveTo(clipX, clipY),\r\n    lineTo(clipX, clipY + clipHeight),\r\n    lineTo(clipX + clipWidth, clipY + clipHeight),\r\n    lineTo(clipX + clipWidth, clipY),\r\n    closePath(),\r\n    clip(),\r\n    endPath(),\r\n  ];\r\n\r\n  const background = drawRectangle({\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    borderWidth: options.borderWidth,\r\n    color: options.color,\r\n    borderColor: options.borderColor,\r\n    rotate: degrees(0),\r\n    xSkew: degrees(0),\r\n    ySkew: degrees(0),\r\n  });\r\n\r\n  const highlights: PDFOperator[] = [];\r\n  for (let idx = 0, len = options.selectedLines.length; idx < len; idx++) {\r\n    const line = options.textLines[options.selectedLines[idx]];\r\n    highlights.push(\r\n      ...drawRectangle({\r\n        x: line.x - padding,\r\n        y: line.y - (lineHeight - line.height) / 2,\r\n        width: width - borderWidth,\r\n        height: line.height + (lineHeight - line.height) / 2,\r\n        borderWidth: 0,\r\n        color: options.selectedColor,\r\n        borderColor: undefined,\r\n        rotate: degrees(0),\r\n        xSkew: degrees(0),\r\n        ySkew: degrees(0),\r\n      }),\r\n    );\r\n  }\r\n\r\n  const lines = drawTextLines(options.textLines, {\r\n    color: options.textColor,\r\n    font: options.font,\r\n    size: options.fontSize,\r\n    rotate: degrees(0),\r\n    xSkew: degrees(0),\r\n    ySkew: degrees(0),\r\n  });\r\n\r\n  const markedContent = [\r\n    beginMarkedContent('Tx'),\r\n    pushGraphicsState(),\r\n    ...lines,\r\n    popGraphicsState(),\r\n    endMarkedContent(),\r\n  ];\r\n\r\n  return [\r\n    pushGraphicsState(),\r\n    ...background,\r\n    ...highlights,\r\n    ...clippingArea,\r\n    ...markedContent,\r\n    popGraphicsState(),\r\n  ];\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}