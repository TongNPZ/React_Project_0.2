{"ast":null,"code":"import { __extends } from \"tslib\";\nimport PDFObject from \"./PDFObject\";\nimport CharCodes from \"../syntax/CharCodes\";\nimport { copyStringIntoBuffer, padStart, utf16Decode, pdfDocEncodingDecode, toCharCode, parseDate, hasUtf16BOM } from \"../../utils\";\nimport { InvalidPDFDateStringError } from \"../errors\";\nvar PDFString = /** @class */function (_super) {\n  __extends(PDFString, _super);\n  function PDFString(value) {\n    var _this = _super.call(this) || this;\n    _this.value = value;\n    return _this;\n  }\n  PDFString.prototype.asBytes = function () {\n    var bytes = [];\n    var octal = '';\n    var escaped = false;\n    var pushByte = function (byte) {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n    for (var idx = 0, len = this.value.length; idx < len; idx++) {\n      var char = this.value[idx];\n      var byte = toCharCode(char);\n      var nextChar = this.value[idx + 1];\n      if (!escaped) {\n        if (byte === CharCodes.BackSlash) escaped = true;else pushByte(byte);\n      } else {\n        if (byte === CharCodes.Newline) pushByte();else if (byte === CharCodes.CarriageReturn) pushByte();else if (byte === CharCodes.n) pushByte(CharCodes.Newline);else if (byte === CharCodes.r) pushByte(CharCodes.CarriageReturn);else if (byte === CharCodes.t) pushByte(CharCodes.Tab);else if (byte === CharCodes.b) pushByte(CharCodes.Backspace);else if (byte === CharCodes.f) pushByte(CharCodes.FormFeed);else if (byte === CharCodes.LeftParen) pushByte(CharCodes.LeftParen);else if (byte === CharCodes.RightParen) pushByte(CharCodes.RightParen);else if (byte === CharCodes.Backspace) pushByte(CharCodes.BackSlash);else if (byte >= CharCodes.Zero && byte <= CharCodes.Seven) {\n          octal += char;\n          if (octal.length === 3 || !(nextChar >= '0' && nextChar <= '7')) {\n            pushByte(parseInt(octal, 8));\n            octal = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n    return new Uint8Array(bytes);\n  };\n  PDFString.prototype.decodeText = function () {\n    var bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  };\n  PDFString.prototype.decodeDate = function () {\n    var text = this.decodeText();\n    var date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  };\n  PDFString.prototype.asString = function () {\n    return this.value;\n  };\n  PDFString.prototype.clone = function () {\n    return PDFString.of(this.value);\n  };\n  PDFString.prototype.toString = function () {\n    return \"(\" + this.value + \")\";\n  };\n  PDFString.prototype.sizeInBytes = function () {\n    return this.value.length + 2;\n  };\n  PDFString.prototype.copyBytesInto = function (buffer, offset) {\n    buffer[offset++] = CharCodes.LeftParen;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.RightParen;\n    return this.value.length + 2;\n  };\n  // The PDF spec allows newlines and parens to appear directly within a literal\n  // string. These character _may_ be escaped. But they do not _have_ to be. So\n  // for simplicity, we will not bother escaping them.\n  PDFString.of = function (value) {\n    return new PDFString(value);\n  };\n  PDFString.fromDate = function (date) {\n    var year = padStart(String(date.getUTCFullYear()), 4, '0');\n    var month = padStart(String(date.getUTCMonth() + 1), 2, '0');\n    var day = padStart(String(date.getUTCDate()), 2, '0');\n    var hours = padStart(String(date.getUTCHours()), 2, '0');\n    var mins = padStart(String(date.getUTCMinutes()), 2, '0');\n    var secs = padStart(String(date.getUTCSeconds()), 2, '0');\n    return new PDFString(\"D:\" + year + month + day + hours + mins + secs + \"Z\");\n  };\n  return PDFString;\n}(PDFObject);\nexport default PDFString;","map":{"version":3,"names":["PDFObject","CharCodes","copyStringIntoBuffer","padStart","utf16Decode","pdfDocEncodingDecode","toCharCode","parseDate","hasUtf16BOM","InvalidPDFDateStringError","PDFString","_super","__extends","value","_this","call","prototype","asBytes","bytes","octal","escaped","pushByte","byte","undefined","push","idx","len","length","char","nextChar","BackSlash","Newline","CarriageReturn","n","r","t","Tab","b","Backspace","f","FormFeed","LeftParen","RightParen","Zero","Seven","parseInt","Uint8Array","decodeText","decodeDate","text","date","asString","clone","of","toString","sizeInBytes","copyBytesInto","buffer","offset","fromDate","year","String","getUTCFullYear","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","mins","getUTCMinutes","secs","getUTCSeconds"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\core\\objects\\PDFString.ts"],"sourcesContent":["import PDFObject from 'src/core/objects/PDFObject';\nimport CharCodes from 'src/core/syntax/CharCodes';\nimport {\n  copyStringIntoBuffer,\n  padStart,\n  utf16Decode,\n  pdfDocEncodingDecode,\n  toCharCode,\n  parseDate,\n  hasUtf16BOM,\n} from 'src/utils';\nimport { InvalidPDFDateStringError } from 'src/core/errors';\n\nclass PDFString extends PDFObject {\n  // The PDF spec allows newlines and parens to appear directly within a literal\n  // string. These character _may_ be escaped. But they do not _have_ to be. So\n  // for simplicity, we will not bother escaping them.\n  static of = (value: string) => new PDFString(value);\n\n  static fromDate = (date: Date) => {\n    const year = padStart(String(date.getUTCFullYear()), 4, '0');\n    const month = padStart(String(date.getUTCMonth() + 1), 2, '0');\n    const day = padStart(String(date.getUTCDate()), 2, '0');\n    const hours = padStart(String(date.getUTCHours()), 2, '0');\n    const mins = padStart(String(date.getUTCMinutes()), 2, '0');\n    const secs = padStart(String(date.getUTCSeconds()), 2, '0');\n    return new PDFString(`D:${year}${month}${day}${hours}${mins}${secs}Z`);\n  };\n\n  private readonly value: string;\n\n  private constructor(value: string) {\n    super();\n    this.value = value;\n  }\n\n  asBytes(): Uint8Array {\n    const bytes: number[] = [];\n\n    let octal = '';\n    let escaped = false;\n\n    const pushByte = (byte?: number) => {\n      if (byte !== undefined) bytes.push(byte);\n      escaped = false;\n    };\n\n    for (let idx = 0, len = this.value.length; idx < len; idx++) {\n      const char = this.value[idx];\n      const byte = toCharCode(char);\n      const nextChar = this.value[idx + 1];\n      if (!escaped) {\n        if (byte === CharCodes.BackSlash) escaped = true;\n        else pushByte(byte);\n      } else {\n        if (byte === CharCodes.Newline) pushByte();\n        else if (byte === CharCodes.CarriageReturn) pushByte();\n        else if (byte === CharCodes.n) pushByte(CharCodes.Newline);\n        else if (byte === CharCodes.r) pushByte(CharCodes.CarriageReturn);\n        else if (byte === CharCodes.t) pushByte(CharCodes.Tab);\n        else if (byte === CharCodes.b) pushByte(CharCodes.Backspace);\n        else if (byte === CharCodes.f) pushByte(CharCodes.FormFeed);\n        else if (byte === CharCodes.LeftParen) pushByte(CharCodes.LeftParen);\n        else if (byte === CharCodes.RightParen) pushByte(CharCodes.RightParen);\n        else if (byte === CharCodes.Backspace) pushByte(CharCodes.BackSlash);\n        else if (byte >= CharCodes.Zero && byte <= CharCodes.Seven) {\n          octal += char;\n          if (octal.length === 3 || !(nextChar >= '0' && nextChar <= '7')) {\n            pushByte(parseInt(octal, 8));\n            octal = '';\n          }\n        } else {\n          pushByte(byte);\n        }\n      }\n    }\n\n    return new Uint8Array(bytes);\n  }\n\n  decodeText(): string {\n    const bytes = this.asBytes();\n    if (hasUtf16BOM(bytes)) return utf16Decode(bytes);\n    return pdfDocEncodingDecode(bytes);\n  }\n\n  decodeDate(): Date {\n    const text = this.decodeText();\n    const date = parseDate(text);\n    if (!date) throw new InvalidPDFDateStringError(text);\n    return date;\n  }\n\n  asString(): string {\n    return this.value;\n  }\n\n  clone(): PDFString {\n    return PDFString.of(this.value);\n  }\n\n  toString(): string {\n    return `(${this.value})`;\n  }\n\n  sizeInBytes(): number {\n    return this.value.length + 2;\n  }\n\n  copyBytesInto(buffer: Uint8Array, offset: number): number {\n    buffer[offset++] = CharCodes.LeftParen;\n    offset += copyStringIntoBuffer(this.value, buffer, offset);\n    buffer[offset++] = CharCodes.RightParen;\n    return this.value.length + 2;\n  }\n}\n\nexport default PDFString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}