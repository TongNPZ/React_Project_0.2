{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { ReparseError } from \"../errors\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport PDFRef from \"../objects/PDFRef\";\nimport ByteStream from \"./ByteStream\";\nimport PDFObjectParser from \"./PDFObjectParser\";\nimport { waitForTick } from \"../../utils\";\nvar PDFObjectStreamParser = /** @class */function (_super) {\n  __extends(PDFObjectStreamParser, _super);\n  function PDFObjectStreamParser(rawStream, shouldWaitForTick) {\n    var _this = _super.call(this, ByteStream.fromPDFRawStream(rawStream), rawStream.dict.context) || this;\n    var dict = rawStream.dict;\n    _this.alreadyParsed = false;\n    _this.shouldWaitForTick = shouldWaitForTick || function () {\n      return false;\n    };\n    _this.firstOffset = dict.lookup(PDFName.of('First'), PDFNumber).asNumber();\n    _this.objectCount = dict.lookup(PDFName.of('N'), PDFNumber).asNumber();\n    return _this;\n  }\n  PDFObjectStreamParser.prototype.parseIntoContext = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var offsetsAndObjectNumbers, idx, len, _a, objectNumber, offset, object, ref;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.alreadyParsed) {\n              throw new ReparseError('PDFObjectStreamParser', 'parseIntoContext');\n            }\n            this.alreadyParsed = true;\n            offsetsAndObjectNumbers = this.parseOffsetsAndObjectNumbers();\n            idx = 0, len = offsetsAndObjectNumbers.length;\n            _b.label = 1;\n          case 1:\n            if (!(idx < len)) return [3 /*break*/, 4];\n            _a = offsetsAndObjectNumbers[idx], objectNumber = _a.objectNumber, offset = _a.offset;\n            this.bytes.moveTo(this.firstOffset + offset);\n            object = this.parseObject();\n            ref = PDFRef.of(objectNumber, 0);\n            this.context.assign(ref, object);\n            if (!this.shouldWaitForTick()) return [3 /*break*/, 3];\n            return [4 /*yield*/, waitForTick()];\n          case 2:\n            _b.sent();\n            _b.label = 3;\n          case 3:\n            idx++;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  PDFObjectStreamParser.prototype.parseOffsetsAndObjectNumbers = function () {\n    var offsetsAndObjectNumbers = [];\n    for (var idx = 0, len = this.objectCount; idx < len; idx++) {\n      this.skipWhitespaceAndComments();\n      var objectNumber = this.parseRawInt();\n      this.skipWhitespaceAndComments();\n      var offset = this.parseRawInt();\n      offsetsAndObjectNumbers.push({\n        objectNumber: objectNumber,\n        offset: offset\n      });\n    }\n    return offsetsAndObjectNumbers;\n  };\n  PDFObjectStreamParser.forStream = function (rawStream, shouldWaitForTick) {\n    return new PDFObjectStreamParser(rawStream, shouldWaitForTick);\n  };\n  return PDFObjectStreamParser;\n}(PDFObjectParser);\nexport default PDFObjectStreamParser;","map":{"version":3,"names":["ReparseError","PDFName","PDFNumber","PDFRef","ByteStream","PDFObjectParser","waitForTick","PDFObjectStreamParser","_super","__extends","rawStream","shouldWaitForTick","_this","call","fromPDFRawStream","dict","context","alreadyParsed","firstOffset","lookup","of","asNumber","objectCount","prototype","parseIntoContext","offsetsAndObjectNumbers","parseOffsetsAndObjectNumbers","idx","len","length","_a","objectNumber","offset","bytes","moveTo","object","parseObject","ref","assign","_b","sent","skipWhitespaceAndComments","parseRawInt","push","forStream"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\core\\parser\\PDFObjectStreamParser.ts"],"sourcesContent":["import { ReparseError } from 'src/core/errors';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFNumber from 'src/core/objects/PDFNumber';\nimport PDFRawStream from 'src/core/objects/PDFRawStream';\nimport PDFRef from 'src/core/objects/PDFRef';\nimport ByteStream from 'src/core/parser/ByteStream';\nimport PDFObjectParser from 'src/core/parser/PDFObjectParser';\nimport { waitForTick } from 'src/utils';\n\nclass PDFObjectStreamParser extends PDFObjectParser {\n  static forStream = (\n    rawStream: PDFRawStream,\n    shouldWaitForTick?: () => boolean,\n  ) => new PDFObjectStreamParser(rawStream, shouldWaitForTick);\n\n  private alreadyParsed: boolean;\n  private readonly shouldWaitForTick: () => boolean;\n  private readonly firstOffset: number;\n  private readonly objectCount: number;\n\n  constructor(rawStream: PDFRawStream, shouldWaitForTick?: () => boolean) {\n    super(ByteStream.fromPDFRawStream(rawStream), rawStream.dict.context);\n\n    const { dict } = rawStream;\n\n    this.alreadyParsed = false;\n    this.shouldWaitForTick = shouldWaitForTick || (() => false);\n    this.firstOffset = dict.lookup(PDFName.of('First'), PDFNumber).asNumber();\n    this.objectCount = dict.lookup(PDFName.of('N'), PDFNumber).asNumber();\n  }\n\n  async parseIntoContext(): Promise<void> {\n    if (this.alreadyParsed) {\n      throw new ReparseError('PDFObjectStreamParser', 'parseIntoContext');\n    }\n    this.alreadyParsed = true;\n\n    const offsetsAndObjectNumbers = this.parseOffsetsAndObjectNumbers();\n    for (let idx = 0, len = offsetsAndObjectNumbers.length; idx < len; idx++) {\n      const { objectNumber, offset } = offsetsAndObjectNumbers[idx];\n      this.bytes.moveTo(this.firstOffset + offset);\n      const object = this.parseObject();\n      const ref = PDFRef.of(objectNumber, 0);\n      this.context.assign(ref, object);\n      if (this.shouldWaitForTick()) await waitForTick();\n    }\n  }\n\n  private parseOffsetsAndObjectNumbers(): {\n    objectNumber: number;\n    offset: number;\n  }[] {\n    const offsetsAndObjectNumbers = [];\n    for (let idx = 0, len = this.objectCount; idx < len; idx++) {\n      this.skipWhitespaceAndComments();\n      const objectNumber = this.parseRawInt();\n\n      this.skipWhitespaceAndComments();\n      const offset = this.parseRawInt();\n\n      offsetsAndObjectNumbers.push({ objectNumber, offset });\n    }\n    return offsetsAndObjectNumbers;\n  }\n}\n\nexport default PDFObjectStreamParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}