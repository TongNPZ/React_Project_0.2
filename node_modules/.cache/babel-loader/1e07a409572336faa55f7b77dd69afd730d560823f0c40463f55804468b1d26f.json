{"ast":null,"code":"'use strict';\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar msg = require('./zlib/messages');\nvar ZStream = require('./zlib/zstream');\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH = 0;\nvar Z_FINISH = 4;\nvar Z_OK = 0;\nvar Z_STREAM_END = 1;\nvar Z_SYNC_FLUSH = 2;\nvar Z_DEFAULT_COMPRESSION = -1;\nvar Z_DEFAULT_STRATEGY = 0;\nvar Z_DEFLATED = 8;\n\n/* ===========================================================================*/\n\n/**\r\n * class Deflate\r\n *\r\n * Generic JS-style wrapper for zlib calls. If you don't need\r\n * streaming behaviour - use more simple functions: [[deflate]],\r\n * [[deflateRaw]] and [[gzip]].\r\n **/\n\n/* internal\r\n * Deflate.chunks -> Array\r\n *\r\n * Chunks of output data, if [[Deflate#onData]] not overridden.\r\n **/\n\n/**\r\n * Deflate.result -> Uint8Array|Array\r\n *\r\n * Compressed result, generated by default [[Deflate#onData]]\r\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\r\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\r\n * push a chunk with explicit flush (call [[Deflate#push]] with\r\n * `Z_SYNC_FLUSH` param).\r\n **/\n\n/**\r\n * Deflate.err -> Number\r\n *\r\n * Error code after deflate finished. 0 (Z_OK) on success.\r\n * You will not need it in real life, because deflate errors\r\n * are possible only on wrong options or bad `onData` / `onEnd`\r\n * custom handlers.\r\n **/\n\n/**\r\n * Deflate.msg -> String\r\n *\r\n * Error message, if [[Deflate.err]] != 0\r\n **/\n\n/**\r\n * new Deflate(options)\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Creates new deflator instance with specified params. Throws exception\r\n * on bad params. Supported options:\r\n *\r\n * - `level`\r\n * - `windowBits`\r\n * - `memLevel`\r\n * - `strategy`\r\n * - `dictionary`\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Additional options, for internal needs:\r\n *\r\n * - `chunkSize` - size of generated data chunks (16K by default)\r\n * - `raw` (Boolean) - do raw deflate\r\n * - `gzip` (Boolean) - create gzip wrapper\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n * - `header` (Object) - custom header for gzip\r\n *   - `text` (Boolean) - true if compressed data believed to be text\r\n *   - `time` (Number) - modification time, unix timestamp\r\n *   - `os` (Number) - operation system code\r\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\r\n *   - `name` (String) - file name (binary string)\r\n *   - `comment` (String) - comment (binary string)\r\n *   - `hcrc` (Boolean) - true if header crc should be added\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\r\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\r\n *\r\n * var deflate = new pako.Deflate({ level: 3});\r\n *\r\n * deflate.push(chunk1, false);\r\n * deflate.push(chunk2, true);  // true -> last chunk\r\n *\r\n * if (deflate.err) { throw new Error(deflate.err); }\r\n *\r\n * console.log(deflate.result);\r\n * ```\r\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n  var opt = this.options;\n  if (opt.raw && opt.windowBits > 0) {\n    opt.windowBits = -opt.windowBits;\n  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n    opt.windowBits += 16;\n  }\n  this.err = 0; // error code, if happens (0 = Z_OK)\n  this.msg = ''; // error message\n  this.ended = false; // used to avoid multiple onEnd() calls\n  this.chunks = []; // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n  var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n    this._dict_set = true;\n  }\n}\n\n/**\r\n * Deflate#push(data[, mode]) -> Boolean\r\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\r\n *   converted to utf8 byte sequence.\r\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\r\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\r\n *\r\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\r\n * new compressed chunks. Returns `true` on success. The last data block must have\r\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\r\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\r\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\r\n *\r\n * On fail call [[Deflate#onEnd]] with error code and return false.\r\n *\r\n * We strongly recommend to use `Uint8Array` on input for best speed (output\r\n * array format is detected automatically). Also, don't skip last param and always\r\n * use the same type in your code (boolean or number). That will improve JS speed.\r\n *\r\n * For regular `Array`-s make sure all elements are [0..255].\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * push(chunk, false); // push one of data chunks\r\n * ...\r\n * push(chunk, true);  // push last chunk\r\n * ```\r\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n  if (this.ended) {\n    return false;\n  }\n  _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode); /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH)) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n  return true;\n};\n\n/**\r\n * Deflate#onData(chunk) -> Void\r\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\r\n *   on js engine support. When string output requested, each chunk\r\n *   will be string.\r\n *\r\n * By default, stores data blocks in `chunks[]` property and glue\r\n * those in `onEnd`. Override this handler, if you need another behaviour.\r\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n/**\r\n * Deflate#onEnd(status) -> Void\r\n * - status (Number): deflate status. 0 (Z_OK) on success,\r\n *   other if not.\r\n *\r\n * Called once after you tell deflate that the input stream is\r\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\r\n * or if an error happened. By default - join collected chunks,\r\n * free memory and fill `results` / `err` properties.\r\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n/**\r\n * deflate(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Compress `data` with deflate algorithm and `options`.\r\n *\r\n * Supported options are:\r\n *\r\n * - level\r\n * - windowBits\r\n * - memLevel\r\n * - strategy\r\n * - dictionary\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Sugar (options):\r\n *\r\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\r\n *   negative windowBits implicitly.\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\r\n *\r\n * console.log(pako.deflate(data));\r\n * ```\r\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) {\n    throw deflator.msg || msg[deflator.err];\n  }\n  return deflator.result;\n}\n\n/**\r\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but creates raw data, without wrapper\r\n * (header and adler32 crc).\r\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n/**\r\n * gzip(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but create gzip wrapper instead of\r\n * deflate one.\r\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;","map":{"version":3,"names":["zlib_deflate","require","utils","strings","msg","ZStream","toString","Object","prototype","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_SYNC_FLUSH","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Deflate","options","assign","level","method","chunkSize","windowBits","memLevel","strategy","to","opt","raw","gzip","err","ended","chunks","strm","avail_out","status","deflateInit2","Error","header","deflateSetHeader","dictionary","dict","string2buf","call","Uint8Array","deflateSetDictionary","_dict_set","push","data","mode","_mode","input","next_in","avail_in","length","output","Buf8","next_out","deflate","onEnd","onData","buf2binstring","shrinkBuf","deflateEnd","chunk","result","join","flattenChunks","deflator","deflateRaw","exports"],"sources":["C:/Users/TongNPZ/Desktop/my-app-2.0/node_modules/pako/lib/deflate.js"],"sourcesContent":["'use strict';\r\n\r\n\r\nvar zlib_deflate = require('./zlib/deflate');\r\nvar utils        = require('./utils/common');\r\nvar strings      = require('./utils/strings');\r\nvar msg          = require('./zlib/messages');\r\nvar ZStream      = require('./zlib/zstream');\r\n\r\nvar toString = Object.prototype.toString;\r\n\r\n/* Public constants ==========================================================*/\r\n/* ===========================================================================*/\r\n\r\nvar Z_NO_FLUSH      = 0;\r\nvar Z_FINISH        = 4;\r\n\r\nvar Z_OK            = 0;\r\nvar Z_STREAM_END    = 1;\r\nvar Z_SYNC_FLUSH    = 2;\r\n\r\nvar Z_DEFAULT_COMPRESSION = -1;\r\n\r\nvar Z_DEFAULT_STRATEGY    = 0;\r\n\r\nvar Z_DEFLATED  = 8;\r\n\r\n/* ===========================================================================*/\r\n\r\n\r\n/**\r\n * class Deflate\r\n *\r\n * Generic JS-style wrapper for zlib calls. If you don't need\r\n * streaming behaviour - use more simple functions: [[deflate]],\r\n * [[deflateRaw]] and [[gzip]].\r\n **/\r\n\r\n/* internal\r\n * Deflate.chunks -> Array\r\n *\r\n * Chunks of output data, if [[Deflate#onData]] not overridden.\r\n **/\r\n\r\n/**\r\n * Deflate.result -> Uint8Array|Array\r\n *\r\n * Compressed result, generated by default [[Deflate#onData]]\r\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\r\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\r\n * push a chunk with explicit flush (call [[Deflate#push]] with\r\n * `Z_SYNC_FLUSH` param).\r\n **/\r\n\r\n/**\r\n * Deflate.err -> Number\r\n *\r\n * Error code after deflate finished. 0 (Z_OK) on success.\r\n * You will not need it in real life, because deflate errors\r\n * are possible only on wrong options or bad `onData` / `onEnd`\r\n * custom handlers.\r\n **/\r\n\r\n/**\r\n * Deflate.msg -> String\r\n *\r\n * Error message, if [[Deflate.err]] != 0\r\n **/\r\n\r\n\r\n/**\r\n * new Deflate(options)\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Creates new deflator instance with specified params. Throws exception\r\n * on bad params. Supported options:\r\n *\r\n * - `level`\r\n * - `windowBits`\r\n * - `memLevel`\r\n * - `strategy`\r\n * - `dictionary`\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Additional options, for internal needs:\r\n *\r\n * - `chunkSize` - size of generated data chunks (16K by default)\r\n * - `raw` (Boolean) - do raw deflate\r\n * - `gzip` (Boolean) - create gzip wrapper\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n * - `header` (Object) - custom header for gzip\r\n *   - `text` (Boolean) - true if compressed data believed to be text\r\n *   - `time` (Number) - modification time, unix timestamp\r\n *   - `os` (Number) - operation system code\r\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\r\n *   - `name` (String) - file name (binary string)\r\n *   - `comment` (String) - comment (binary string)\r\n *   - `hcrc` (Boolean) - true if header crc should be added\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\r\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\r\n *\r\n * var deflate = new pako.Deflate({ level: 3});\r\n *\r\n * deflate.push(chunk1, false);\r\n * deflate.push(chunk2, true);  // true -> last chunk\r\n *\r\n * if (deflate.err) { throw new Error(deflate.err); }\r\n *\r\n * console.log(deflate.result);\r\n * ```\r\n **/\r\nfunction Deflate(options) {\r\n  if (!(this instanceof Deflate)) return new Deflate(options);\r\n\r\n  this.options = utils.assign({\r\n    level: Z_DEFAULT_COMPRESSION,\r\n    method: Z_DEFLATED,\r\n    chunkSize: 16384,\r\n    windowBits: 15,\r\n    memLevel: 8,\r\n    strategy: Z_DEFAULT_STRATEGY,\r\n    to: ''\r\n  }, options || {});\r\n\r\n  var opt = this.options;\r\n\r\n  if (opt.raw && (opt.windowBits > 0)) {\r\n    opt.windowBits = -opt.windowBits;\r\n  }\r\n\r\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\r\n    opt.windowBits += 16;\r\n  }\r\n\r\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\r\n  this.msg    = '';     // error message\r\n  this.ended  = false;  // used to avoid multiple onEnd() calls\r\n  this.chunks = [];     // chunks of compressed data\r\n\r\n  this.strm = new ZStream();\r\n  this.strm.avail_out = 0;\r\n\r\n  var status = zlib_deflate.deflateInit2(\r\n    this.strm,\r\n    opt.level,\r\n    opt.method,\r\n    opt.windowBits,\r\n    opt.memLevel,\r\n    opt.strategy\r\n  );\r\n\r\n  if (status !== Z_OK) {\r\n    throw new Error(msg[status]);\r\n  }\r\n\r\n  if (opt.header) {\r\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\r\n  }\r\n\r\n  if (opt.dictionary) {\r\n    var dict;\r\n    // Convert data if needed\r\n    if (typeof opt.dictionary === 'string') {\r\n      // If we need to compress text, change encoding to utf8.\r\n      dict = strings.string2buf(opt.dictionary);\r\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\r\n      dict = new Uint8Array(opt.dictionary);\r\n    } else {\r\n      dict = opt.dictionary;\r\n    }\r\n\r\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\r\n\r\n    if (status !== Z_OK) {\r\n      throw new Error(msg[status]);\r\n    }\r\n\r\n    this._dict_set = true;\r\n  }\r\n}\r\n\r\n/**\r\n * Deflate#push(data[, mode]) -> Boolean\r\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\r\n *   converted to utf8 byte sequence.\r\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\r\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\r\n *\r\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\r\n * new compressed chunks. Returns `true` on success. The last data block must have\r\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\r\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\r\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\r\n *\r\n * On fail call [[Deflate#onEnd]] with error code and return false.\r\n *\r\n * We strongly recommend to use `Uint8Array` on input for best speed (output\r\n * array format is detected automatically). Also, don't skip last param and always\r\n * use the same type in your code (boolean or number). That will improve JS speed.\r\n *\r\n * For regular `Array`-s make sure all elements are [0..255].\r\n *\r\n * ##### Example\r\n *\r\n * ```javascript\r\n * push(chunk, false); // push one of data chunks\r\n * ...\r\n * push(chunk, true);  // push last chunk\r\n * ```\r\n **/\r\nDeflate.prototype.push = function (data, mode) {\r\n  var strm = this.strm;\r\n  var chunkSize = this.options.chunkSize;\r\n  var status, _mode;\r\n\r\n  if (this.ended) { return false; }\r\n\r\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\r\n\r\n  // Convert data if needed\r\n  if (typeof data === 'string') {\r\n    // If we need to compress text, change encoding to utf8.\r\n    strm.input = strings.string2buf(data);\r\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\r\n    strm.input = new Uint8Array(data);\r\n  } else {\r\n    strm.input = data;\r\n  }\r\n\r\n  strm.next_in = 0;\r\n  strm.avail_in = strm.input.length;\r\n\r\n  do {\r\n    if (strm.avail_out === 0) {\r\n      strm.output = new utils.Buf8(chunkSize);\r\n      strm.next_out = 0;\r\n      strm.avail_out = chunkSize;\r\n    }\r\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\r\n\r\n    if (status !== Z_STREAM_END && status !== Z_OK) {\r\n      this.onEnd(status);\r\n      this.ended = true;\r\n      return false;\r\n    }\r\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\r\n      if (this.options.to === 'string') {\r\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\r\n      } else {\r\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\r\n      }\r\n    }\r\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\r\n\r\n  // Finalize on the last chunk.\r\n  if (_mode === Z_FINISH) {\r\n    status = zlib_deflate.deflateEnd(this.strm);\r\n    this.onEnd(status);\r\n    this.ended = true;\r\n    return status === Z_OK;\r\n  }\r\n\r\n  // callback interim results if Z_SYNC_FLUSH.\r\n  if (_mode === Z_SYNC_FLUSH) {\r\n    this.onEnd(Z_OK);\r\n    strm.avail_out = 0;\r\n    return true;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n\r\n/**\r\n * Deflate#onData(chunk) -> Void\r\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\r\n *   on js engine support. When string output requested, each chunk\r\n *   will be string.\r\n *\r\n * By default, stores data blocks in `chunks[]` property and glue\r\n * those in `onEnd`. Override this handler, if you need another behaviour.\r\n **/\r\nDeflate.prototype.onData = function (chunk) {\r\n  this.chunks.push(chunk);\r\n};\r\n\r\n\r\n/**\r\n * Deflate#onEnd(status) -> Void\r\n * - status (Number): deflate status. 0 (Z_OK) on success,\r\n *   other if not.\r\n *\r\n * Called once after you tell deflate that the input stream is\r\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\r\n * or if an error happened. By default - join collected chunks,\r\n * free memory and fill `results` / `err` properties.\r\n **/\r\nDeflate.prototype.onEnd = function (status) {\r\n  // On success - join\r\n  if (status === Z_OK) {\r\n    if (this.options.to === 'string') {\r\n      this.result = this.chunks.join('');\r\n    } else {\r\n      this.result = utils.flattenChunks(this.chunks);\r\n    }\r\n  }\r\n  this.chunks = [];\r\n  this.err = status;\r\n  this.msg = this.strm.msg;\r\n};\r\n\r\n\r\n/**\r\n * deflate(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * Compress `data` with deflate algorithm and `options`.\r\n *\r\n * Supported options are:\r\n *\r\n * - level\r\n * - windowBits\r\n * - memLevel\r\n * - strategy\r\n * - dictionary\r\n *\r\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\r\n * for more information on these.\r\n *\r\n * Sugar (options):\r\n *\r\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\r\n *   negative windowBits implicitly.\r\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\r\n *    (each char code [0..255])\r\n *\r\n * ##### Example:\r\n *\r\n * ```javascript\r\n * var pako = require('pako')\r\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\r\n *\r\n * console.log(pako.deflate(data));\r\n * ```\r\n **/\r\nfunction deflate(input, options) {\r\n  var deflator = new Deflate(options);\r\n\r\n  deflator.push(input, true);\r\n\r\n  // That will never happens, if you don't cheat with options :)\r\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\r\n\r\n  return deflator.result;\r\n}\r\n\r\n\r\n/**\r\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but creates raw data, without wrapper\r\n * (header and adler32 crc).\r\n **/\r\nfunction deflateRaw(input, options) {\r\n  options = options || {};\r\n  options.raw = true;\r\n  return deflate(input, options);\r\n}\r\n\r\n\r\n/**\r\n * gzip(data[, options]) -> Uint8Array|Array|String\r\n * - data (Uint8Array|Array|String): input data to compress.\r\n * - options (Object): zlib deflate options.\r\n *\r\n * The same as [[deflate]], but create gzip wrapper instead of\r\n * deflate one.\r\n **/\r\nfunction gzip(input, options) {\r\n  options = options || {};\r\n  options.gzip = true;\r\n  return deflate(input, options);\r\n}\r\n\r\n\r\nexports.Deflate = Deflate;\r\nexports.deflate = deflate;\r\nexports.deflateRaw = deflateRaw;\r\nexports.gzip = gzip;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}