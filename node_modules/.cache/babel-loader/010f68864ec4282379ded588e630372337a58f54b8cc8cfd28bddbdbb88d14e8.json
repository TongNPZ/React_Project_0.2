{"ast":null,"code":"/*\r\n * Copyright 1996-2003 Glyph & Cog, LLC\r\n *\r\n * The flate stream implementation contained in this file is a JavaScript port\r\n * of XPDF's implementation, made available under the Apache 2.0 open source\r\n * license.\r\n */\nimport { __extends } from \"tslib\";\n/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The FlateStream class contained in this file is a TypeScript port of the\r\n * JavaScript FlateStream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\n/* tslint:disable  no-conditional-assignment */\nimport DecodeStream from \"./DecodeStream\";\n// prettier-ignore\nvar codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// prettier-ignore\nvar lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);\n// prettier-ignore\nvar distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);\n// prettier-ignore\nvar fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];\n// prettier-ignore\nvar fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];\nvar FlateStream = /** @class */function (_super) {\n  __extends(FlateStream, _super);\n  function FlateStream(stream, maybeLength) {\n    var _this = _super.call(this, maybeLength) || this;\n    _this.stream = stream;\n    var cmf = stream.getByte();\n    var flg = stream.getByte();\n    if (cmf === -1 || flg === -1) {\n      throw new Error(\"Invalid header in flate stream: \" + cmf + \", \" + flg);\n    }\n    if ((cmf & 0x0f) !== 0x08) {\n      throw new Error(\"Unknown compression method in flate stream: \" + cmf + \", \" + flg);\n    }\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new Error(\"Bad FCHECK in flate stream: \" + cmf + \", \" + flg);\n    }\n    if (flg & 0x20) {\n      throw new Error(\"FDICT bit set in flate stream: \" + cmf + \", \" + flg);\n    }\n    _this.codeSize = 0;\n    _this.codeBuf = 0;\n    return _this;\n  }\n  FlateStream.prototype.readBlock = function () {\n    var buffer;\n    var len;\n    var str = this.stream;\n    // read block header\n    var hdr = this.getBits(3);\n    if (hdr & 1) {\n      this.eof = true;\n    }\n    hdr >>= 1;\n    if (hdr === 0) {\n      // uncompressed block\n      var b = void 0;\n      if ((b = str.getByte()) === -1) {\n        throw new Error('Bad block header in flate stream');\n      }\n      var blockLen = b;\n      if ((b = str.getByte()) === -1) {\n        throw new Error('Bad block header in flate stream');\n      }\n      blockLen |= b << 8;\n      if ((b = str.getByte()) === -1) {\n        throw new Error('Bad block header in flate stream');\n      }\n      var check = b;\n      if ((b = str.getByte()) === -1) {\n        throw new Error('Bad block header in flate stream');\n      }\n      check |= b << 8;\n      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n        // Ignoring error for bad \"empty\" block (see issue 1277)\n        throw new Error('Bad uncompressed block length in flate stream');\n      }\n      this.codeBuf = 0;\n      this.codeSize = 0;\n      var bufferLength = this.bufferLength;\n      buffer = this.ensureBuffer(bufferLength + blockLen);\n      var end = bufferLength + blockLen;\n      this.bufferLength = end;\n      if (blockLen === 0) {\n        if (str.peekByte() === -1) {\n          this.eof = true;\n        }\n      } else {\n        for (var n = bufferLength; n < end; ++n) {\n          if ((b = str.getByte()) === -1) {\n            this.eof = true;\n            break;\n          }\n          buffer[n] = b;\n        }\n      }\n      return;\n    }\n    var litCodeTable;\n    var distCodeTable;\n    if (hdr === 1) {\n      // compressed block, fixed codes\n      litCodeTable = fixedLitCodeTab;\n      distCodeTable = fixedDistCodeTab;\n    } else if (hdr === 2) {\n      // compressed block, dynamic codes\n      var numLitCodes = this.getBits(5) + 257;\n      var numDistCodes = this.getBits(5) + 1;\n      var numCodeLenCodes = this.getBits(4) + 4;\n      // build the code lengths code table\n      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n      var i = void 0;\n      for (i = 0; i < numCodeLenCodes; ++i) {\n        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n      }\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n      // build the literal and distance code tables\n      len = 0;\n      i = 0;\n      var codes = numLitCodes + numDistCodes;\n      var codeLengths = new Uint8Array(codes);\n      var bitsLength = void 0;\n      var bitsOffset = void 0;\n      var what = void 0;\n      while (i < codes) {\n        var code = this.getCode(codeLenCodeTab);\n        if (code === 16) {\n          bitsLength = 2;\n          bitsOffset = 3;\n          what = len;\n        } else if (code === 17) {\n          bitsLength = 3;\n          bitsOffset = 3;\n          what = len = 0;\n        } else if (code === 18) {\n          bitsLength = 7;\n          bitsOffset = 11;\n          what = len = 0;\n        } else {\n          codeLengths[i++] = len = code;\n          continue;\n        }\n        var repeatLength = this.getBits(bitsLength) + bitsOffset;\n        while (repeatLength-- > 0) {\n          codeLengths[i++] = what;\n        }\n      }\n      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\n      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\n    } else {\n      throw new Error('Unknown block type in flate stream');\n    }\n    buffer = this.buffer;\n    var limit = buffer ? buffer.length : 0;\n    var pos = this.bufferLength;\n    while (true) {\n      var code1 = this.getCode(litCodeTable);\n      if (code1 < 256) {\n        if (pos + 1 >= limit) {\n          buffer = this.ensureBuffer(pos + 1);\n          limit = buffer.length;\n        }\n        buffer[pos++] = code1;\n        continue;\n      }\n      if (code1 === 256) {\n        this.bufferLength = pos;\n        return;\n      }\n      code1 -= 257;\n      code1 = lengthDecode[code1];\n      var code2 = code1 >> 16;\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n      len = (code1 & 0xffff) + code2;\n      code1 = this.getCode(distCodeTable);\n      code1 = distDecode[code1];\n      code2 = code1 >> 16;\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n      var dist = (code1 & 0xffff) + code2;\n      if (pos + len >= limit) {\n        buffer = this.ensureBuffer(pos + len);\n        limit = buffer.length;\n      }\n      for (var k = 0; k < len; ++k, ++pos) {\n        buffer[pos] = buffer[pos - dist];\n      }\n    }\n  };\n  FlateStream.prototype.getBits = function (bits) {\n    var str = this.stream;\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n    while (codeSize < bits) {\n      if ((b = str.getByte()) === -1) {\n        throw new Error('Bad encoding in flate stream');\n      }\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n    b = codeBuf & (1 << bits) - 1;\n    this.codeBuf = codeBuf >> bits;\n    this.codeSize = codeSize -= bits;\n    return b;\n  };\n  FlateStream.prototype.getCode = function (table) {\n    var str = this.stream;\n    var codes = table[0];\n    var maxLen = table[1];\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n    while (codeSize < maxLen) {\n      if ((b = str.getByte()) === -1) {\n        // premature end of stream. code might however still be valid.\n        // codeSize < codeLen check below guards against incomplete codeVal.\n        break;\n      }\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n    var code = codes[codeBuf & (1 << maxLen) - 1];\n    if (typeof codes === 'number') {\n      console.log('FLATE:', code);\n    }\n    var codeLen = code >> 16;\n    var codeVal = code & 0xffff;\n    if (codeLen < 1 || codeSize < codeLen) {\n      throw new Error('Bad encoding in flate stream');\n    }\n    this.codeBuf = codeBuf >> codeLen;\n    this.codeSize = codeSize - codeLen;\n    return codeVal;\n  };\n  FlateStream.prototype.generateHuffmanTable = function (lengths) {\n    var n = lengths.length;\n    // find max code length\n    var maxLen = 0;\n    var i;\n    for (i = 0; i < n; ++i) {\n      if (lengths[i] > maxLen) {\n        maxLen = lengths[i];\n      }\n    }\n    // build the table\n    var size = 1 << maxLen;\n    var codes = new Int32Array(size);\n    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n      for (var val = 0; val < n; ++val) {\n        if (lengths[val] === len) {\n          // bit-reverse the code\n          var code2 = 0;\n          var t = code;\n          for (i = 0; i < len; ++i) {\n            code2 = code2 << 1 | t & 1;\n            t >>= 1;\n          }\n          // fill the table entries\n          for (i = code2; i < size; i += skip) {\n            codes[i] = len << 16 | val;\n          }\n          ++code;\n        }\n      }\n    }\n    return [codes, maxLen];\n  };\n  return FlateStream;\n}(DecodeStream);\nexport default FlateStream;","map":{"version":3,"names":["DecodeStream","codeLenCodeMap","Int32Array","lengthDecode","distDecode","fixedLitCodeTab","fixedDistCodeTab","FlateStream","_super","__extends","stream","maybeLength","_this","call","cmf","getByte","flg","Error","codeSize","codeBuf","prototype","readBlock","buffer","len","str","hdr","getBits","eof","b","blockLen","check","bufferLength","ensureBuffer","end","peekByte","n","litCodeTable","distCodeTable","numLitCodes","numDistCodes","numCodeLenCodes","codeLenCodeLengths","Uint8Array","length","i","codeLenCodeTab","generateHuffmanTable","codes","codeLengths","bitsLength","bitsOffset","what","code","getCode","repeatLength","subarray","limit","pos","code1","code2","dist","k","bits","table","maxLen","console","log","codeLen","codeVal","lengths","size","skip","val","t"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0 - Copy (2)\\node_modules\\pdf-lib\\src\\core\\streams\\FlateStream.ts"],"sourcesContent":["/*\r\n * Copyright 1996-2003 Glyph & Cog, LLC\r\n *\r\n * The flate stream implementation contained in this file is a JavaScript port\r\n * of XPDF's implementation, made available under the Apache 2.0 open source\r\n * license.\r\n */\r\n\r\n/*\r\n * Copyright 2012 Mozilla Foundation\r\n *\r\n * The FlateStream class contained in this file is a TypeScript port of the\r\n * JavaScript FlateStream class in Mozilla's pdf.js project, made available\r\n * under the Apache 2.0 open source license.\r\n */\r\n\r\n/* tslint:disable  no-conditional-assignment */\r\nimport DecodeStream from 'src/core/streams/DecodeStream';\r\nimport { StreamType } from 'src/core/streams/Stream';\r\n\r\n// prettier-ignore\r\nconst codeLenCodeMap = new Int32Array([\r\n  16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15\r\n]);\r\n\r\n// prettier-ignore\r\nconst lengthDecode = new Int32Array([\r\n  0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,\r\n  0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,\r\n  0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,\r\n  0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102\r\n]);\r\n\r\n// prettier-ignore\r\nconst distDecode = new Int32Array([\r\n  0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,\r\n  0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,\r\n  0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,\r\n  0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001\r\n]);\r\n\r\n// prettier-ignore\r\nconst fixedLitCodeTab = [new Int32Array([\r\n  0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,\r\n  0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,\r\n  0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,\r\n  0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,\r\n  0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,\r\n  0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,\r\n  0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,\r\n  0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,\r\n  0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,\r\n  0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,\r\n  0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,\r\n  0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,\r\n  0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,\r\n  0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,\r\n  0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,\r\n  0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,\r\n  0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,\r\n  0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,\r\n  0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,\r\n  0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,\r\n  0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,\r\n  0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,\r\n  0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,\r\n  0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,\r\n  0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,\r\n  0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,\r\n  0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,\r\n  0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,\r\n  0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,\r\n  0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,\r\n  0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,\r\n  0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,\r\n  0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,\r\n  0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,\r\n  0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,\r\n  0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,\r\n  0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,\r\n  0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,\r\n  0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,\r\n  0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,\r\n  0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,\r\n  0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,\r\n  0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,\r\n  0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,\r\n  0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,\r\n  0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,\r\n  0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,\r\n  0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,\r\n  0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,\r\n  0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,\r\n  0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,\r\n  0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,\r\n  0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,\r\n  0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,\r\n  0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,\r\n  0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,\r\n  0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,\r\n  0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,\r\n  0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,\r\n  0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,\r\n  0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,\r\n  0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,\r\n  0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,\r\n  0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff\r\n]), 9] as [Int32Array, number];\r\n\r\n// prettier-ignore\r\nconst fixedDistCodeTab = [new Int32Array([\r\n  0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,\r\n  0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,\r\n  0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,\r\n  0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000\r\n]), 5] as [Int32Array, number];\r\n\r\nclass FlateStream extends DecodeStream {\r\n  private stream: StreamType;\r\n  private codeSize: number;\r\n  private codeBuf: number;\r\n\r\n  constructor(stream: StreamType, maybeLength?: number) {\r\n    super(maybeLength);\r\n\r\n    this.stream = stream;\r\n\r\n    const cmf = stream.getByte();\r\n    const flg = stream.getByte();\r\n    if (cmf === -1 || flg === -1) {\r\n      throw new Error(`Invalid header in flate stream: ${cmf}, ${flg}`);\r\n    }\r\n    if ((cmf & 0x0f) !== 0x08) {\r\n      throw new Error(\r\n        `Unknown compression method in flate stream: ${cmf}, ${flg}`,\r\n      );\r\n    }\r\n    if (((cmf << 8) + flg) % 31 !== 0) {\r\n      throw new Error(`Bad FCHECK in flate stream: ${cmf}, ${flg}`);\r\n    }\r\n    if (flg & 0x20) {\r\n      throw new Error(`FDICT bit set in flate stream: ${cmf}, ${flg}`);\r\n    }\r\n\r\n    this.codeSize = 0;\r\n    this.codeBuf = 0;\r\n  }\r\n\r\n  protected readBlock() {\r\n    let buffer;\r\n    let len;\r\n    const str = this.stream;\r\n    // read block header\r\n    let hdr = this.getBits(3);\r\n    if (hdr & 1) {\r\n      this.eof = true;\r\n    }\r\n    hdr >>= 1;\r\n\r\n    if (hdr === 0) {\r\n      // uncompressed block\r\n      let b;\r\n\r\n      if ((b = str.getByte()) === -1) {\r\n        throw new Error('Bad block header in flate stream');\r\n      }\r\n      let blockLen = b;\r\n      if ((b = str.getByte()) === -1) {\r\n        throw new Error('Bad block header in flate stream');\r\n      }\r\n      blockLen |= b << 8;\r\n      if ((b = str.getByte()) === -1) {\r\n        throw new Error('Bad block header in flate stream');\r\n      }\r\n      let check = b;\r\n      if ((b = str.getByte()) === -1) {\r\n        throw new Error('Bad block header in flate stream');\r\n      }\r\n      check |= b << 8;\r\n      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\r\n        // Ignoring error for bad \"empty\" block (see issue 1277)\r\n        throw new Error('Bad uncompressed block length in flate stream');\r\n      }\r\n\r\n      this.codeBuf = 0;\r\n      this.codeSize = 0;\r\n\r\n      const bufferLength = this.bufferLength;\r\n      buffer = this.ensureBuffer(bufferLength + blockLen);\r\n      const end = bufferLength + blockLen;\r\n      this.bufferLength = end;\r\n      if (blockLen === 0) {\r\n        if (str.peekByte() === -1) {\r\n          this.eof = true;\r\n        }\r\n      } else {\r\n        for (let n = bufferLength; n < end; ++n) {\r\n          if ((b = str.getByte()) === -1) {\r\n            this.eof = true;\r\n            break;\r\n          }\r\n          buffer[n] = b;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    let litCodeTable;\r\n    let distCodeTable;\r\n    if (hdr === 1) {\r\n      // compressed block, fixed codes\r\n      litCodeTable = fixedLitCodeTab;\r\n      distCodeTable = fixedDistCodeTab;\r\n    } else if (hdr === 2) {\r\n      // compressed block, dynamic codes\r\n      const numLitCodes = this.getBits(5) + 257;\r\n      const numDistCodes = this.getBits(5) + 1;\r\n      const numCodeLenCodes = this.getBits(4) + 4;\r\n\r\n      // build the code lengths code table\r\n      const codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\r\n\r\n      let i;\r\n      for (i = 0; i < numCodeLenCodes; ++i) {\r\n        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\r\n      }\r\n      const codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\r\n\r\n      // build the literal and distance code tables\r\n      len = 0;\r\n      i = 0;\r\n      const codes = numLitCodes + numDistCodes;\r\n      const codeLengths = new Uint8Array(codes);\r\n      let bitsLength;\r\n      let bitsOffset;\r\n      let what;\r\n      while (i < codes) {\r\n        const code = this.getCode(codeLenCodeTab);\r\n        if (code === 16) {\r\n          bitsLength = 2;\r\n          bitsOffset = 3;\r\n          what = len;\r\n        } else if (code === 17) {\r\n          bitsLength = 3;\r\n          bitsOffset = 3;\r\n          what = len = 0;\r\n        } else if (code === 18) {\r\n          bitsLength = 7;\r\n          bitsOffset = 11;\r\n          what = len = 0;\r\n        } else {\r\n          codeLengths[i++] = len = code;\r\n          continue;\r\n        }\r\n\r\n        let repeatLength = this.getBits(bitsLength) + bitsOffset;\r\n        while (repeatLength-- > 0) {\r\n          codeLengths[i++] = what;\r\n        }\r\n      }\r\n\r\n      litCodeTable = this.generateHuffmanTable(\r\n        codeLengths.subarray(0, numLitCodes),\r\n      );\r\n      distCodeTable = this.generateHuffmanTable(\r\n        codeLengths.subarray(numLitCodes, codes),\r\n      );\r\n    } else {\r\n      throw new Error('Unknown block type in flate stream');\r\n    }\r\n\r\n    buffer = this.buffer;\r\n    let limit = buffer ? buffer.length : 0;\r\n    let pos = this.bufferLength;\r\n    while (true) {\r\n      let code1 = this.getCode(litCodeTable);\r\n      if (code1 < 256) {\r\n        if (pos + 1 >= limit) {\r\n          buffer = this.ensureBuffer(pos + 1);\r\n          limit = buffer.length;\r\n        }\r\n        buffer[pos++] = code1;\r\n        continue;\r\n      }\r\n      if (code1 === 256) {\r\n        this.bufferLength = pos;\r\n        return;\r\n      }\r\n      code1 -= 257;\r\n      code1 = lengthDecode[code1];\r\n      let code2 = code1 >> 16;\r\n      if (code2 > 0) {\r\n        code2 = this.getBits(code2);\r\n      }\r\n      len = (code1 & 0xffff) + code2;\r\n      code1 = this.getCode(distCodeTable);\r\n      code1 = distDecode[code1];\r\n      code2 = code1 >> 16;\r\n      if (code2 > 0) {\r\n        code2 = this.getBits(code2);\r\n      }\r\n      const dist = (code1 & 0xffff) + code2;\r\n      if (pos + len >= limit) {\r\n        buffer = this.ensureBuffer(pos + len);\r\n        limit = buffer.length;\r\n      }\r\n      for (let k = 0; k < len; ++k, ++pos) {\r\n        buffer[pos] = buffer[pos - dist];\r\n      }\r\n    }\r\n  }\r\n\r\n  private getBits(bits: number) {\r\n    const str = this.stream;\r\n    let codeSize = this.codeSize;\r\n    let codeBuf = this.codeBuf;\r\n\r\n    let b;\r\n    while (codeSize < bits) {\r\n      if ((b = str.getByte()) === -1) {\r\n        throw new Error('Bad encoding in flate stream');\r\n      }\r\n      codeBuf |= b << codeSize;\r\n      codeSize += 8;\r\n    }\r\n    b = codeBuf & ((1 << bits) - 1);\r\n    this.codeBuf = codeBuf >> bits;\r\n    this.codeSize = codeSize -= bits;\r\n\r\n    return b;\r\n  }\r\n\r\n  private getCode(table: [Int32Array, number]) {\r\n    const str = this.stream;\r\n    const codes = table[0];\r\n    const maxLen = table[1];\r\n    let codeSize = this.codeSize;\r\n    let codeBuf = this.codeBuf;\r\n\r\n    let b;\r\n    while (codeSize < maxLen) {\r\n      if ((b = str.getByte()) === -1) {\r\n        // premature end of stream. code might however still be valid.\r\n        // codeSize < codeLen check below guards against incomplete codeVal.\r\n        break;\r\n      }\r\n      codeBuf |= b << codeSize;\r\n      codeSize += 8;\r\n    }\r\n    const code = codes[codeBuf & ((1 << maxLen) - 1)];\r\n    if (typeof codes === 'number') {\r\n      console.log('FLATE:', code);\r\n    }\r\n    const codeLen = code >> 16;\r\n    const codeVal = code & 0xffff;\r\n    if (codeLen < 1 || codeSize < codeLen) {\r\n      throw new Error('Bad encoding in flate stream');\r\n    }\r\n    this.codeBuf = codeBuf >> codeLen;\r\n    this.codeSize = codeSize - codeLen;\r\n    return codeVal;\r\n  }\r\n\r\n  private generateHuffmanTable(lengths: Uint8Array): [Int32Array, number] {\r\n    const n = lengths.length;\r\n\r\n    // find max code length\r\n    let maxLen = 0;\r\n    let i;\r\n    for (i = 0; i < n; ++i) {\r\n      if (lengths[i] > maxLen) {\r\n        maxLen = lengths[i];\r\n      }\r\n    }\r\n\r\n    // build the table\r\n    const size = 1 << maxLen;\r\n    const codes = new Int32Array(size);\r\n    for (\r\n      let len = 1, code = 0, skip = 2;\r\n      len <= maxLen;\r\n      ++len, code <<= 1, skip <<= 1\r\n    ) {\r\n      for (let val = 0; val < n; ++val) {\r\n        if (lengths[val] === len) {\r\n          // bit-reverse the code\r\n          let code2 = 0;\r\n          let t = code;\r\n          for (i = 0; i < len; ++i) {\r\n            code2 = (code2 << 1) | (t & 1);\r\n            t >>= 1;\r\n          }\r\n\r\n          // fill the table entries\r\n          for (i = code2; i < size; i += skip) {\r\n            codes[i] = (len << 16) | val;\r\n          }\r\n          ++code;\r\n        }\r\n      }\r\n    }\r\n\r\n    return [codes, maxLen];\r\n  }\r\n}\r\n\r\nexport default FlateStream;\r\n"],"mappings":"AAAA;;;;;;;;AAQA;;;;;;;AAQA;AACA,OAAOA,YAAY;AAGnB;AACA,IAAMC,cAAc,GAAG,IAAIC,UAAU,CAAC,CACpC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CACjE,CAAC;AAEF;AACA,IAAMC,YAAY,GAAG,IAAID,UAAU,CAAC,CAClC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAC9D,CAAC;AAEF;AACA,IAAME,UAAU,GAAG,IAAIF,UAAU,CAAC,CAChC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CACrD,CAAC;AAEF;AACA,IAAMG,eAAe,GAAG,CAAC,IAAIH,UAAU,CAAC,CACtC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EACtE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO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"},"metadata":{},"sourceType":"module","externalDependencies":[]}