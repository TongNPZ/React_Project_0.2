{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport PDFDocument from \"./PDFDocument\";\nimport { JpegEmbedder, PDFRef, PngEmbedder } from \"../core\";\nimport { assertIs } from \"../utils\";\n/**\r\n * Represents an image that has been embedded in a [[PDFDocument]].\r\n */\nvar PDFImage = /** @class */function () {\n  function PDFImage(ref, doc, embedder) {\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n    assertIs(embedder, 'embedder', [[JpegEmbedder, 'JpegEmbedder'], [PngEmbedder, 'PngEmbedder']]);\n    this.ref = ref;\n    this.doc = doc;\n    this.width = embedder.width;\n    this.height = embedder.height;\n    this.embedder = embedder;\n  }\n  /**\r\n   * Compute the width and height of this image after being scaled by the\r\n   * given `factor`. For example:\r\n   * ```js\r\n   * image.width  // => 500\r\n   * image.height // => 250\r\n   *\r\n   * const scaled = image.scale(0.5)\r\n   * scaled.width  // => 250\r\n   * scaled.height // => 125\r\n   * ```\r\n   * This operation is often useful before drawing an image with\r\n   * [[PDFPage.drawImage]] to compute the `width` and `height` options.\r\n   * @param factor The factor by which this image should be scaled.\r\n   * @returns The width and height of the image after being scaled.\r\n   */\n  PDFImage.prototype.scale = function (factor) {\n    assertIs(factor, 'factor', ['number']);\n    return {\n      width: this.width * factor,\n      height: this.height * factor\n    };\n  };\n  /**\r\n   * Get the width and height of this image after scaling it as large as\r\n   * possible while maintaining its aspect ratio and not exceeding the\r\n   * specified `width` and `height`. For example:\r\n   * ```\r\n   * image.width  // => 500\r\n   * image.height // => 250\r\n   *\r\n   * const scaled = image.scaleToFit(750, 1000)\r\n   * scaled.width  // => 750\r\n   * scaled.height // => 375\r\n   * ```\r\n   * The `width` and `height` parameters can also be thought of as the width\r\n   * and height of a box that the scaled image must fit within.\r\n   * @param width The bounding box's width.\r\n   * @param height The bounding box's height.\r\n   * @returns The width and height of the image after being scaled.\r\n   */\n  PDFImage.prototype.scaleToFit = function (width, height) {\n    assertIs(width, 'width', ['number']);\n    assertIs(height, 'height', ['number']);\n    var imgWidthScale = width / this.width;\n    var imgHeightScale = height / this.height;\n    var scale = Math.min(imgWidthScale, imgHeightScale);\n    return this.scale(scale);\n  };\n  /**\r\n   * Get the width and height of this image. For example:\r\n   * ```js\r\n   * const { width, height } = image.size()\r\n   * ```\r\n   * @returns The width and height of the image.\r\n   */\n  PDFImage.prototype.size = function () {\n    return this.scale(1);\n  };\n  /**\r\n   * > **NOTE:** You probably don't need to call this method directly. The\r\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\r\n   * > automatically ensure all images get embedded.\r\n   *\r\n   * Embed this image in its document.\r\n   *\r\n   * @returns Resolves when the embedding is complete.\r\n   */\n  PDFImage.prototype.embed = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, doc, ref;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.embedder) return [2 /*return*/];\n            // The image should only be embedded once. If there's a pending embed\n            // operation then wait on it. Otherwise we need to start the embed.\n            if (!this.embedTask) {\n              _a = this, doc = _a.doc, ref = _a.ref;\n              this.embedTask = this.embedder.embedIntoContext(doc.context, ref);\n            }\n            return [4 /*yield*/, this.embedTask];\n          case 1:\n            _b.sent();\n            // We clear `this.embedder` so that the indirectly referenced image data\n            // can be garbage collected, thus avoiding a memory leak.\n            // See https://github.com/Hopding/pdf-lib/pull/1032/files.\n            this.embedder = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\r\n   * > methods, which will create instances of [[PDFImage]] for you.\r\n   *\r\n   * Create an instance of [[PDFImage]] from an existing ref and embedder\r\n   *\r\n   * @param ref The unique reference for this image.\r\n   * @param doc The document to which the image will belong.\r\n   * @param embedder The embedder that will be used to embed the image.\r\n   */\n  PDFImage.of = function (ref, doc, embedder) {\n    return new PDFImage(ref, doc, embedder);\n  };\n  return PDFImage;\n}();\nexport default PDFImage;","map":{"version":3,"names":["PDFDocument","JpegEmbedder","PDFRef","PngEmbedder","assertIs","PDFImage","ref","doc","embedder","width","height","prototype","scale","factor","scaleToFit","imgWidthScale","imgHeightScale","Math","min","size","embed","embedTask","_a","embedIntoContext","context","_b","sent","undefined","of"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\api\\PDFImage.ts"],"sourcesContent":["import Embeddable from 'src/api/Embeddable';\r\nimport PDFDocument from 'src/api/PDFDocument';\r\nimport { JpegEmbedder, PDFRef, PngEmbedder } from 'src/core';\r\nimport { assertIs } from 'src/utils';\r\n\r\nexport type ImageEmbedder = JpegEmbedder | PngEmbedder;\r\n\r\n/**\r\n * Represents an image that has been embedded in a [[PDFDocument]].\r\n */\r\nexport default class PDFImage implements Embeddable {\r\n  /**\r\n   * > **NOTE:** You probably don't want to call this method directly. Instead,\r\n   * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\r\n   * > methods, which will create instances of [[PDFImage]] for you.\r\n   *\r\n   * Create an instance of [[PDFImage]] from an existing ref and embedder\r\n   *\r\n   * @param ref The unique reference for this image.\r\n   * @param doc The document to which the image will belong.\r\n   * @param embedder The embedder that will be used to embed the image.\r\n   */\r\n  static of = (ref: PDFRef, doc: PDFDocument, embedder: ImageEmbedder) =>\r\n    new PDFImage(ref, doc, embedder);\r\n\r\n  /** The unique reference assigned to this image within the document. */\r\n  readonly ref: PDFRef;\r\n\r\n  /** The document to which this image belongs. */\r\n  readonly doc: PDFDocument;\r\n\r\n  /** The width of this image in pixels. */\r\n  readonly width: number;\r\n\r\n  /** The height of this image in pixels. */\r\n  readonly height: number;\r\n\r\n  private embedder: ImageEmbedder | undefined;\r\n  private embedTask: Promise<PDFRef> | undefined;\r\n\r\n  private constructor(ref: PDFRef, doc: PDFDocument, embedder: ImageEmbedder) {\r\n    assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\r\n    assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\r\n    assertIs(embedder, 'embedder', [\r\n      [JpegEmbedder, 'JpegEmbedder'],\r\n      [PngEmbedder, 'PngEmbedder'],\r\n    ]);\r\n\r\n    this.ref = ref;\r\n    this.doc = doc;\r\n    this.width = embedder.width;\r\n    this.height = embedder.height;\r\n\r\n    this.embedder = embedder;\r\n  }\r\n\r\n  /**\r\n   * Compute the width and height of this image after being scaled by the\r\n   * given `factor`. For example:\r\n   * ```js\r\n   * image.width  // => 500\r\n   * image.height // => 250\r\n   *\r\n   * const scaled = image.scale(0.5)\r\n   * scaled.width  // => 250\r\n   * scaled.height // => 125\r\n   * ```\r\n   * This operation is often useful before drawing an image with\r\n   * [[PDFPage.drawImage]] to compute the `width` and `height` options.\r\n   * @param factor The factor by which this image should be scaled.\r\n   * @returns The width and height of the image after being scaled.\r\n   */\r\n  scale(factor: number) {\r\n    assertIs(factor, 'factor', ['number']);\r\n    return { width: this.width * factor, height: this.height * factor };\r\n  }\r\n\r\n  /**\r\n   * Get the width and height of this image after scaling it as large as\r\n   * possible while maintaining its aspect ratio and not exceeding the\r\n   * specified `width` and `height`. For example:\r\n   * ```\r\n   * image.width  // => 500\r\n   * image.height // => 250\r\n   *\r\n   * const scaled = image.scaleToFit(750, 1000)\r\n   * scaled.width  // => 750\r\n   * scaled.height // => 375\r\n   * ```\r\n   * The `width` and `height` parameters can also be thought of as the width\r\n   * and height of a box that the scaled image must fit within.\r\n   * @param width The bounding box's width.\r\n   * @param height The bounding box's height.\r\n   * @returns The width and height of the image after being scaled.\r\n   */\r\n  scaleToFit(width: number, height: number) {\r\n    assertIs(width, 'width', ['number']);\r\n    assertIs(height, 'height', ['number']);\r\n\r\n    const imgWidthScale = width / this.width;\r\n    const imgHeightScale = height / this.height;\r\n    const scale = Math.min(imgWidthScale, imgHeightScale);\r\n\r\n    return this.scale(scale);\r\n  }\r\n\r\n  /**\r\n   * Get the width and height of this image. For example:\r\n   * ```js\r\n   * const { width, height } = image.size()\r\n   * ```\r\n   * @returns The width and height of the image.\r\n   */\r\n  size() {\r\n    return this.scale(1);\r\n  }\r\n\r\n  /**\r\n   * > **NOTE:** You probably don't need to call this method directly. The\r\n   * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\r\n   * > automatically ensure all images get embedded.\r\n   *\r\n   * Embed this image in its document.\r\n   *\r\n   * @returns Resolves when the embedding is complete.\r\n   */\r\n  async embed(): Promise<void> {\r\n    if (!this.embedder) return;\r\n\r\n    // The image should only be embedded once. If there's a pending embed\r\n    // operation then wait on it. Otherwise we need to start the embed.\r\n    if (!this.embedTask) {\r\n      const { doc, ref } = this;\r\n      this.embedTask = this.embedder.embedIntoContext(doc.context, ref);\r\n    }\r\n    await this.embedTask;\r\n\r\n    // We clear `this.embedder` so that the indirectly referenced image data\r\n    // can be garbage collected, thus avoiding a memory leak.\r\n    // See https://github.com/Hopding/pdf-lib/pull/1032/files.\r\n    this.embedder = undefined;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}