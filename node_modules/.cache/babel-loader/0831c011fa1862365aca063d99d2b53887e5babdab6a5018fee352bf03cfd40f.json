{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { drawCheckBox, rotateInPlace, drawRadioButton, drawButton, drawTextField, drawOptionList } from \"../operations\";\nimport { rgb, componentsToColor, setFillingColor, grayscale, cmyk } from \"../colors\";\nimport { reduceRotation, adjustDimsForRotation } from \"../rotations\";\nimport { layoutMultilineText, layoutCombedText, layoutSinglelineText } from \"../text/layout\";\nimport { TextAlignment } from \"../text/alignment\";\nimport { setFontAndSize } from \"../operators\";\nimport { findLastMatch } from \"../../utils\";\n/********************* Appearance Provider Functions **************************/\nexport var normalizeAppearance = function (appearance) {\n  if ('normal' in appearance) return appearance;\n  return {\n    normal: appearance\n  };\n};\n// Examples:\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\nvar tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\nvar getDefaultFontSize = function (field) {\n  var _a, _b;\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = (_b = findLastMatch(da, tfRegex).match) !== null && _b !== void 0 ? _b : [];\n  var defaultFontSize = Number(daMatch[2]);\n  return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n};\n// Examples:\n//   `0.3 g` -> ['0.3', 'g']\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\nvar colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\nvar getDefaultColor = function (field) {\n  var _a;\n  var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n  var daMatch = findLastMatch(da, colorRegex).match;\n  var _b = daMatch !== null && daMatch !== void 0 ? daMatch : [],\n    c1 = _b[1],\n    c2 = _b[2],\n    c3 = _b[3],\n    c4 = _b[4],\n    colorSpace = _b[5];\n  if (colorSpace === 'g' && c1) {\n    return grayscale(Number(c1));\n  }\n  if (colorSpace === 'rg' && c1 && c2 && c3) {\n    return rgb(Number(c1), Number(c2), Number(c3));\n  }\n  if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n    return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n  }\n  return undefined;\n};\nvar updateDefaultAppearance = function (field, color, font, fontSize) {\n  var _a;\n  if (fontSize === void 0) {\n    fontSize = 0;\n  }\n  var da = [setFillingColor(color).toString(), setFontAndSize((_a = font === null || font === void 0 ? void 0 : font.name) !== null && _a !== void 0 ? _a : 'dummy__noop', fontSize).toString()].join('\\n');\n  field.setDefaultAppearance(da);\n};\nexport var defaultCheckBoxAppearanceProvider = function (checkBox, widget) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(checkBox.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  // Update color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(checkBox.acroField, textColor);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    thickness: 1.5,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    markColor: textColor\n  };\n  return {\n    normal: {\n      on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawCheckBox(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexport var defaultRadioGroupAppearanceProvider = function (radioGroup, widget) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(radioGroup.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  // Update color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor) {\n    updateDefaultAppearance(widget, textColor);\n  } else {\n    updateDefaultAppearance(radioGroup.acroField, textColor);\n  }\n  var options = {\n    x: width / 2,\n    y: height / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    dotColor: textColor\n  };\n  return {\n    normal: {\n      on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: normalBackgroundColor,\n        filled: false\n      })))\n    },\n    down: {\n      on: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: true\n      }))),\n      off: __spreadArrays(rotate, drawRadioButton(__assign(__assign({}, options), {\n        color: downBackgroundColor,\n        filled: false\n      })))\n    }\n  };\n};\nexport var defaultButtonAppearanceProvider = function (button, widget, font) {\n  var _a, _b, _c, _d, _e;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(button.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(button.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var captions = ap === null || ap === void 0 ? void 0 : ap.getCaptions();\n  var normalText = (_a = captions === null || captions === void 0 ? void 0 : captions.normal) !== null && _a !== void 0 ? _a : '';\n  var downText = (_c = (_b = captions === null || captions === void 0 ? void 0 : captions.down) !== null && _b !== void 0 ? _b : normalText) !== null && _c !== void 0 ? _c : '';\n  var borderWidth = (_d = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _d !== void 0 ? _d : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _f = adjustDimsForRotation(rectangle, rotation),\n    width = _f.width,\n    height = _f.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n  var bounds = {\n    x: borderWidth,\n    y: borderWidth,\n    width: width - borderWidth * 2,\n    height: height - borderWidth * 2\n  };\n  var normalLayout = layoutSinglelineText(normalText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  });\n  var downLayout = layoutSinglelineText(downText, {\n    alignment: TextAlignment.Center,\n    fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n    font: font,\n    bounds: bounds\n  });\n  // Update font size and color\n  var fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n  var textColor = (_e = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _e !== void 0 ? _e : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize\n  };\n  return {\n    normal: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), {\n      color: normalBackgroundColor,\n      textLines: [normalLayout.line]\n    }))),\n    down: __spreadArrays(rotate, drawButton(__assign(__assign({}, options), {\n      color: downBackgroundColor,\n      textLines: [downLayout.line]\n    })))\n  };\n};\nexport var defaultTextFieldAppearanceProvider = function (textField, widget, font) {\n  var _a, _b, _c, _d;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(textField.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(textField.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = textField.getText()) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _e = adjustDimsForRotation(rectangle, rotation),\n    width = _e.width,\n    height = _e.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var textLines;\n  var fontSize;\n  var padding = textField.isCombed() ? 0 : 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  if (textField.isMultiline()) {\n    var layout = layoutMultilineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = layout.lines;\n    fontSize = layout.fontSize;\n  } else if (textField.isCombed()) {\n    var layout = layoutCombedText(text, {\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds,\n      cellCount: (_c = textField.getMaxLength()) !== null && _c !== void 0 ? _c : 0\n    });\n    textLines = layout.cells;\n    fontSize = layout.fontSize;\n  } else {\n    var layout = layoutSinglelineText(text, {\n      alignment: textField.getAlignment(),\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    });\n    textLines = [layout.line];\n    fontSize = layout.fontSize;\n  }\n  // Update font size and color\n  var textColor = (_d = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _d !== void 0 ? _d : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: textLines,\n    padding: padding\n  };\n  return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultDropdownAppearanceProvider = function (dropdown, widget, font) {\n  var _a, _b, _c;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(dropdown.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(dropdown.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var text = (_a = dropdown.getSelected()[0]) !== null && _a !== void 0 ? _a : '';\n  var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _d = adjustDimsForRotation(rectangle, rotation),\n    width = _d.width,\n    height = _d.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  var _e = layoutSinglelineText(text, {\n      alignment: TextAlignment.Left,\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    }),\n    line = _e.line,\n    fontSize = _e.fontSize;\n  // Update font size and color\n  var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n  }\n  var options = {\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: [line],\n    padding: padding\n  };\n  return __spreadArrays(rotate, drawTextField(options));\n};\nexport var defaultOptionListAppearanceProvider = function (optionList, widget, font) {\n  var _a, _b;\n  // The `/DA` entry can be at the widget or field level - so we handle both\n  var widgetColor = getDefaultColor(widget);\n  var fieldColor = getDefaultColor(optionList.acroField);\n  var widgetFontSize = getDefaultFontSize(widget);\n  var fieldFontSize = getDefaultFontSize(optionList.acroField);\n  var rectangle = widget.getRectangle();\n  var ap = widget.getAppearanceCharacteristics();\n  var bs = widget.getBorderStyle();\n  var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n  var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n  var _c = adjustDimsForRotation(rectangle, rotation),\n    width = _c.width,\n    height = _c.height;\n  var rotate = rotateInPlace(__assign(__assign({}, rectangle), {\n    rotation: rotation\n  }));\n  var black = rgb(0, 0, 0);\n  var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n  var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n  var options = optionList.getOptions();\n  var selected = optionList.getSelected();\n  if (optionList.isSorted()) options.sort();\n  var text = '';\n  for (var idx = 0, len = options.length; idx < len; idx++) {\n    text += options[idx];\n    if (idx < len - 1) text += '\\n';\n  }\n  var padding = 1;\n  var bounds = {\n    x: borderWidth + padding,\n    y: borderWidth + padding,\n    width: width - (borderWidth + padding) * 2,\n    height: height - (borderWidth + padding) * 2\n  };\n  var _d = layoutMultilineText(text, {\n      alignment: TextAlignment.Left,\n      fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n      font: font,\n      bounds: bounds\n    }),\n    lines = _d.lines,\n    fontSize = _d.fontSize,\n    lineHeight = _d.lineHeight;\n  var selectedLines = [];\n  for (var idx = 0, len = lines.length; idx < len; idx++) {\n    var line = lines[idx];\n    if (selected.includes(line.text)) selectedLines.push(idx);\n  }\n  var blue = rgb(153 / 255, 193 / 255, 218 / 255);\n  // Update font size and color\n  var textColor = (_b = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _b !== void 0 ? _b : black;\n  if (widgetColor || widgetFontSize !== undefined) {\n    updateDefaultAppearance(widget, textColor, font, fontSize);\n  } else {\n    updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n  }\n  return __spreadArrays(rotate, drawOptionList({\n    x: 0 + borderWidth / 2,\n    y: 0 + borderWidth / 2,\n    width: width - borderWidth,\n    height: height - borderWidth,\n    borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n    borderColor: borderColor,\n    textColor: textColor,\n    font: font.name,\n    fontSize: fontSize,\n    color: normalBackgroundColor,\n    textLines: lines,\n    lineHeight: lineHeight,\n    selectedColor: blue,\n    selectedLines: selectedLines,\n    padding: padding\n  }));\n};","map":{"version":3,"names":["drawCheckBox","rotateInPlace","drawRadioButton","drawButton","drawTextField","drawOptionList","rgb","componentsToColor","setFillingColor","grayscale","cmyk","reduceRotation","adjustDimsForRotation","layoutMultilineText","layoutCombedText","layoutSinglelineText","TextAlignment","setFontAndSize","findLastMatch","normalizeAppearance","appearance","normal","tfRegex","getDefaultFontSize","field","da","_a","getDefaultAppearance","daMatch","_b","match","defaultFontSize","Number","isFinite","undefined","colorRegex","getDefaultColor","c1","c2","c3","c4","colorSpace","updateDefaultAppearance","color","font","fontSize","toString","name","join","setDefaultAppearance","defaultCheckBoxAppearanceProvider","checkBox","widget","widgetColor","fieldColor","acroField","rectangle","getRectangle","ap","getAppearanceCharacteristics","bs","getBorderStyle","borderWidth","getWidth","rotation","getRotation","_d","width","height","rotate","__assign","black","borderColor","getBorderColor","normalBackgroundColor","getBackgroundColor","downBackgroundColor","textColor","_c","options","x","y","thickness","markColor","on","__spreadArrays","filled","off","down","defaultRadioGroupAppearanceProvider","radioGroup","dotColor","defaultButtonAppearanceProvider","button","widgetFontSize","fieldFontSize","captions","getCaptions","normalText","downText","_f","bounds","normalLayout","alignment","Center","downLayout","Math","min","_e","textLines","line","defaultTextFieldAppearanceProvider","textField","text","getText","padding","isCombed","isMultiline","layout","getAlignment","lines","cellCount","getMaxLength","cells","defaultDropdownAppearanceProvider","dropdown","getSelected","Left","defaultOptionListAppearanceProvider","optionList","getOptions","selected","isSorted","sort","idx","len","length","lineHeight","selectedLines","includes","push","blue","selectedColor"],"sources":["C:\\Users\\TongNPZ\\Desktop\\my-app-2.0\\node_modules\\pdf-lib\\src\\api\\form\\appearances.ts"],"sourcesContent":["import { PDFOperator, PDFWidgetAnnotation } from 'src/core';\r\nimport PDFFont from 'src/api/PDFFont';\r\nimport PDFButton from 'src/api/form/PDFButton';\r\nimport PDFCheckBox from 'src/api/form/PDFCheckBox';\r\nimport PDFDropdown from 'src/api/form/PDFDropdown';\r\nimport PDFField from 'src/api/form/PDFField';\r\nimport PDFOptionList from 'src/api/form/PDFOptionList';\r\nimport PDFRadioGroup from 'src/api/form/PDFRadioGroup';\r\nimport PDFSignature from 'src/api/form/PDFSignature';\r\nimport PDFTextField from 'src/api/form/PDFTextField';\r\nimport {\r\n  drawCheckBox,\r\n  rotateInPlace,\r\n  drawRadioButton,\r\n  drawButton,\r\n  drawTextField,\r\n  drawOptionList,\r\n} from 'src/api/operations';\r\nimport {\r\n  rgb,\r\n  componentsToColor,\r\n  setFillingColor,\r\n  grayscale,\r\n  cmyk,\r\n  Color,\r\n} from 'src/api/colors';\r\nimport { reduceRotation, adjustDimsForRotation } from 'src/api/rotations';\r\nimport {\r\n  layoutMultilineText,\r\n  layoutCombedText,\r\n  TextPosition,\r\n  layoutSinglelineText,\r\n} from 'src/api/text/layout';\r\nimport { TextAlignment } from 'src/api/text/alignment';\r\nimport { setFontAndSize } from 'src/api/operators';\r\nimport { findLastMatch } from 'src/utils';\r\n\r\n/*********************** Appearance Provider Types ****************************/\r\n\r\ntype CheckBoxAppearanceProvider = (\r\n  checkBox: PDFCheckBox,\r\n  widget: PDFWidgetAnnotation,\r\n) => AppearanceOrMapping<{\r\n  on: PDFOperator[];\r\n  off: PDFOperator[];\r\n}>;\r\n\r\ntype RadioGroupAppearanceProvider = (\r\n  radioGroup: PDFRadioGroup,\r\n  widget: PDFWidgetAnnotation,\r\n) => AppearanceOrMapping<{\r\n  on: PDFOperator[];\r\n  off: PDFOperator[];\r\n}>;\r\n\r\ntype ButtonAppearanceProvider = (\r\n  button: PDFButton,\r\n  widget: PDFWidgetAnnotation,\r\n  font: PDFFont,\r\n) => AppearanceOrMapping<PDFOperator[]>;\r\n\r\ntype DropdownAppearanceProvider = (\r\n  dropdown: PDFDropdown,\r\n  widget: PDFWidgetAnnotation,\r\n  font: PDFFont,\r\n) => AppearanceOrMapping<PDFOperator[]>;\r\n\r\ntype OptionListAppearanceProvider = (\r\n  optionList: PDFOptionList,\r\n  widget: PDFWidgetAnnotation,\r\n  font: PDFFont,\r\n) => AppearanceOrMapping<PDFOperator[]>;\r\n\r\ntype TextFieldAppearanceProvider = (\r\n  textField: PDFTextField,\r\n  widget: PDFWidgetAnnotation,\r\n  font: PDFFont,\r\n) => AppearanceOrMapping<PDFOperator[]>;\r\n\r\ntype SignatureAppearanceProvider = (\r\n  signature: PDFSignature,\r\n  widget: PDFWidgetAnnotation,\r\n  font: PDFFont,\r\n) => AppearanceOrMapping<PDFOperator[]>;\r\n\r\n/******************* Appearance Provider Utility Types ************************/\r\n\r\nexport type AppearanceMapping<T> = { normal: T; rollover?: T; down?: T };\r\n\r\ntype AppearanceOrMapping<T> = T | AppearanceMapping<T>;\r\n\r\n// prettier-ignore\r\nexport type AppearanceProviderFor<T extends PDFField> = \r\n  T extends PDFCheckBox   ? CheckBoxAppearanceProvider\r\n: T extends PDFRadioGroup ? RadioGroupAppearanceProvider\r\n: T extends PDFButton     ? ButtonAppearanceProvider\r\n: T extends PDFDropdown   ? DropdownAppearanceProvider\r\n: T extends PDFOptionList ? OptionListAppearanceProvider\r\n: T extends PDFTextField  ? TextFieldAppearanceProvider\r\n: T extends PDFSignature  ? SignatureAppearanceProvider\r\n: never;\r\n\r\n/********************* Appearance Provider Functions **************************/\r\n\r\nexport const normalizeAppearance = <T>(\r\n  appearance: T | AppearanceMapping<T>,\r\n): AppearanceMapping<T> => {\r\n  if ('normal' in appearance) return appearance;\r\n  return { normal: appearance };\r\n};\r\n\r\n// Examples:\r\n//   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\r\n//   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\r\nconst tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\r\n\r\nconst getDefaultFontSize = (field: {\r\n  getDefaultAppearance(): string | undefined;\r\n}) => {\r\n  const da = field.getDefaultAppearance() ?? '';\r\n  const daMatch = findLastMatch(da, tfRegex).match ?? [];\r\n  const defaultFontSize = Number(daMatch[2]);\r\n  return isFinite(defaultFontSize) ? defaultFontSize : undefined;\r\n};\r\n\r\n// Examples:\r\n//   `0.3 g` -> ['0.3', 'g']\r\n//   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\r\n//   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\r\nconst colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\r\n\r\nconst getDefaultColor = (field: {\r\n  getDefaultAppearance(): string | undefined;\r\n}) => {\r\n  const da = field.getDefaultAppearance() ?? '';\r\n  const daMatch = findLastMatch(da, colorRegex).match;\r\n\r\n  const [, c1, c2, c3, c4, colorSpace] = daMatch ?? [];\r\n\r\n  if (colorSpace === 'g' && c1) {\r\n    return grayscale(Number(c1));\r\n  }\r\n  if (colorSpace === 'rg' && c1 && c2 && c3) {\r\n    return rgb(Number(c1), Number(c2), Number(c3));\r\n  }\r\n  if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\r\n    return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst updateDefaultAppearance = (\r\n  field: { setDefaultAppearance(appearance: string): void },\r\n  color: Color,\r\n  font?: PDFFont,\r\n  fontSize: number = 0,\r\n) => {\r\n  const da = [\r\n    setFillingColor(color).toString(),\r\n    setFontAndSize(font?.name ?? 'dummy__noop', fontSize).toString(),\r\n  ].join('\\n');\r\n  field.setDefaultAppearance(da);\r\n};\r\n\r\nexport const defaultCheckBoxAppearanceProvider: AppearanceProviderFor<PDFCheckBox> = (\r\n  checkBox,\r\n  widget,\r\n) => {\r\n  // The `/DA` entry can be at the widget or field level - so we handle both\r\n  const widgetColor = getDefaultColor(widget);\r\n  const fieldColor = getDefaultColor(checkBox.acroField);\r\n\r\n  const rectangle = widget.getRectangle();\r\n  const ap = widget.getAppearanceCharacteristics();\r\n  const bs = widget.getBorderStyle();\r\n\r\n  const borderWidth = bs?.getWidth() ?? 0;\r\n  const rotation = reduceRotation(ap?.getRotation());\r\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\r\n\r\n  const rotate = rotateInPlace({ ...rectangle, rotation });\r\n\r\n  const black = rgb(0, 0, 0);\r\n  const borderColor = componentsToColor(ap?.getBorderColor()) ?? black;\r\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\r\n  const downBackgroundColor = componentsToColor(ap?.getBackgroundColor(), 0.8);\r\n\r\n  // Update color\r\n  const textColor = widgetColor ?? fieldColor ?? black;\r\n  if (widgetColor) {\r\n    updateDefaultAppearance(widget, textColor);\r\n  } else {\r\n    updateDefaultAppearance(checkBox.acroField, textColor);\r\n  }\r\n\r\n  const options = {\r\n    x: 0 + borderWidth / 2,\r\n    y: 0 + borderWidth / 2,\r\n    width: width - borderWidth,\r\n    height: height - borderWidth,\r\n    thickness: 1.5,\r\n    borderWidth,\r\n    borderColor,\r\n    markColor: textColor,\r\n  };\r\n\r\n  return {\r\n    normal: {\r\n      on: [\r\n        ...rotate,\r\n        ...drawCheckBox({\r\n          ...options,\r\n          color: normalBackgroundColor,\r\n          filled: true,\r\n        }),\r\n      ],\r\n      off: [\r\n        ...rotate,\r\n        ...drawCheckBox({\r\n          ...options,\r\n          color: normalBackgroundColor,\r\n          filled: false,\r\n        }),\r\n      ],\r\n    },\r\n    down: {\r\n      on: [\r\n        ...rotate,\r\n        ...drawCheckBox({\r\n          ...options,\r\n          color: downBackgroundColor,\r\n          filled: true,\r\n        }),\r\n      ],\r\n      off: [\r\n        ...rotate,\r\n        ...drawCheckBox({\r\n          ...options,\r\n          color: downBackgroundColor,\r\n          filled: false,\r\n        }),\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\nexport const defaultRadioGroupAppearanceProvider: AppearanceProviderFor<PDFRadioGroup> = (\r\n  radioGroup,\r\n  widget,\r\n) => {\r\n  // The `/DA` entry can be at the widget or field level - so we handle both\r\n  const widgetColor = getDefaultColor(widget);\r\n  const fieldColor = getDefaultColor(radioGroup.acroField);\r\n\r\n  const rectangle = widget.getRectangle();\r\n  const ap = widget.getAppearanceCharacteristics();\r\n  const bs = widget.getBorderStyle();\r\n\r\n  const borderWidth = bs?.getWidth() ?? 0;\r\n  const rotation = reduceRotation(ap?.getRotation());\r\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\r\n\r\n  const rotate = rotateInPlace({ ...rectangle, rotation });\r\n\r\n  const black = rgb(0, 0, 0);\r\n  const borderColor = componentsToColor(ap?.getBorderColor()) ?? black;\r\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\r\n  const downBackgroundColor = componentsToColor(ap?.getBackgroundColor(), 0.8);\r\n\r\n  // Update color\r\n  const textColor = widgetColor ?? fieldColor ?? black;\r\n  if (widgetColor) {\r\n    updateDefaultAppearance(widget, textColor);\r\n  } else {\r\n    updateDefaultAppearance(radioGroup.acroField, textColor);\r\n  }\r\n\r\n  const options = {\r\n    x: width / 2,\r\n    y: height / 2,\r\n    width: width - borderWidth,\r\n    height: height - borderWidth,\r\n    borderWidth,\r\n    borderColor,\r\n    dotColor: textColor,\r\n  };\r\n\r\n  return {\r\n    normal: {\r\n      on: [\r\n        ...rotate,\r\n        ...drawRadioButton({\r\n          ...options,\r\n          color: normalBackgroundColor,\r\n          filled: true,\r\n        }),\r\n      ],\r\n      off: [\r\n        ...rotate,\r\n        ...drawRadioButton({\r\n          ...options,\r\n          color: normalBackgroundColor,\r\n          filled: false,\r\n        }),\r\n      ],\r\n    },\r\n    down: {\r\n      on: [\r\n        ...rotate,\r\n        ...drawRadioButton({\r\n          ...options,\r\n          color: downBackgroundColor,\r\n          filled: true,\r\n        }),\r\n      ],\r\n      off: [\r\n        ...rotate,\r\n        ...drawRadioButton({\r\n          ...options,\r\n          color: downBackgroundColor,\r\n          filled: false,\r\n        }),\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\nexport const defaultButtonAppearanceProvider: AppearanceProviderFor<PDFButton> = (\r\n  button,\r\n  widget,\r\n  font,\r\n) => {\r\n  // The `/DA` entry can be at the widget or field level - so we handle both\r\n  const widgetColor = getDefaultColor(widget);\r\n  const fieldColor = getDefaultColor(button.acroField);\r\n  const widgetFontSize = getDefaultFontSize(widget);\r\n  const fieldFontSize = getDefaultFontSize(button.acroField);\r\n\r\n  const rectangle = widget.getRectangle();\r\n  const ap = widget.getAppearanceCharacteristics();\r\n  const bs = widget.getBorderStyle();\r\n  const captions = ap?.getCaptions();\r\n  const normalText = captions?.normal ?? '';\r\n  const downText = captions?.down ?? normalText ?? '';\r\n\r\n  const borderWidth = bs?.getWidth() ?? 0;\r\n  const rotation = reduceRotation(ap?.getRotation());\r\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\r\n\r\n  const rotate = rotateInPlace({ ...rectangle, rotation });\r\n\r\n  const black = rgb(0, 0, 0);\r\n\r\n  const borderColor = componentsToColor(ap?.getBorderColor());\r\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\r\n  const downBackgroundColor = componentsToColor(ap?.getBackgroundColor(), 0.8);\r\n\r\n  const bounds = {\r\n    x: borderWidth,\r\n    y: borderWidth,\r\n    width: width - borderWidth * 2,\r\n    height: height - borderWidth * 2,\r\n  };\r\n  const normalLayout = layoutSinglelineText(normalText, {\r\n    alignment: TextAlignment.Center,\r\n    fontSize: widgetFontSize ?? fieldFontSize,\r\n    font,\r\n    bounds,\r\n  });\r\n  const downLayout = layoutSinglelineText(downText, {\r\n    alignment: TextAlignment.Center,\r\n    fontSize: widgetFontSize ?? fieldFontSize,\r\n    font,\r\n    bounds,\r\n  });\r\n\r\n  // Update font size and color\r\n  const fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\r\n  const textColor = widgetColor ?? fieldColor ?? black;\r\n  if (widgetColor || widgetFontSize !== undefined) {\r\n    updateDefaultAppearance(widget, textColor, font, fontSize);\r\n  } else {\r\n    updateDefaultAppearance(button.acroField, textColor, font, fontSize);\r\n  }\r\n\r\n  const options = {\r\n    x: 0 + borderWidth / 2,\r\n    y: 0 + borderWidth / 2,\r\n    width: width - borderWidth,\r\n    height: height - borderWidth,\r\n    borderWidth,\r\n    borderColor,\r\n    textColor,\r\n    font: font.name,\r\n    fontSize,\r\n  };\r\n\r\n  return {\r\n    normal: [\r\n      ...rotate,\r\n      ...drawButton({\r\n        ...options,\r\n        color: normalBackgroundColor,\r\n        textLines: [normalLayout.line],\r\n      }),\r\n    ],\r\n    down: [\r\n      ...rotate,\r\n      ...drawButton({\r\n        ...options,\r\n        color: downBackgroundColor,\r\n        textLines: [downLayout.line],\r\n      }),\r\n    ],\r\n  };\r\n};\r\n\r\nexport const defaultTextFieldAppearanceProvider: AppearanceProviderFor<PDFTextField> = (\r\n  textField,\r\n  widget,\r\n  font,\r\n) => {\r\n  // The `/DA` entry can be at the widget or field level - so we handle both\r\n  const widgetColor = getDefaultColor(widget);\r\n  const fieldColor = getDefaultColor(textField.acroField);\r\n  const widgetFontSize = getDefaultFontSize(widget);\r\n  const fieldFontSize = getDefaultFontSize(textField.acroField);\r\n\r\n  const rectangle = widget.getRectangle();\r\n  const ap = widget.getAppearanceCharacteristics();\r\n  const bs = widget.getBorderStyle();\r\n  const text = textField.getText() ?? '';\r\n\r\n  const borderWidth = bs?.getWidth() ?? 0;\r\n  const rotation = reduceRotation(ap?.getRotation());\r\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\r\n\r\n  const rotate = rotateInPlace({ ...rectangle, rotation });\r\n\r\n  const black = rgb(0, 0, 0);\r\n\r\n  const borderColor = componentsToColor(ap?.getBorderColor());\r\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\r\n\r\n  let textLines: TextPosition[];\r\n  let fontSize: number;\r\n\r\n  const padding = textField.isCombed() ? 0 : 1;\r\n  const bounds = {\r\n    x: borderWidth + padding,\r\n    y: borderWidth + padding,\r\n    width: width - (borderWidth + padding) * 2,\r\n    height: height - (borderWidth + padding) * 2,\r\n  };\r\n  if (textField.isMultiline()) {\r\n    const layout = layoutMultilineText(text, {\r\n      alignment: textField.getAlignment(),\r\n      fontSize: widgetFontSize ?? fieldFontSize,\r\n      font,\r\n      bounds,\r\n    });\r\n    textLines = layout.lines;\r\n    fontSize = layout.fontSize;\r\n  } else if (textField.isCombed()) {\r\n    const layout = layoutCombedText(text, {\r\n      fontSize: widgetFontSize ?? fieldFontSize,\r\n      font,\r\n      bounds,\r\n      cellCount: textField.getMaxLength() ?? 0,\r\n    });\r\n    textLines = layout.cells;\r\n    fontSize = layout.fontSize;\r\n  } else {\r\n    const layout = layoutSinglelineText(text, {\r\n      alignment: textField.getAlignment(),\r\n      fontSize: widgetFontSize ?? fieldFontSize,\r\n      font,\r\n      bounds,\r\n    });\r\n    textLines = [layout.line];\r\n    fontSize = layout.fontSize;\r\n  }\r\n\r\n  // Update font size and color\r\n  const textColor = widgetColor ?? fieldColor ?? black;\r\n  if (widgetColor || widgetFontSize !== undefined) {\r\n    updateDefaultAppearance(widget, textColor, font, fontSize);\r\n  } else {\r\n    updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\r\n  }\r\n\r\n  const options = {\r\n    x: 0 + borderWidth / 2,\r\n    y: 0 + borderWidth / 2,\r\n    width: width - borderWidth,\r\n    height: height - borderWidth,\r\n    borderWidth: borderWidth ?? 0,\r\n    borderColor,\r\n    textColor,\r\n    font: font.name,\r\n    fontSize,\r\n    color: normalBackgroundColor,\r\n    textLines,\r\n    padding,\r\n  };\r\n\r\n  return [...rotate, ...drawTextField(options)];\r\n};\r\n\r\nexport const defaultDropdownAppearanceProvider: AppearanceProviderFor<PDFDropdown> = (\r\n  dropdown,\r\n  widget,\r\n  font,\r\n) => {\r\n  // The `/DA` entry can be at the widget or field level - so we handle both\r\n  const widgetColor = getDefaultColor(widget);\r\n  const fieldColor = getDefaultColor(dropdown.acroField);\r\n  const widgetFontSize = getDefaultFontSize(widget);\r\n  const fieldFontSize = getDefaultFontSize(dropdown.acroField);\r\n\r\n  const rectangle = widget.getRectangle();\r\n  const ap = widget.getAppearanceCharacteristics();\r\n  const bs = widget.getBorderStyle();\r\n  const text = dropdown.getSelected()[0] ?? '';\r\n\r\n  const borderWidth = bs?.getWidth() ?? 0;\r\n  const rotation = reduceRotation(ap?.getRotation());\r\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\r\n\r\n  const rotate = rotateInPlace({ ...rectangle, rotation });\r\n\r\n  const black = rgb(0, 0, 0);\r\n\r\n  const borderColor = componentsToColor(ap?.getBorderColor());\r\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\r\n\r\n  const padding = 1;\r\n  const bounds = {\r\n    x: borderWidth + padding,\r\n    y: borderWidth + padding,\r\n    width: width - (borderWidth + padding) * 2,\r\n    height: height - (borderWidth + padding) * 2,\r\n  };\r\n  const { line, fontSize } = layoutSinglelineText(text, {\r\n    alignment: TextAlignment.Left,\r\n    fontSize: widgetFontSize ?? fieldFontSize,\r\n    font,\r\n    bounds,\r\n  });\r\n\r\n  // Update font size and color\r\n  const textColor = widgetColor ?? fieldColor ?? black;\r\n  if (widgetColor || widgetFontSize !== undefined) {\r\n    updateDefaultAppearance(widget, textColor, font, fontSize);\r\n  } else {\r\n    updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\r\n  }\r\n\r\n  const options = {\r\n    x: 0 + borderWidth / 2,\r\n    y: 0 + borderWidth / 2,\r\n    width: width - borderWidth,\r\n    height: height - borderWidth,\r\n    borderWidth: borderWidth ?? 0,\r\n    borderColor,\r\n    textColor,\r\n    font: font.name,\r\n    fontSize,\r\n    color: normalBackgroundColor,\r\n    textLines: [line],\r\n    padding,\r\n  };\r\n\r\n  return [...rotate, ...drawTextField(options)];\r\n};\r\n\r\nexport const defaultOptionListAppearanceProvider: AppearanceProviderFor<PDFOptionList> = (\r\n  optionList,\r\n  widget,\r\n  font,\r\n) => {\r\n  // The `/DA` entry can be at the widget or field level - so we handle both\r\n  const widgetColor = getDefaultColor(widget);\r\n  const fieldColor = getDefaultColor(optionList.acroField);\r\n  const widgetFontSize = getDefaultFontSize(widget);\r\n  const fieldFontSize = getDefaultFontSize(optionList.acroField);\r\n\r\n  const rectangle = widget.getRectangle();\r\n  const ap = widget.getAppearanceCharacteristics();\r\n  const bs = widget.getBorderStyle();\r\n\r\n  const borderWidth = bs?.getWidth() ?? 0;\r\n  const rotation = reduceRotation(ap?.getRotation());\r\n  const { width, height } = adjustDimsForRotation(rectangle, rotation);\r\n\r\n  const rotate = rotateInPlace({ ...rectangle, rotation });\r\n\r\n  const black = rgb(0, 0, 0);\r\n\r\n  const borderColor = componentsToColor(ap?.getBorderColor());\r\n  const normalBackgroundColor = componentsToColor(ap?.getBackgroundColor());\r\n\r\n  const options = optionList.getOptions();\r\n  const selected = optionList.getSelected();\r\n\r\n  if (optionList.isSorted()) options.sort();\r\n\r\n  let text = '';\r\n  for (let idx = 0, len = options.length; idx < len; idx++) {\r\n    text += options[idx];\r\n    if (idx < len - 1) text += '\\n';\r\n  }\r\n\r\n  const padding = 1;\r\n  const bounds = {\r\n    x: borderWidth + padding,\r\n    y: borderWidth + padding,\r\n    width: width - (borderWidth + padding) * 2,\r\n    height: height - (borderWidth + padding) * 2,\r\n  };\r\n  const { lines, fontSize, lineHeight } = layoutMultilineText(text, {\r\n    alignment: TextAlignment.Left,\r\n    fontSize: widgetFontSize ?? fieldFontSize,\r\n    font,\r\n    bounds,\r\n  });\r\n\r\n  const selectedLines: number[] = [];\r\n  for (let idx = 0, len = lines.length; idx < len; idx++) {\r\n    const line = lines[idx];\r\n    if (selected.includes(line.text)) selectedLines.push(idx);\r\n  }\r\n\r\n  const blue = rgb(153 / 255, 193 / 255, 218 / 255);\r\n\r\n  // Update font size and color\r\n  const textColor = widgetColor ?? fieldColor ?? black;\r\n  if (widgetColor || widgetFontSize !== undefined) {\r\n    updateDefaultAppearance(widget, textColor, font, fontSize);\r\n  } else {\r\n    updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\r\n  }\r\n\r\n  return [\r\n    ...rotate,\r\n    ...drawOptionList({\r\n      x: 0 + borderWidth / 2,\r\n      y: 0 + borderWidth / 2,\r\n      width: width - borderWidth,\r\n      height: height - borderWidth,\r\n      borderWidth: borderWidth ?? 0,\r\n      borderColor,\r\n      textColor,\r\n      font: font.name,\r\n      fontSize,\r\n      color: normalBackgroundColor,\r\n      textLines: lines,\r\n      lineHeight,\r\n      selectedColor: blue,\r\n      selectedLines,\r\n      padding,\r\n    }),\r\n  ];\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}